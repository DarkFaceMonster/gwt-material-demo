<!--
  #%L
  GwtMaterial
  %%
  Copyright (C) 2015 - 2016 GwtMaterialDesign
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
             xmlns:g="urn:import:com.google.gwt.user.client.ui"
             xmlns:m="urn:import:gwt.material.design.client.ui"
             xmlns:ma="urn:import:gwt.material.design.addins.client"
             xmlns:demo="urn:import:gwt.material.design.demo.client.ui">

    <ui:with field='res' type='gwt.material.design.demo.client.resources.MaterialResources' />

    <g:HTMLPanel>
    
        <m:MaterialRow addStyleNames="code">
            <m:MaterialTitle title="Note" description="This widget only works on pages served by a secure protocol (HTTPS). For the browser compatibility, access http://caniuse.com/#feat=stream."/>
        </m:MaterialRow>
    
        <m:MaterialRow addStyleNames="code">
            <m:MaterialTitle title="Usage" />
            <demo:PrettyPre addStyleNames="lang-xml">
                &emsp;&lt;!-- Addin Import --><br/>
                xmlns:ma="urn:import:gwt.material.design.addins.client"<br/><br/>
                &lt;!-- Addin Usage --><br/>
                &lt;ma:camera.MaterialCameraCapture padding="0" ui:field="camera" grid="l12 m12 s12"/>
            </demo:PrettyPre>
        </m:MaterialRow>
    
        <m:MaterialRow addStyleNames="code">
            <m:MaterialRow marginBottom="0">
                <m:MaterialColumn grid="s12" height="100%" padding="0" shadow="1" layoutPosition="RELATIVE">
                    <ma:camera.MaterialCameraCapture ui:field="camera" width="100%" height="100%"/>
                    <m:MaterialRow marginBottom="0" backgroundColor="BLACK" padding="20" width="100%" layoutPosition="ABSOLUTE" bottom="0">
                        <m:MaterialColumn grid="l4 m4 s12" offset="l4 m4" textAlign="CENTER">
                            <m:MaterialButton ui:field="play" type="FLOATING" marginRight="8" iconType="PLAY_ARROW" waves="DEFAULT" backgroundColor="WHITE" iconColor="BLACK" />
                            <m:MaterialButton ui:field="capture" type="FLOATING" marginRight="8" iconType="CAMERA" waves="DEFAULT" size="LARGE" backgroundColor="WHITE" iconColor="BLACK"/>
                            <m:MaterialButton ui:field="pause" type="FLOATING" marginRight="8" iconType="PAUSE" waves="DEFAULT" backgroundColor="WHITE" iconColor="BLACK" />
                        </m:MaterialColumn>
                    </m:MaterialRow>
                </m:MaterialColumn>
            </m:MaterialRow>

            <m:MaterialRow visible="false" ui:field="imageCapturedPanel">
                <m:MaterialLabel text="Captured Result" fontSize="2em" marginTop="20" marginBottom="20"/>
                <m:MaterialImage ui:field="imageCapture" grid="s12 m4 l4" shadow="1" />
            </m:MaterialRow>
        </m:MaterialRow>
    
        <m:MaterialRow addStyleNames="code">
            <m:MaterialTitle title="Browser Check" />
            <demo:PrettyPre addStyleNames="lang-java">
                &emsp;if (MaterialCameraCapture.isSupported()){ <br/>
                &emsp;camera.addCameraCaptureHandler(new CameraCaptureHandler() {<br/>
                &emsp;&emsp;@Override<br/>
                &emsp;&emsp;public void onCameraCaptureChange(CameraCaptureEvent event) {<br/>
                &emsp;&emsp;&emsp;if (event.getCaptureStatus() == CameraCaptureEvent.CaptureStatus.ERRORED){<br/>
                &emsp;&emsp;&emsp;&emsp;MaterialToast.fireToast("Error on starting the camera capture: " + event.getErrorMessage());<br/>
                &emsp;&emsp;&emsp;&emsp;((MaterialCameraCapture)event.getSource()).removeFromParent();<br/>
                &emsp;&emsp;&emsp;}else{<br/>
                &emsp;&emsp;&emsp;&emsp;MaterialToast.fireToast("Camera Captured");<br/>
                &emsp;&emsp;&emsp;}<br/>
                &emsp;&emsp;}<br/>
                &emsp;});<br/>
                }else {<br/>
                &emsp;MaterialToast.fireToast("Sorry, your browser doesn't support the camera capture.");<br/>
                }
            </demo:PrettyPre>
        </m:MaterialRow>
    
        <m:MaterialRow addStyleNames="code">
            <m:MaterialTitle title="Capturing" description="Capturing image and set the captured url to MaterialImage" />
            <demo:PrettyPre addStyleNames="lang-java">
                &emsp;@UiHandler("btnCapture")<br/>
                void onCapture(ClickEvent e) {<br/>
                &emsp;imgCapture.setUrl(camera.captureToDataURL());<br/>
                }
            </demo:PrettyPre>
        </m:MaterialRow>
    
        <g:HTMLPanel addStyleNames="code">
            <m:MaterialTitle title="Methods" description="You can call / set other method API on Camera Capture widget."/>
            <blockquote>
                <p><b>captureToDataURL()</b> - Captures the current frame of the video to an image data URL. Returns The Data URL of the captured image, which can be used as "src" on an "img" element or sent to the server</p>
                <p><b>captureToDataURL(String mimeType)</b> - The same with captureToDataURL() but you can set the param mimeType The type of the output image, such as "image/png" or "image/jpeg"</p>
                <p><b>play()</b> - Starts the video stream from the camera. This is called when the component is loaded.At this point the user is requested by the browser to allow the application to use the camera.</p>
                <p><b>restart()</b> - Restarts the video stream from the camera. The user is requested again by the browser to allow the application to use the camera.</p>
                <p><b>setPauseOnUnload(boolean pauseOnUnload)</b> - Sets if the camera capture should pause when the widget is unloaded.</p>
                <p><b>isPauseOnUnload()</b> - Returns if the camera capture should pause when the widget is unloaded.</p>
                <p><b>isSupported()</b> - Sets if the browser supports the Streams API. This should be called before creating any MaterialCameraCapture widgets to avoid errors on the browser.</p>
            </blockquote>
        </g:HTMLPanel>
    </g:HTMLPanel>
</ui:UiBinder>

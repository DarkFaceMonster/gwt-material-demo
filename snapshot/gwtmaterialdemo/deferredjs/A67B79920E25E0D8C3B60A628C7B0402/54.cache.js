$wnd.gwtmaterialdemo.runAsyncCallback54("function fte(){}\nfunction hte(){}\nfunction jte(){}\nfunction lte(){}\nfunction nte(){}\nfunction rte(){}\nfunction tte(){}\nfunction o5c(a,b){a.onshow=b}\nfunction m5c(a,b){a.onclose=b}\nfunction l5c(a,b){a.onclick=b}\nfunction n5c(a,b){a.onerror=b}\nfunction qte(){this.a=new rte;this.b=new tte}\nfunction ete(){iKb.call(this);gKb(this,pte(new qte))}\nfunction Xse(a,b,c){tJb();SJb.call(this,a,b,c,(qtd(),otd))}\nfunction xte(a){var b;if(!a.d){b=new ete;a.d=b}return a.d}\nfunction wte(a){var b,c;if(!a.c){c=new Xse(GGb(AKb(a.a)),(b=xte(a),b),vte(a));lJb((DKb(a.a),c),BMb(DKb(a.a)));a.c=c}return a.c}\nfunction cte(){var a;a=(U4c(),$wnd.navigator.serviceWorker!=null);a||imd(new lmd(mD(gD(MK,1),f$e,21,0,[])),'Push Notification is not supported',t3e,null);return a}\nfunction dte(){var a,b;if(cte()){if(hOe($wnd.Notification.permission,'granted')){b=new $wnd.Object;b.body='I love GMD';b.icon='https://user.oc-static.com/upload/2017/05/03/14938342186053_01-duration-and-easing.png';a=new $wnd.Notification('GMD Says',b);l5c(a,cvb(hte.prototype.Bf,hte,[]));m5c(a,cvb(jte.prototype.Bf,jte,[]));n5c(a,cvb(lte.prototype.Bf,lte,[]));o5c(a,cvb(nte.prototype.Bf,nte,[]))}else{imd(new lmd(mD(gD(MK,1),f$e,21,0,[])),'Permission Denied. Update it thru the browser setting',t3e,null)}}}\nfunction pte(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;b=new Mjc;YPb(b,(c=new K6b,YPb(c,(i=new dmd,qpd(i.b,'Will check if the Notification API is supported'),Is(ho(i.a),(uwb(),(new iwb(vwb(vxf))).a)),HA(i,vxf),i)),YPb(c,(j=new wAe,spd(j,(k=new HOe,k.a+='PwaManager.isPwaSupported()',new cwb(k.a)).a),zo((axb(),j.tb),raf,true),j)),zo(c.tb,D6e,true),c));YPb(b,(d=new K6b,YPb(d,(l=new dmd,Is(ho(l.a),(new iwb(vwb(wxf))).a),HA(l,wxf),l)),YPb(d,(m=new cXb,jYb(m.k,wxf),m.k.ob||YPb(m,m.k),aQb(m,a.a),m)),YPb(d,(n=new wAe,spd(n,(o=new HOe,o.a+='// Will return the following status (see next section) <br> Notification.getPermission();',new cwb(o.a)).a),zo(n.tb,raf,true),n)),zo(d.tb,D6e,true),d));YPb(b,(e=new K6b,YPb(e,(p=new dmd,Is(ho(p.a),(new iwb(vwb(xxf))).a),HA(p,xxf),p)),YPb(e,new lBb((q=new HOe,q.a+='<blockquote> <p><b>denied<\\/b> - The user refuses to have notifications displayed. <\\/p> <p><b>granted<\\/b> - The user accepts having notifications displayed. <\\/p> <p><b>default<\\/b> - The user choice is unknown and therefore the browser will act as if the value were denied. <\\/p> <\\/blockquote>',new cwb(q.a)).a)),zo(e.tb,D6e,true),e));YPb(b,(f=new K6b,YPb(f,(r=new dmd,Is(ho(r.a),(new iwb(vwb(yxf))).a),HA(r,yxf),r)),YPb(f,(s=new cXb,jYb(s.k,yxf),s.k.ob||YPb(s,s.k),aQb(s,a.b),s)),zo(f.tb,D6e,true),f));YPb(b,(g=new K6b,YPb(g,(t=new dmd,Is(ho(t.a),(new iwb(vwb(zxf))).a),HA(t,zxf),t)),YPb(g,new lBb((u=new HOe,u.a+='<blockquote> <p><b>actions<\\/b> - The actions array of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>badge<\\/b> - The URL of the image used to represent the notification when there is not enough space to display the notification itself.<\\/p> <p><b>body<\\/b> - The body string of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>data<\\/b> - Returns a structured clone of the notification\\u2019s data.<\\/p> <p><b>dir<\\/b> - The text direction of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>lang<\\/b> - The language code of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>tag<\\/b> - The ID of the notification (if any) as specified in the options parameter of the constructor. <\\/p> <p><b>icon<\\/b> - The URL of the image used as an icon of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>image<\\/b> - The URL of an image to be displayed as part of the notification, as specified in the options parameter of the constructor. <\\/p> <p><b>renotify<\\/b> - Specifies whether the user should be notified after a new notification replaces an old one. <\\/p> <p><b>requireInteraction<\\/b> - A Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically. <\\/p> <p><b>silent<\\/b> - Specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. <\\/p> <p><b>timestamp<\\/b> - Specifies the time at which a notification is created or applicable (past, present, or future). <\\/p> <p><b>title<\\/b> - The title of the notification as specified in the first parameter of the constructor. <\\/p> <p><b>vibrate<\\/b> - Specifies a vibration pattern for devices with vibration hardware to emit. <\\/p> <\\/blockquote>',new cwb(u.a)).a)),zo(g.tb,D6e,true),g));YPb(b,(h=new K6b,YPb(h,(v=new dmd,Is(ho(v.a),(new iwb(vwb(Axf))).a),HA(v,Axf),v)),YPb(h,(w=new wAe,spd(w,(A=new HOe,A.a+='Notification notification = new Notification(\"GMD Says\", options); <br> // Listen to any Notification events <br> // A handler for the click event. It is triggered each time the user clicks on the notification. <br> notification.setOnclick(param1 -&gt; MaterialToast.fireToast(\"Clicked\")); <br> // A handler for the close event. It is triggered when the user closes the notification. <br> notification.setOnclose(param1 -&gt; MaterialToast.fireToast(\"Closed\")); <br> // A handler for the error event. It is triggered each time the notification encounters an error. <br> notification.setOnerror(param1 -&gt; MaterialToast.fireToast(\"Error\")); <br> // A handler for the show event. It is triggered when the notification is displayed. <br> notification.setOnshow(param1 -&gt; MaterialToast.fireToast(\"Shown\")); <br>',new cwb(A.a)).a),zo(w.tb,raf,true),w)),zo(h.tb,D6e,true),h));return b}\nvar vxf='isSupported()',wxf='Request Permission',xxf='Permission Status',yxf='Show Notification',zxf='Notification Options',Axf='Notification Handlers';avb(1117,120,v2e,Xse);_.Ee=function Yse(){Xze();AJb(this,new Zze(ijf,'Push messaging provides a simple and effective way to re-engage with your users','pwa/notification/NotificationView',''))};var Qmb=NMe(pjf,'NotificationPresenter',1117);avb(1729,129,w2e,ete);var Umb=NMe(pjf,'NotificationView',1729);avb(3212,$wnd.Function,{},fte);_.Bf=function gte(a){mmd('Status: '+cE(a))};avb(3208,$wnd.Function,{},hte);_.Bf=function ite(a){imd(new lmd(mD(gD(MK,1),f$e,21,0,[])),'Clicked',t3e,null)};avb(3209,$wnd.Function,{},jte);_.Bf=function kte(a){imd(new lmd(mD(gD(MK,1),f$e,21,0,[])),Xmf,t3e,null)};avb(3210,$wnd.Function,{},lte);_.Bf=function mte(a){imd(new lmd(mD(gD(MK,1),f$e,21,0,[])),tsf,t3e,null)};avb(3211,$wnd.Function,{},nte);_.Bf=function ote(a){imd(new lmd(mD(gD(MK,1),f$e,21,0,[])),'Shown',t3e,null)};avb(2273,1,{},qte);var Tmb=NMe(pjf,'NotificationView_BinderImpl/Widgets',2273);avb(2274,1,g3e,rte);_.nd=function ste(a){cte()&&$wnd.Notification.requestPermission(cvb(fte.prototype.Bf,fte,[]))};var Rmb=NMe(pjf,'NotificationView_BinderImpl/Widgets/1',2274);avb(2275,1,g3e,tte);_.nd=function ute(a){dte()};var Smb=NMe(pjf,'NotificationView_BinderImpl/Widgets/2',2275);avb(1002,1,Jaf);_.Yc=function Dte(){SNb(this.b,wte(this.a.a))};GZe(Jq)(54);\n//# sourceURL=gwtmaterialdemo-54.js\n")

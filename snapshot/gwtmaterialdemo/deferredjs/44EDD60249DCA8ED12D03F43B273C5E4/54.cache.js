$wnd.gwtmaterialdemo.runAsyncCallback54("function Bse(){}\nfunction Dse(){}\nfunction Fse(){}\nfunction Hse(){}\nfunction Jse(){}\nfunction Nse(){}\nfunction Pse(){}\nfunction Y4c(a,b){a.onshow=b}\nfunction W4c(a,b){a.onclose=b}\nfunction V4c(a,b){a.onclick=b}\nfunction X4c(a,b){a.onerror=b}\nfunction Mse(){this.a=new Nse;this.b=new Pse}\nfunction Ase(){TJb.call(this);RJb(this,Lse(new Mse))}\nfunction rse(a,b,c){cJb();BJb.call(this,a,b,c,(Msd(),Ksd))}\nfunction Tse(a){var b;if(!a.d){b=new Ase;a.d=b}return a.d}\nfunction Sse(a){var b,c;if(!a.c){c=new rse(pGb(jKb(a.a)),(b=Tse(a),b),Rse(a));WIb((mKb(a.a),c),kMb(mKb(a.a)));a.c=c}return a.c}\nfunction yse(){var a;a=(C4c(),$wnd.navigator.serviceWorker!=null);a||Gld(new Ild(dD(ZC(GK,1),RZe,21,0,[])),'Push Notification is not supported',_2e,null);return a}\nfunction zse(){var a,b;if(yse()){if(GNe($wnd.Notification.permission,'granted')){b=new $wnd.Object;b.body='I love GMD';b.icon='https://user.oc-static.com/upload/2017/05/03/14938342186053_01-duration-and-easing.png';a=new $wnd.Notification('GMD Says',b);V4c(a,$ub(Dse.prototype.Bf,Dse,[]));W4c(a,$ub(Fse.prototype.Bf,Fse,[]));X4c(a,$ub(Hse.prototype.Bf,Hse,[]));Y4c(a,$ub(Jse.prototype.Bf,Jse,[]))}else{Gld(new Ild(dD(ZC(GK,1),RZe,21,0,[])),'Permission Denied. Update it thru the browser setting',_2e,null)}}}\nfunction Lse(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;b=new ujc;HPb(b,(c=new s6b,HPb(c,(i=new Ald,Mod(i.b,'Will check if the Notification API is supported'),Fs(ho(i.a),(qwb(),(new ewb(rwb(dxf))).a)),yA(i,dxf),i)),HPb(c,(j=new Sze,Ood(j,(k=new eOe,k.a+='PwaManager.isPwaSupported()',new $vb(k.a)).a),zo((Ywb(),j.tb),Y9e,true),j)),zo(c.tb,i6e,true),c));HPb(b,(d=new s6b,HPb(d,(l=new Ald,Fs(ho(l.a),(new ewb(rwb(exf))).a),yA(l,exf),l)),HPb(d,(m=new LWb,SXb(m.k,exf),m.k.ob||HPb(m,m.k),LPb(m,a.a),m)),HPb(d,(n=new Sze,Ood(n,(o=new eOe,o.a+='// Will return the following status (see next section) <br> Notification.getPermission();',new $vb(o.a)).a),zo(n.tb,Y9e,true),n)),zo(d.tb,i6e,true),d));HPb(b,(e=new s6b,HPb(e,(p=new Ald,Fs(ho(p.a),(new ewb(rwb(fxf))).a),yA(p,fxf),p)),HPb(e,new jBb((q=new eOe,q.a+='<blockquote> <p><b>denied<\\/b> - The user refuses to have notifications displayed. <\\/p> <p><b>granted<\\/b> - The user accepts having notifications displayed. <\\/p> <p><b>default<\\/b> - The user choice is unknown and therefore the browser will act as if the value were denied. <\\/p> <\\/blockquote>',new $vb(q.a)).a)),zo(e.tb,i6e,true),e));HPb(b,(f=new s6b,HPb(f,(r=new Ald,Fs(ho(r.a),(new ewb(rwb(gxf))).a),yA(r,gxf),r)),HPb(f,(s=new LWb,SXb(s.k,gxf),s.k.ob||HPb(s,s.k),LPb(s,a.b),s)),zo(f.tb,i6e,true),f));HPb(b,(g=new s6b,HPb(g,(t=new Ald,Fs(ho(t.a),(new ewb(rwb(hxf))).a),yA(t,hxf),t)),HPb(g,new jBb((u=new eOe,u.a+='<blockquote> <p><b>actions<\\/b> - The actions array of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>badge<\\/b> - The URL of the image used to represent the notification when there is not enough space to display the notification itself.<\\/p> <p><b>body<\\/b> - The body string of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>data<\\/b> - Returns a structured clone of the notification\\u2019s data.<\\/p> <p><b>dir<\\/b> - The text direction of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>lang<\\/b> - The language code of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>tag<\\/b> - The ID of the notification (if any) as specified in the options parameter of the constructor. <\\/p> <p><b>icon<\\/b> - The URL of the image used as an icon of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>image<\\/b> - The URL of an image to be displayed as part of the notification, as specified in the options parameter of the constructor. <\\/p> <p><b>renotify<\\/b> - Specifies whether the user should be notified after a new notification replaces an old one. <\\/p> <p><b>requireInteraction<\\/b> - A Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically. <\\/p> <p><b>silent<\\/b> - Specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. <\\/p> <p><b>timestamp<\\/b> - Specifies the time at which a notification is created or applicable (past, present, or future). <\\/p> <p><b>title<\\/b> - The title of the notification as specified in the first parameter of the constructor. <\\/p> <p><b>vibrate<\\/b> - Specifies a vibration pattern for devices with vibration hardware to emit. <\\/p> <\\/blockquote>',new $vb(u.a)).a)),zo(g.tb,i6e,true),g));HPb(b,(h=new s6b,HPb(h,(v=new Ald,Fs(ho(v.a),(new ewb(rwb(ixf))).a),yA(v,ixf),v)),HPb(h,(w=new Sze,Ood(w,(A=new eOe,A.a+='Notification notification = new Notification(\"GMD Says\", options); <br> // Listen to any Notification events <br> // A handler for the click event. It is triggered each time the user clicks on the notification. <br> notification.setOnclick(param1 -&gt; MaterialToast.fireToast(\"Clicked\")); <br> // A handler for the close event. It is triggered when the user closes the notification. <br> notification.setOnclose(param1 -&gt; MaterialToast.fireToast(\"Closed\")); <br> // A handler for the error event. It is triggered each time the notification encounters an error. <br> notification.setOnerror(param1 -&gt; MaterialToast.fireToast(\"Error\")); <br> // A handler for the show event. It is triggered when the notification is displayed. <br> notification.setOnshow(param1 -&gt; MaterialToast.fireToast(\"Shown\")); <br>',new $vb(A.a)).a),zo(w.tb,Y9e,true),w)),zo(h.tb,i6e,true),h));return b}\nvar dxf='isSupported()',exf='Request Permission',fxf='Permission Status',gxf='Show Notification',hxf='Notification Options',ixf='Notification Handlers';Yub(1120,120,d2e,rse);_.Ee=function sse(){rze();jJb(this,new tze(Rif,'Push messaging provides a simple and effective way to re-engage with your users','pwa/notification/NotificationView',''))};var Hmb=iMe(Yif,'NotificationPresenter',1120);Yub(1735,129,e2e,Ase);var Lmb=iMe(Yif,'NotificationView',1735);Yub(3215,$wnd.Function,{},Bse);_.Bf=function Cse(a){Jld('Status: '+VD(a))};Yub(3211,$wnd.Function,{},Dse);_.Bf=function Ese(a){Gld(new Ild(dD(ZC(GK,1),RZe,21,0,[])),'Clicked',_2e,null)};Yub(3212,$wnd.Function,{},Fse);_.Bf=function Gse(a){Gld(new Ild(dD(ZC(GK,1),RZe,21,0,[])),Fmf,_2e,null)};Yub(3213,$wnd.Function,{},Hse);_.Bf=function Ise(a){Gld(new Ild(dD(ZC(GK,1),RZe,21,0,[])),bsf,_2e,null)};Yub(3214,$wnd.Function,{},Jse);_.Bf=function Kse(a){Gld(new Ild(dD(ZC(GK,1),RZe,21,0,[])),'Shown',_2e,null)};Yub(2279,1,{},Mse);var Kmb=iMe(Yif,'NotificationView_BinderImpl/Widgets',2279);Yub(2280,1,O2e,Nse);_.nd=function Ose(a){yse()&&$wnd.Notification.requestPermission($ub(Bse.prototype.Bf,Bse,[]))};var Imb=iMe(Yif,'NotificationView_BinderImpl/Widgets/1',2280);Yub(2281,1,O2e,Pse);_.nd=function Qse(a){zse()};var Jmb=iMe(Yif,'NotificationView_BinderImpl/Widgets/2',2281);Yub(1005,1,oaf);_.Yc=function Zse(){BNb(this.b,Sse(this.a.a))};qZe(Iq)(54);\n//# sourceURL=gwtmaterialdemo-54.js\n")

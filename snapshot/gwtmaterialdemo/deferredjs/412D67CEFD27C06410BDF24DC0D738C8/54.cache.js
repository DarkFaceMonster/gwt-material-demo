$wnd.gwtmaterialdemo.runAsyncCallback54("function Xse(){}\nfunction Zse(){}\nfunction _se(){}\nfunction bte(){}\nfunction dte(){}\nfunction hte(){}\nfunction jte(){}\nfunction s5c(a,b){a.onshow=b}\nfunction q5c(a,b){a.onclose=b}\nfunction p5c(a,b){a.onclick=b}\nfunction r5c(a,b){a.onerror=b}\nfunction gte(){this.a=new hte;this.b=new jte}\nfunction Wse(){nKb.call(this);lKb(this,fte(new gte))}\nfunction Nse(a,b,c){yJb();XJb.call(this,a,b,c,(gtd(),etd))}\nfunction nte(a){var b;if(!a.d){b=new Wse;a.d=b}return a.d}\nfunction mte(a){var b,c;if(!a.c){c=new Nse(LGb(FKb(a.a)),(b=nte(a),b),lte(a));qJb((IKb(a.a),c),GMb(IKb(a.a)));a.c=c}return a.c}\nfunction Use(){var a;a=(Y4c(),$wnd.navigator.serviceWorker!=null);a||amd(new cmd(mD(gD(MK,1),l$e,21,0,[])),'Push Notification is not supported',x3e,null);return a}\nfunction Vse(){var a,b;if(Use()){if(aOe($wnd.Notification.permission,'granted')){b=new $wnd.Object;b.body='I love GMD';b.icon='https://user.oc-static.com/upload/2017/05/03/14938342186053_01-duration-and-easing.png';a=new $wnd.Notification('GMD Says',b);p5c(a,hvb(Zse.prototype.Bf,Zse,[]));q5c(a,hvb(_se.prototype.Bf,_se,[]));r5c(a,hvb(bte.prototype.Bf,bte,[]));s5c(a,hvb(dte.prototype.Bf,dte,[]))}else{amd(new cmd(mD(gD(MK,1),l$e,21,0,[])),'Permission Denied. Update it thru the browser setting',x3e,null)}}}\nfunction fte(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;b=new Qjc;bQb(b,(c=new O6b,bQb(c,(i=new Wld,gpd(i.b,'Will check if the Notification API is supported'),Is(ho(i.a),(zwb(),(new nwb(Awb(Cxf))).a)),HA(i,Cxf),i)),bQb(c,(j=new mAe,ipd(j,(k=new AOe,k.a+='PwaManager.isPwaSupported()',new hwb(k.a)).a),zo((fxb(),j.tb),vaf,true),j)),zo(c.tb,H6e,true),c));bQb(b,(d=new O6b,bQb(d,(l=new Wld,Is(ho(l.a),(new nwb(Awb(Dxf))).a),HA(l,Dxf),l)),bQb(d,(m=new fXb,mYb(m.k,Dxf),m.k.ob||bQb(m,m.k),fQb(m,a.a),m)),bQb(d,(n=new mAe,ipd(n,(o=new AOe,o.a+='// Will return the following status (see next section) <br> Notification.getPermission();',new hwb(o.a)).a),zo(n.tb,vaf,true),n)),zo(d.tb,H6e,true),d));bQb(b,(e=new O6b,bQb(e,(p=new Wld,Is(ho(p.a),(new nwb(Awb(Exf))).a),HA(p,Exf),p)),bQb(e,new qBb((q=new AOe,q.a+='<blockquote> <p><b>denied<\\/b> - The user refuses to have notifications displayed. <\\/p> <p><b>granted<\\/b> - The user accepts having notifications displayed. <\\/p> <p><b>default<\\/b> - The user choice is unknown and therefore the browser will act as if the value were denied. <\\/p> <\\/blockquote>',new hwb(q.a)).a)),zo(e.tb,H6e,true),e));bQb(b,(f=new O6b,bQb(f,(r=new Wld,Is(ho(r.a),(new nwb(Awb(Fxf))).a),HA(r,Fxf),r)),bQb(f,(s=new fXb,mYb(s.k,Fxf),s.k.ob||bQb(s,s.k),fQb(s,a.b),s)),zo(f.tb,H6e,true),f));bQb(b,(g=new O6b,bQb(g,(t=new Wld,Is(ho(t.a),(new nwb(Awb(Gxf))).a),HA(t,Gxf),t)),bQb(g,new qBb((u=new AOe,u.a+='<blockquote> <p><b>actions<\\/b> - The actions array of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>badge<\\/b> - The URL of the image used to represent the notification when there is not enough space to display the notification itself.<\\/p> <p><b>body<\\/b> - The body string of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>data<\\/b> - Returns a structured clone of the notification\\u2019s data.<\\/p> <p><b>dir<\\/b> - The text direction of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>lang<\\/b> - The language code of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>tag<\\/b> - The ID of the notification (if any) as specified in the options parameter of the constructor. <\\/p> <p><b>icon<\\/b> - The URL of the image used as an icon of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>image<\\/b> - The URL of an image to be displayed as part of the notification, as specified in the options parameter of the constructor. <\\/p> <p><b>renotify<\\/b> - Specifies whether the user should be notified after a new notification replaces an old one. <\\/p> <p><b>requireInteraction<\\/b> - A Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically. <\\/p> <p><b>silent<\\/b> - Specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. <\\/p> <p><b>timestamp<\\/b> - Specifies the time at which a notification is created or applicable (past, present, or future). <\\/p> <p><b>title<\\/b> - The title of the notification as specified in the first parameter of the constructor. <\\/p> <p><b>vibrate<\\/b> - Specifies a vibration pattern for devices with vibration hardware to emit. <\\/p> <\\/blockquote>',new hwb(u.a)).a)),zo(g.tb,H6e,true),g));bQb(b,(h=new O6b,bQb(h,(v=new Wld,Is(ho(v.a),(new nwb(Awb(Hxf))).a),HA(v,Hxf),v)),bQb(h,(w=new mAe,ipd(w,(A=new AOe,A.a+='Notification notification = new Notification(\"GMD Says\", options); <br> // Listen to any Notification events <br> // A handler for the click event. It is triggered each time the user clicks on the notification. <br> notification.setOnclick(param1 -&gt; MaterialToast.fireToast(\"Clicked\")); <br> // A handler for the close event. It is triggered when the user closes the notification. <br> notification.setOnclose(param1 -&gt; MaterialToast.fireToast(\"Closed\")); <br> // A handler for the error event. It is triggered each time the notification encounters an error. <br> notification.setOnerror(param1 -&gt; MaterialToast.fireToast(\"Error\")); <br> // A handler for the show event. It is triggered when the notification is displayed. <br> notification.setOnshow(param1 -&gt; MaterialToast.fireToast(\"Shown\")); <br>',new hwb(A.a)).a),zo(w.tb,vaf,true),w)),zo(h.tb,H6e,true),h));return b}\nvar Cxf='isSupported()',Dxf='Request Permission',Exf='Permission Status',Fxf='Show Notification',Gxf='Notification Options',Hxf='Notification Handlers';fvb(1120,120,B2e,Nse);_.Ee=function Ose(){Nze();FJb(this,new Pze(ojf,'Push messaging provides a simple and effective way to re-engage with your users','pwa/notification/NotificationView',''))};var Qmb=EMe(vjf,'NotificationPresenter',1120);fvb(1732,129,C2e,Wse);var Umb=EMe(vjf,'NotificationView',1732);fvb(3215,$wnd.Function,{},Xse);_.Bf=function Yse(a){dmd('Status: '+cE(a))};fvb(3211,$wnd.Function,{},Zse);_.Bf=function $se(a){amd(new cmd(mD(gD(MK,1),l$e,21,0,[])),'Clicked',x3e,null)};fvb(3212,$wnd.Function,{},_se);_.Bf=function ate(a){amd(new cmd(mD(gD(MK,1),l$e,21,0,[])),cnf,x3e,null)};fvb(3213,$wnd.Function,{},bte);_.Bf=function cte(a){amd(new cmd(mD(gD(MK,1),l$e,21,0,[])),Asf,x3e,null)};fvb(3214,$wnd.Function,{},dte);_.Bf=function ete(a){amd(new cmd(mD(gD(MK,1),l$e,21,0,[])),'Shown',x3e,null)};fvb(2276,1,{},gte);var Tmb=EMe(vjf,'NotificationView_BinderImpl/Widgets',2276);fvb(2277,1,k3e,hte);_.nd=function ite(a){Use()&&$wnd.Notification.requestPermission(hvb(Xse.prototype.Bf,Xse,[]))};var Rmb=EMe(vjf,'NotificationView_BinderImpl/Widgets/1',2277);fvb(2278,1,k3e,jte);_.nd=function kte(a){Vse()};var Smb=EMe(vjf,'NotificationView_BinderImpl/Widgets/2',2278);fvb(1005,1,Naf);_.Yc=function tte(){XNb(this.b,mte(this.a.a))};MZe(Jq)(54);\n//# sourceURL=gwtmaterialdemo-54.js\n")

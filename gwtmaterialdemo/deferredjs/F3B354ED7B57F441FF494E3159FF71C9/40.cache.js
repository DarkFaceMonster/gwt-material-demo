$wnd.gwtmaterialdemo.runAsyncCallback40("var $intern_137 = {9:1, 2451:1};\nfunction $getOffsetHeight(this$static){\n  return $getPropertyInt(($clinit_DOM() , this$static.element_0), 'offsetHeight');\n}\n\nfunction $forEachRemaining(this$static, consumer){\n  checkCriticalNotNull(consumer);\n  while (this$static.i < this$static.this$01.array.length) {\n    $accept_0(consumer, $next_6(this$static));\n  }\n}\n\nfunction $delay(this$static, delay){\n  $cancel_0(this$static.timer);\n  delay > 0?$schedule(this$static.timer, delay):$onExecute(this$static.timer.this$01);\n}\n\ndefineClass(1968, 1, {});\nvar Lgwt_material_design_client_base_InterruptibleTask_2_classLit = createForClass('gwt.material.design.client.base', 'InterruptibleTask', 1968);\nfunction InterruptibleTask$1(this$0){\n  this.this$01 = this$0;\n  Timer.call(this);\n}\n\ndefineClass(1978, 136, {}, InterruptibleTask$1);\n_.run = function run_1(){\n  $onExecute(this.this$01);\n}\n;\nvar Lgwt_material_design_client_base_InterruptibleTask$1_2_classLit = createForClass('gwt.material.design.client.base', 'InterruptibleTask/1', 1978);\nfunction $addCategory(this$static, category){\n  if (!$hasCategory(this$static, category.name_0)) {\n    $add_21(this$static.categories, category);\n    this$static.setup && this$static.useCategories && $renderCategory(this$static, category);\n  }\n}\n\nfunction $clearCategories(this$static){\n  var category, category$iterator, subheader;\n  for (category$iterator = new ArrayList$1(this$static.categories); category$iterator.i < category$iterator.this$01.array.length;) {\n    category = castTo($next_6(category$iterator), 120);\n    subheader = castTo(category.widget, 164);\n    !!subheader && subheader.attached && $removeFromParent_2(subheader);\n  }\n  $clear_6(this$static.categories);\n}\n\nfunction $clearRowsAndCategories(this$static){\n  $clear_6(this$static.rows_0);\n  $clearCategories(this$static);\n}\n\nfunction $getCategoryHeight(this$static){\n  var categoryComponent, ex;\n  if (this$static.useCategories && this$static.categoryHeight == 0) {\n    try {\n      categoryComponent = castTo($get_3(this$static.categories, 0), 120);\n      !!categoryComponent && !!categoryComponent.widget && !!categoryComponent.widget.parent_1 && (this$static.categoryHeight = $getOffsetHeight(castTo(categoryComponent.widget, 164)));\n    }\n     catch ($e0) {\n      $e0 = toJava($e0);\n      if (instanceOf($e0, 111)) {\n        ex = $e0;\n        $log_0(logger_2, ($clinit_Level() , FINE), \"Couldn't get the first category.\", ex);\n      }\n       else \n        throw toJs($e0);\n    }\n  }\n  return this$static.categoryHeight;\n}\n\nfunction $getPassedCategories(this$static){\n  var category, category$iterator, passed, scrollTop;\n  passed = new ArrayList;\n  scrollTop = this$static.tableBody.scrollTop();\n  for (category$iterator = new ArrayList$1(this$static.categories); category$iterator.i < category$iterator.this$01.array.length;) {\n    category = castTo($next_6(category$iterator), 120);\n    if ($isCategoryEmpty(this$static, category) && scrollTop > this$static.renderer.expectedRowHeight + $$this(this$static.thead).height()) {\n      passed.array[passed.array.length] = category;\n    }\n     else {\n      return passed;\n    }\n  }\n  return new ArrayList;\n}\n\nfunction $getRowElementByModel(this$static, model){\n  var row, row$iterator;\n  for (row$iterator = new ArrayList$1(this$static.rows_0); row$iterator.i < row$iterator.this$01.array.length;) {\n    row = castTo($next_6(row$iterator), 72);\n    if (equals_Ljava_lang_Object__Z__devirtual$(row.data_0, model)) {\n      return $getElement(row.widget);\n    }\n  }\n  return null;\n}\n\nfunction $hasCategory(this$static, categoryName){\n  var category, category$iterator;\n  if (categoryName != null) {\n    for (category$iterator = new ArrayList$1(this$static.categories); category$iterator.i < category$iterator.this$01.array.length;) {\n      category = castTo($next_6(category$iterator), 120);\n      if ($equals_1(category.name_0, categoryName)) {\n        return true;\n      }\n    }\n  }\n  return !!$getOrphansCategory(this$static);\n}\n\nfunction $isCategoryEmpty(this$static, category){\n  var row, row$iterator;\n  for (row$iterator = new ArrayList$1(this$static.rows_0); row$iterator.i < row$iterator.this$01.array.length;) {\n    row = castTo($next_6(row$iterator), 72);\n    if ($equals_1(row.categoryName, category.name_0)) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndefineClass(349, 1, $intern_20);\n_.addCategory = function addCategory(category){\n  $addCategory(this, category);\n}\n;\nfunction $addCache(this$static, startIndex, data_0){\n  var cacheOffset, i, i0, value_0;\n  cacheOffset = max_1(0, startIndex - this$static.array.length);\n  for (i0 = 0; i0 < cacheOffset; i0++) {\n    this$static.array[this$static.array.length] = null;\n  }\n  for (i = startIndex; i < startIndex + data_0.size_1(); i++) {\n    value_0 = data_0.get_2(i - startIndex);\n    i < this$static.array.length?$set_1(this$static, i, value_0):(this$static.array[this$static.array.length] = value_0 , true);\n  }\n}\n\nfunction $getCache(this$static, startIndex, viewSize){\n  var cache, data_0, end, i, size_0;\n  size_0 = this$static.array.length;\n  end = startIndex + viewSize;\n  cache = new ArrayList;\n  if (startIndex < size_0 && end <= size_0) {\n    for (i = startIndex; i < end; i++) {\n      data_0 = (checkCriticalElementIndex(i, this$static.array.length) , this$static.array[i]);\n      if (data_0 != null) {\n        cache.array[cache.array.length] = data_0;\n      }\n       else {\n        cache.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_3, 1, 0, 5, 1);\n        break;\n      }\n    }\n  }\n  return cache;\n}\n\nfunction InfiniteDataCache(){\n  ArrayList.call(this);\n}\n\ndefineClass(2053, 48, $intern_85, InfiniteDataCache);\nvar Lgwt_material_design_client_data_infinite_InfiniteDataCache_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataCache', 2053);\nfunction $clinit_InfiniteDataView(){\n  $clinit_InfiniteDataView = emptyMethod;\n  $clinit_AbstractDataView();\n  getLogger(($ensureNamesAreInitialized(Lgwt_material_design_client_data_infinite_InfiniteDataView_2_classLit) , Lgwt_material_design_client_data_infinite_InfiniteDataView_2_classLit.typeName));\n}\n\nfunction $doLoad(this$static){\n  this$static.loading = true;\n  if (!!this$static.loaderCache && this$static.loaderCache.array.length != 0) {\n    $loaded_0(this$static, this$static.loaderIndex, this$static.loaderCache);\n    this$static.loaderCache.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_3, 1, 0, 5, 1);\n    this$static.loaderCache = null;\n  }\n   else {\n    $setLoadMask_0(this$static, true);\n    $load_10(new LoadConfig(this$static.loaderIndex, this$static.loaderSize, this$static.sortContext, $getOpenCategories(this$static)), new InfiniteDataView$2(this$static));\n  }\n}\n\nfunction $getVisibleRowCapacity(this$static){\n  var calcHeight, rh, rows_0, visibleHeight;\n  rh = (this$static.rows_0.array.length == 0 || $calculateRowHeight(this$static.renderer, castTo($get_3(this$static.rows_0, 0), 72)) , this$static.renderer.calculatedRowHeight);\n  visibleHeight = this$static.tableBody.height() - $$this(this$static.headerRow).height();\n  rows_0 = round_int(visibleHeight < 1?0:$wnd.Math.floor(visibleHeight / rh));\n  calcHeight = rh * rows_0;\n  while (calcHeight < visibleHeight) {\n    ++rows_0;\n    calcHeight = rh * rows_0;\n  }\n  return rows_0;\n}\n\nfunction $lambda$0_21(this$static){\n  this$static.dataCache.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_3, 1, 0, 5, 1);\n  $updateRows(this$static, this$static.viewIndex, true);\n  this$static.forceScroll = true;\n}\n\nfunction $lambda$1_9(this$static){\n  this$static.dataCache.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_3, 1, 0, 5, 1);\n  $updateRows(this$static, this$static.viewIndex, true);\n  this$static.forceScroll = true;\n}\n\nfunction $lambda$2_11(this$static, event_0){\n  event_0.selected?$indexOf_0(this$static.selectedModels, event_0.model, 0) != -1 || $add_20(this$static.selectedModels, event_0.model):$remove_10(this$static.selectedModels, event_0.model);\n}\n\nfunction $lambda$3_3(this$static, event_0){\n  var model, model$iterator;\n  for (model$iterator = new ArrayList$1(event_0.models); model$iterator.i < model$iterator.this$01.array.length;) {\n    model = $next_6(model$iterator);\n    event_0.selected?$indexOf_0(this$static.selectedModels, model, 0) != -1 || $add_20(this$static.selectedModels, model):$remove_10(this$static.selectedModels, model);\n  }\n}\n\nfunction $lambda$5_6(this$static, loadMask_1){\n  loadMask_1 && this$static.maskElement != null && this$static.maskElement.height(this$static.bufferBottom.outerHeight(true) + this$static.bufferTop.outerHeight(true) + this$static.tableBody.outerHeight(true) + $intern_2 + 'px');\n}\n\nfunction $loaded(this$static, startIndex, data_0, totalRows, cacheData){\n  var model, model$iterator, row;\n  this$static.lastScrollTop = this$static.tableBody.scrollTop();\n  this$static.totalRows = totalRows;\n  $setVisibleRange(this$static, new Range_0(startIndex, this$static.loaderSize));\n  cacheData && $addCache(this$static.dataCache, startIndex, data_0);\n  $setRowData(this$static, startIndex, data_0);\n  $setLoadMask_0(this$static, false);\n  this$static.loading = false;\n  if (this$static.forceScroll) {\n    this$static.forceScroll = false;\n    $updateRows(this$static, round_int($wnd.Math.ceil(this$static.tableBody.scrollTop() / (this$static.rows_0.array.length == 0 || $calculateRowHeight(this$static.renderer, castTo($get_3(this$static.rows_0, 0), 72)) , this$static.renderer.calculatedRowHeight) | 0)), false);\n  }\n  for (model$iterator = new ArrayList$1(this$static.selectedModels); model$iterator.i < model$iterator.this$01.array.length;) {\n    model = $next_6(model$iterator);\n    row = $getRowElementByModel(this$static, model);\n    !!row && $selectRow(this$static, row, false);\n  }\n}\n\nfunction $loaded_0(this$static, startIndex, data_0){\n  $loaded(this$static, startIndex, data_0, this$static.totalRows, false);\n}\n\nfunction $onVerticalScroll(this$static){\n  var index_0;\n  if (!this$static.rendering) {\n    index_0 = round_int($wnd.Math.ceil(this$static.tableBody.scrollTop() / (this$static.rows_0.array.length == 0 || $calculateRowHeight(this$static.renderer, castTo($get_3(this$static.rows_0, 0), 72)) , this$static.renderer.calculatedRowHeight) | 0));\n    (index_0 == 0 || index_0 != this$static.viewIndex) && (this$static.viewIndex = min_1(index_0, max_1(0, this$static.totalRows - this$static.viewSize)) , $requestData(this$static, this$static.viewIndex, true));\n  }\n  return $clinit_Boolean() , $clinit_Boolean() , true;\n}\n\nfunction $refresh(this$static){\n  var rangeStart;\n  this$static.rows_0.array.length == 0 || $calculateRowHeight(this$static.renderer, castTo($get_3(this$static.rows_0, 0), 72));\n  this$static.redraw && this$static.setup && $renderRows_0(this$static, this$static.rows_0);\n  rangeStart = this$static.range.start_0;\n  $setVisibleRange(this$static, new Range_0(rangeStart, this$static.dynamicView?$getVisibleRowCapacity(this$static):this$static.viewSize));\n  $setViewSize(this$static, this$static.range.length_0);\n  $updateRows(this$static, this$static.viewIndex, true);\n  this$static.forceScroll = true;\n}\n\nfunction $renderRows_0(this$static, rows_0){\n  var category, category$iterator, category$iterator0, hidden, hiddenCategory, hiddenCategory$iterator, lastHidden, newCatCount, prevCategories, range, reach;\n  prevCategories = this$static.categories.array.length;\n  if ($renderRows(this$static, rows_0)) {\n    if (this$static.useCategories) {\n      newCatCount = this$static.categories.array.length - prevCategories;\n      if (newCatCount != 0) {\n        $setVisibleRange(this$static, new Range_0(this$static.viewIndex, this$static.viewSize - newCatCount));\n        $setViewSize(this$static, this$static.range.length_0);\n      }\n      lastHidden = new ArrayList;\n      for (category$iterator0 = new ArrayList$1(this$static.categories); category$iterator0.i < category$iterator0.this$01.array.length;) {\n        category = castTo($next_6(category$iterator0), 120);\n        !!category.widget && !!category.widget.parent_1 && $setVisible_0(castTo(category.widget, 164), true);\n        hidden = false;\n        if ($isCategoryEmpty(this$static, category)) {\n          range = this$static.range;\n          reach = range.start_0 + range.length_0;\n          if (reach < this$static.totalRows) {\n            !!category.widget && !!category.widget.parent_1 && $setVisible_0(castTo(category.widget, 164), false);\n            lastHidden.array[lastHidden.array.length] = category;\n            hidden = true;\n          }\n        }\n        if (!hidden) {\n          for (hiddenCategory$iterator = new ArrayList$1(lastHidden); hiddenCategory$iterator.i < hiddenCategory$iterator.this$01.array.length;) {\n            hiddenCategory = castTo($next_6(hiddenCategory$iterator), 120);\n            !!hiddenCategory.widget && !!hiddenCategory.widget.parent_1 && $setVisible_0(castTo(hiddenCategory.widget, 164), true);\n          }\n        }\n      }\n      for (category$iterator = new ArrayList$1($getPassedCategories(this$static)); category$iterator.i < category$iterator.this$01.array.length;) {\n        category = castTo($next_6(category$iterator), 120);\n        !!category.widget && !!category.widget.parent_1 && $setVisible_0(castTo(category.widget, 164), false);\n      }\n      this$static.subheaderLib.recalculate(true);\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction $requestData(this$static, index_0, checkCache){\n  if (this$static.loading) {\n    return;\n  }\n  this$static.loaderIndex = max_1(0, index_0 - this$static.loaderBuffer);\n  this$static.loaderSize = this$static.viewSize + this$static.loaderBuffer;\n  !this$static.loaderTask && (this$static.loaderTask = new InfiniteDataView$1(this$static, checkCache));\n  $delay(this$static.loaderTask, this$static.loaderDelay);\n}\n\nfunction $setLoadMask_0(this$static, loadMask){\n  if (loadMask || !this$static.forceScroll) {\n    $setLoadMask(this$static, loadMask);\n    $scheduleDeferred(($clinit_SchedulerImpl() , INSTANCE), new InfiniteDataView$lambda$5$Type(this$static, loadMask));\n  }\n}\n\nfunction $setViewSize(this$static, viewSize){\n  this$static.viewSize = viewSize;\n}\n\nfunction $updateRows(this$static, newIndex, reload){\n  this$static.viewIndex = min_1(newIndex, max_1(0, this$static.totalRows - this$static.viewSize));\n  $requestData(this$static, this$static.viewIndex, !reload);\n}\n\nfunction InfiniteDataView(){\n  $clinit_InfiniteDataView();\n  AbstractDataView.call(this, 'DataView');\n  this.viewSize = -1;\n  this.dynamicView = true;\n  this.lastScrollTop = 0;\n  this.loaderBuffer = 10;\n  this.loaderDelay = 200;\n  this.selectedModels = new ArrayList;\n  this.dataCache = new InfiniteDataCache;\n  this.viewSize = -1;\n  this.totalRows = 20;\n}\n\ndefineClass(1963, 349, $intern_20, InfiniteDataView);\n_.addCategory = function addCategory_0(category){\n  $addCategory(this, category);\n  $setVisibleRange(this, new Range_0(this.viewIndex, this.viewSize + 1));\n  $setViewSize(this, this.range.length_0);\n}\n;\n_.doSort = function doSort_0(sortContext, rows_0){\n  if ($doSort(this, sortContext, rows_0)) {\n    this.dataCache.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_3, 1, 0, 5, 1);\n    return true;\n  }\n   else {\n    return false;\n  }\n}\n;\n_.getSelectedRowModels = function getSelectedRowModels_0(visibleOnly){\n  return visibleOnly?$getSelectedRowModels(this, true):this.selectedModels;\n}\n;\n_.loaded = function loaded_1(startIndex, data_0){\n  $loaded(this, startIndex, data_0, this.totalRows, true);\n}\n;\n_.onConstructed = function onConstructed_0(){\n  $setRenderer(this, new InfiniteRenderer);\n}\n;\n_.onSetup = function onSetup_0(scaffolding){\n  var topWrapper;\n  this.dynamicView = this.viewSize == -1;\n  if (this.dynamicView) {\n    $setVisibleRange(this, new Range_0(0, $getVisibleRowCapacity(this)));\n    $setViewSize(this, this.range.length_0);\n  }\n  topWrapper = $wnd.$('<div>');\n  this.bufferTop = $wnd.$(\"<div class='bufferTop'>\");\n  topWrapper.append(this.bufferTop);\n  $insert_3(this.tbody, new MaterialWidget_0(topWrapper.get(0)), 0);\n  this.bufferBottom = $wnd.$(\"<div class='bufferBottom'>\");\n  this.tableBody.append(this.bufferBottom);\n  $clearHandlers(this.handlers);\n  $registerHandler_2(this.handlers, $addHandler(this.display_0, new InfiniteDataView$lambda$0$Type(this), ($clinit_CategoryOpenedEvent() , TYPE_57)));\n  $registerHandler_2(this.handlers, $addHandler(this.display_0, new InfiniteDataView$lambda$1$Type(this), ($clinit_CategoryClosedEvent() , TYPE_56)));\n  $registerHandler_2(this.handlers, $addHandler(this.display_0, new InfiniteDataView$lambda$2$Type(this), ($clinit_RowSelectEvent() , TYPE_72)));\n  $registerHandler_2(this.handlers, $addHandler(this.display_0, new InfiniteDataView$lambda$3$Type(this), ($clinit_SelectAllEvent() , TYPE_74)));\n  $wnd.$(this.tableBody).scrollY(this.id_0, makeLambdaFunction(InfiniteDataView$lambda$4$Type.prototype.call_10, InfiniteDataView$lambda$4$Type, [this]));\n  $onSetup(this);\n}\n;\n_.refresh = function refresh_0(){\n  $refresh(this);\n}\n;\n_.render_2 = function render_5(components){\n  var bottomHeight, calcRowHeight, catHeight, categories, topHeight;\n  calcRowHeight = (this.rows_0.array.length == 0 || $calculateRowHeight(this.renderer, castTo($get_3(this.rows_0, 0), 72)) , this.renderer.calculatedRowHeight);\n  topHeight = this.loaderIndex * calcRowHeight;\n  catHeight = $getCategoryHeight(this);\n  this.bufferTop.height(topHeight + (this.useCategories?$getPassedCategories(this).array.length * catHeight:0));\n  categories = this.useCategories?unmodifiableList(this.categories).coll.size_1():0;\n  bottomHeight = (this.totalRows - this.viewSize - this.loaderBuffer) * calcRowHeight - categories * catHeight - topHeight;\n  this.bufferBottom.height(bottomHeight);\n  $render_0(this, components);\n  this.tableBody.scrollTop(this.lastScrollTop);\n}\n;\n_.renderRows = function renderRows_1(rows_0){\n  return $renderRows_0(this, rows_0);\n}\n;\n_.setDisplay = function setDisplay_0(display){\n  this.display_0 = display;\n  !!this.handlers && $clearHandlers(this.handlers);\n  this.handlers = new DefaultHandlerRegistry_0(this.display_0, false);\n}\n;\n_.setLoadMask = function setLoadMask_0(loadMask){\n  $setLoadMask_0(this, loadMask);\n}\n;\n_.setRowHeight = function setRowHeight_0(rowHeight){\n  $setExpectedRowHeight(this.renderer, rowHeight);\n  this.setup && $refresh(this);\n}\n;\n_.dynamicView = false;\n_.forceScroll = false;\n_.lastScrollTop = 0;\n_.loaderBuffer = 0;\n_.loaderDelay = 0;\n_.loaderIndex = 0;\n_.loaderSize = 0;\n_.loading = false;\n_.viewIndex = 0;\n_.viewSize = 0;\nvar Lgwt_material_design_client_data_infinite_InfiniteDataView_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataView', 1963);\nfunction $onExecute(this$static){\n  var cachedData;\n  if (this$static.val$checkCache2) {\n    cachedData = $getCache(this$static.this$01.dataCache, this$static.this$01.loaderIndex, this$static.this$01.loaderSize);\n    cachedData.array.length == 0 || (this$static.this$01.loaderCache = cachedData);\n  }\n  $doLoad(this$static.this$01);\n}\n\nfunction InfiniteDataView$1(this$0, val$checkCache){\n  this.this$01 = this$0;\n  this.val$checkCache2 = val$checkCache;\n  this.timer = new InterruptibleTask$1(this);\n}\n\ndefineClass(1969, 1968, {}, InfiniteDataView$1);\n_.val$checkCache2 = false;\nvar Lgwt_material_design_client_data_infinite_InfiniteDataView$1_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataView/1', 1969);\nfunction $onSuccess_0(this$static, result){\n  $loaded(this$static.this$01, result.offset_0, result.data_0, result.totalLength, result.cacheData);\n}\n\nfunction InfiniteDataView$2(this$0){\n  this.this$01 = this$0;\n}\n\ndefineClass(1970, 1, {}, InfiniteDataView$2);\nvar Lgwt_material_design_client_data_infinite_InfiniteDataView$2_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataView/2', 1970);\nfunction InfiniteDataView$lambda$0$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(1964, 1, $intern_132, InfiniteDataView$lambda$0$Type);\n_.onCategoryOpened = function onCategoryOpened(arg0){\n  $lambda$0_21(this.$$outer_0);\n}\n;\nvar Lgwt_material_design_client_data_infinite_InfiniteDataView$lambda$0$Type_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataView/lambda$0$Type', 1964);\nfunction InfiniteDataView$lambda$1$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(1965, 1, $intern_133, InfiniteDataView$lambda$1$Type);\n_.onCategoryClosed = function onCategoryClosed(arg0){\n  $lambda$1_9(this.$$outer_0);\n}\n;\nvar Lgwt_material_design_client_data_infinite_InfiniteDataView$lambda$1$Type_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataView/lambda$1$Type', 1965);\nfunction InfiniteDataView$lambda$2$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(1966, 1, $intern_130, InfiniteDataView$lambda$2$Type);\n_.onRowSelect = function onRowSelect(arg0){\n  $lambda$2_11(this.$$outer_0, arg0);\n}\n;\nvar Lgwt_material_design_client_data_infinite_InfiniteDataView$lambda$2$Type_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataView/lambda$2$Type', 1966);\nfunction InfiniteDataView$lambda$3$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(1967, 1, $intern_137, InfiniteDataView$lambda$3$Type);\n_.onSelectAll = function onSelectAll(arg0){\n  $lambda$3_3(this.$$outer_0, arg0);\n}\n;\nvar Lgwt_material_design_client_data_infinite_InfiniteDataView$lambda$3$Type_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataView/lambda$3$Type', 1967);\nfunction InfiniteDataView$lambda$4$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(2674, $wnd.Function, {}, InfiniteDataView$lambda$4$Type);\n_.call_10 = function call_85(arg0, arg1){\n  return $onVerticalScroll(this.$$outer_0);\n}\n;\nfunction InfiniteDataView$lambda$5$Type($$outer_0, loadMask_1){\n  this.$$outer_0 = $$outer_0;\n  this.loadMask_1 = loadMask_1;\n}\n\ndefineClass(1971, 1, {}, InfiniteDataView$lambda$5$Type);\n_.execute_1 = function execute_27(){\n  $lambda$5_6(this.$$outer_0, this.loadMask_1);\n}\n;\n_.loadMask_1 = false;\nvar Lgwt_material_design_client_data_infinite_InfiniteDataView$lambda$5$Type_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteDataView/lambda$5$Type', 1971);\nfunction InfiniteRenderer(){\n  BaseRenderer.call(this);\n}\n\ndefineClass(2197, 395, {}, InfiniteRenderer);\nvar Lgwt_material_design_client_data_infinite_InfiniteRenderer_2_classLit = createForClass('gwt.material.design.client.data.infinite', 'InfiniteRenderer', 2197);\nfunction LoadResult(data_0, offset, totalLength){\n  LoadResult_0.call(this, data_0, offset, totalLength);\n}\n\ndefineClass(421, 1, {}, LoadResult);\nfunction $addCategory_0(this$static, category){\n  this$static.view.addCategory(category);\n}\n\nfunction MaterialDataTable_0(dataView){\n  AbstractDataTable.call(this, dataView);\n  $addHandler(this, this, ($clinit_InsertColumnEvent() , TYPE_61));\n  $addHandler(this, this, ($clinit_RemoveColumnEvent() , TYPE_63));\n}\n\nfunction MaterialInfiniteDataTable(){\n  $clinit_AbstractDataTable();\n  MaterialDataTable_0.call(this, new InfiniteDataView);\n}\n\ndefineClass(1927, 307, $intern_138, MaterialInfiniteDataTable);\nvar Lgwt_material_design_client_ui_table_MaterialInfiniteDataTable_2_classLit = createForClass('gwt.material.design.client.ui.table', 'MaterialInfiniteDataTable', 1927);\nfunction InfiniteDataTablePresenter(eventBus, view, proxy){\n  $clinit_PresenterWidget();\n  Presenter.call(this, eventBus, view, proxy, ($clinit_ApplicationPresenter() , SLOT_MAIN));\n}\n\ndefineClass(878, 60, $intern_53, InfiniteDataTablePresenter);\n_.onReveal = function onReveal_61(){\n  $clinit_SetPageTitleEvent();\n  $fireEvent_1(this, new SetPageTitleEvent('Infinite Data Table', 'This example shows the DataTables table body scrolling in the vertical direction with infinite scrolling. The idea of infinite scrolling means that data will be added to the table dynamically, as and when needed by the user scrolling the table. ', 'datatable/infinite/InfiniteDataTableView', 'https://material.io/guidelines/components/data-tables.html'));\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTablePresenter_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTablePresenter', 878);\nfunction $lambda$0_44(this$static, event_0){\n  $updateSelectedRows(this$static, this$static.table.view.getSelectedRowModels(false).array.length);\n  castTo(event_0.model, 57).id_0 + ': ' + event_0.selected;\n  $clinit_GWT();\n}\n\nfunction $lambda$1_21(this$static){\n  $clinit_GWT();\n  this$static.table.view.refresh();\n}\n\nfunction $lambda$2_26(this$static){\n  $updateSelectedRows(this$static, this$static.table.view.getSelectedRowModels(false).array.length);\n  $clinit_GWT();\n}\n\nfunction $onCategories(this$static, e){\n  if (checkNotNull(castToBoolean(e.value_0))) {\n    $clinit_GWT();\n    $setUseCategories_0(this$static.table, true);\n    $clearRowsAndCategories(this$static.table.view);\n    this$static.table.view.setLoadMask(true);\n    $schedule(new FakePersonService$2(new InfiniteDataTableView$5(this$static)), min_1(200, nextInt(500)));\n  }\n   else {\n    $clinit_GWT();\n    $setUseCategories_0(this$static.table, false);\n    $setRedraw(this$static.table.view);\n    this$static.table.view.refresh();\n  }\n}\n\nfunction $updateSelectedRows(this$static, size_0){\n  var word;\n  word = ' item ';\n  size_0 > 1 && (word = ' items ');\n  if (size_0 <= 0) {\n    $setText_6(this$static.table.tableTitle, 'Table Title');\n    $removeStyleName(this$static.table.scaffolding.topPanel, 'active-header');\n  }\n   else {\n    $addStyleName(this$static.table.scaffolding.topPanel, 'active-header');\n    $setText_6(this$static.table.tableTitle, size_0 + word + 'selected ');\n  }\n}\n\nfunction InfiniteDataTableView(){\n  NavigatedView.call(this);\n  $clinit_FakePersonService();\n  this.table = new MaterialInfiniteDataTable;\n  $initWidget_0(this, $build_f_MaterialRow1_8(new InfiniteDataTableView_BinderImpl$Widgets(this)));\n  $addColumn_3(this.table, new InfiniteDataTableView$1);\n  $addColumn_4(this.table, new InfiniteDataTableView$2, 'First Name');\n  $addColumn_4(this.table, new InfiniteDataTableView$3, 'Last Name');\n  $addColumn_4(this.table, new InfiniteDataTableView$4, 'Phone');\n  $addHandler(this.table, new InfiniteDataTableView$lambda$0$Type(this), ($clinit_RowSelectEvent() , TYPE_72));\n  $addHandler(this.table, new InfiniteDataTableView$lambda$1$Type(this), ($clinit_ColumnSortEvent() , TYPE_58));\n  $addHandler(this.table, new InfiniteDataTableView$lambda$2$Type(this), ($clinit_SelectAllEvent() , TYPE_74));\n}\n\ndefineClass(1271, 305, $intern_54, InfiniteDataTableView);\n_.onAttach = function onAttach_8(){\n  $setText_6(this.table.tableTitle, 'Infinite Table');\n  $clearRowsAndCategories(this.table.view);\n  this.table.view.setLoadMask(true);\n  $schedule(new FakePersonService$2(new InfiniteDataTableView$5(this)), min_1(200, nextInt(500)));\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView', 1271);\nfunction $getValue_11(object){\n  var profile;\n  profile = new MaterialImage;\n  $setValue_18(profile, object.picture, true);\n  ($clinit_DOM() , profile.element_0).style['width'] = '40px';\n  profile.element_0.style['height'] = '40px';\n  profile.element_0.style['padding'] = ($clinit_Style$Unit() , '4.0px');\n  profile.element_0.style['marginTop'] = '8.0px';\n  $setBackgroundColor(profile, ($clinit_Color() , GREY_LIGHTEN_2));\n  $setOn((!profile.circleMixin && (profile.circleMixin = new ToggleStyleMixin(profile, 'circle')) , profile.circleMixin), true);\n  return profile;\n}\n\nfunction InfiniteDataTableView$1(){\n  WidgetColumn.call(this);\n}\n\ndefineClass(1272, 134, $intern_128, InfiniteDataTableView$1);\n_.getValue_0 = function getValue_38(object){\n  return $getValue_11(castTo(object, 57));\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView$1_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView/1', 1272);\nfunction InfiniteDataTableView$2(){\n  TextColumn.call(this);\n}\n\ndefineClass(1273, 143, $intern_127, InfiniteDataTableView$2);\n_.getValue_0 = function getValue_39(object){\n  return castTo(object, 57).firstName;\n}\n;\n_.isSortable = function isSortable_0(){\n  return true;\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView$2_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView/2', 1273);\nfunction InfiniteDataTableView$3(){\n  TextColumn.call(this);\n}\n\ndefineClass(1274, 143, $intern_127, InfiniteDataTableView$3);\n_.getValue_0 = function getValue_40(object){\n  return castTo(object, 57).lastName;\n}\n;\n_.isSortable = function isSortable_1(){\n  return true;\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView$3_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView/3', 1274);\nfunction InfiniteDataTableView$4(){\n  TextColumn.call(this);\n}\n\ndefineClass(1275, 143, $intern_127, InfiniteDataTableView$4);\n_.getValue_0 = function getValue_41(object){\n  return castTo(object, 57).phone;\n}\n;\n_.isSortable = function isSortable_2(){\n  return true;\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView$4_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView/4', 1275);\nfunction $onSuccess_4(this$static, categories){\n  var category, category$iterator;\n  for (category$iterator = new ArrayList$1(categories); category$iterator.i < category$iterator.this$01.array.length;) {\n    category = castToString($next_6(category$iterator));\n    $addCategory_0(this$static.this$01.table, new CategoryComponent(category));\n  }\n  this$static.this$01.table.view.setLoadMask(false);\n}\n\nfunction InfiniteDataTableView$5(this$0){\n  this.this$01 = this$0;\n}\n\ndefineClass(547, 1, {}, InfiniteDataTableView$5);\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView$5_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView/5', 547);\nfunction InfiniteDataTableView$lambda$0$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(1276, 1, $intern_130, InfiniteDataTableView$lambda$0$Type);\n_.onRowSelect = function onRowSelect_2(arg0){\n  $lambda$0_44(this.$$outer_0, arg0);\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView$lambda$0$Type_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView/lambda$0$Type', 1276);\nfunction InfiniteDataTableView$lambda$1$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(1277, 1, $intern_131, InfiniteDataTableView$lambda$1$Type);\n_.onColumnSort = function onColumnSort_1(arg0){\n  $lambda$1_21(this.$$outer_0);\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView$lambda$1$Type_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView/lambda$1$Type', 1277);\nfunction InfiniteDataTableView$lambda$2$Type($$outer_0){\n  this.$$outer_0 = $$outer_0;\n}\n\ndefineClass(1278, 1, $intern_137, InfiniteDataTableView$lambda$2$Type);\n_.onSelectAll = function onSelectAll_0(arg0){\n  $lambda$2_26(this.$$outer_0);\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView$lambda$2$Type_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView/lambda$2$Type', 1278);\nfunction $build_f_MaterialRow1_8(this$static){\n  var f_MaterialRow1, f_MaterialColumn2, f_MaterialRow3, f_MaterialRow5, f_MaterialTitle4, cbCategories, table, f_MaterialTitle6, f_PrettyPre7, sb, f_MaterialRow8, f_MaterialLink9, f_MaterialRow10, f_MaterialLink11;\n  f_MaterialRow1 = new MaterialRow;\n  $add_9(f_MaterialRow1, (f_MaterialColumn2 = new MaterialColumn , $add_9(f_MaterialColumn2, (f_MaterialRow3 = new MaterialRow , $add_9(f_MaterialRow3, (f_MaterialTitle4 = new MaterialTitle , $setScrollspy((!f_MaterialTitle4.scrollspyMixin && (f_MaterialTitle4.scrollspyMixin = new ScrollspyMixin(f_MaterialTitle4)) , f_MaterialTitle4.scrollspyMixin), 'infinite_table') , $setText_12(f_MaterialTitle4.paragraph, '') , $setInnerHTML($getElement(f_MaterialTitle4.header), ($clinit_SafeHtmlUtils() , (new SafeHtmlString(htmlEscape('Infinite Data Table'))).html_0)) , fire_5(f_MaterialTitle4, 'Infinite Data Table') , f_MaterialTitle4)) , $add_9(f_MaterialRow3, (cbCategories = new MaterialCheckBox , $setTextOrHtml(cbCategories.directionalTextHelper, 'With Categories') , $setType_4(cbCategories, ($clinit_CheckBoxType() , FILLED)) , $setValue_14(cbCategories, ($clinit_Boolean() , $clinit_Boolean() , true), false) , $addValueChangeHandler_3(cbCategories, this$static.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames1) , cbCategories)) , $add_9(f_MaterialRow3, (table = this$static.owner.table , $setUseCategories(table.view, true) , $setSelectionType_1(table, ($clinit_SelectionType() , MULTIPLE)) , $setShadow_0((!table.shadowMixin && (table.shadowMixin = new ShadowMixin(table)) , table.shadowMixin), 1) , $setUseStickyHeader(table.view, true) , table.view.useLoadOverlay = false , $setHeight_0(table.view, 'calc(100vh - 131px)') , table)) , setStyleName(($clinit_DOM() , f_MaterialRow3.element_0), 'code', true) , f_MaterialRow3)) , $add_9(f_MaterialColumn2, (f_MaterialRow5 = new MaterialRow , $add_9(f_MaterialRow5, (f_MaterialTitle6 = new MaterialTitle , $setScrollspy((!f_MaterialTitle6.scrollspyMixin && (f_MaterialTitle6.scrollspyMixin = new ScrollspyMixin(f_MaterialTitle6)) , f_MaterialTitle6.scrollspyMixin), 'data_source') , $setText_12(f_MaterialTitle6.paragraph, 'To start with building an infinite data table. You will need to provide a data source for infinite loading of data sets thru RPC Service.') , $setInnerHTML($getElement(f_MaterialTitle6.header), (new SafeHtmlString(htmlEscape('Data Source'))).html_0) , fire_5(f_MaterialTitle6, 'Data Source') , f_MaterialTitle6)) , $add_9(f_MaterialRow5, (f_PrettyPre7 = new PrettyPre , $setHTML_0(f_PrettyPre7, (sb = new StringBuilder , sb.string += '\\u2003table = new MaterialInfiniteDataTable&lt;&gt;(20, <br> InfiniteDataView.DYNAMIC_VIEW, new PersonDataSource(personService));' , new OnlyToBeUsedInGeneratedCodeStringBlessedAsSafeHtml(sb.string)).html_0) , setStyleName(f_PrettyPre7.element_0, 'lang-java', true) , f_PrettyPre7)) , $add_9(f_MaterialRow5, (f_MaterialRow8 = new MaterialRow , $add_9(f_MaterialRow8, (f_MaterialLink9 = new MaterialLink , $setIconType_0(f_MaterialLink9, ($clinit_IconType() , LINK_2)) , $setDisplay(f_MaterialLink9, ($clinit_Display() , BLOCK_0)) , $setText_6(f_MaterialLink9.span_1, 'Link to Person Data Source Code') , f_MaterialLink9.span_1.attached || $add_9(f_MaterialLink9, f_MaterialLink9.span_1) , f_MaterialLink9.element_0.setAttribute('href', 'https://github.com/GwtMaterialDesign/gwt-material-demo/tree/release_2.0/src/main/java/gwt/material/design/demo/client/application/addins/datatable/table/datasource') , f_MaterialLink9.element_0.setAttribute('target', '_blank') , f_MaterialLink9)) , f_MaterialRow8.element_0.style['marginBottom'] = ($clinit_Style$Unit() , '0.0px') , f_MaterialRow8)) , $add_9(f_MaterialRow5, (f_MaterialRow10 = new MaterialRow , $add_9(f_MaterialRow10, (f_MaterialLink11 = new MaterialLink , $setIconType_0(f_MaterialLink11, LINK_2) , $setDisplay(f_MaterialLink11, BLOCK_0) , $setText_6(f_MaterialLink11.span_1, 'Link to PersonService') , f_MaterialLink11.span_1.attached || $add_9(f_MaterialLink11, f_MaterialLink11.span_1) , f_MaterialLink11.element_0.setAttribute('href', 'https://github.com/GwtMaterialDesign/gwt-material-demo/tree/release_2.0/src/main/java/gwt/material/design/demo/client/application/addins/datatable/table/service') , f_MaterialLink11.element_0.setAttribute('target', '_blank') , f_MaterialLink11)) , f_MaterialRow10.element_0.style['marginBottom'] = '0.0px' , f_MaterialRow10)) , setStyleName(f_MaterialRow5.element_0, 'code', true) , f_MaterialRow5)) , $setGrid((!f_MaterialColumn2.gridMixin && (f_MaterialColumn2.gridMixin = new GridMixin(f_MaterialColumn2)) , f_MaterialColumn2.gridMixin), 's12') , f_MaterialColumn2));\n  return f_MaterialRow1;\n}\n\nfunction InfiniteDataTableView_BinderImpl$Widgets(owner){\n  this.handlerMethodWithNameVeryUnlikelyToCollideWithUserFieldNames1 = new InfiniteDataTableView_BinderImpl$Widgets$1(this);\n  this.owner = owner;\n}\n\ndefineClass(1765, 1, {}, InfiniteDataTableView_BinderImpl$Widgets);\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView_1BinderImpl$Widgets_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView_BinderImpl/Widgets', 1765);\nfunction InfiniteDataTableView_BinderImpl$Widgets$1(this$1){\n  this.this$11 = this$1;\n}\n\ndefineClass(1766, 1, $intern_44, InfiniteDataTableView_BinderImpl$Widgets$1);\n_.onValueChange = function onValueChange_50(event_0){\n  $onCategories(this.this$11.owner, event_0);\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_infinite_InfiniteDataTableView_1BinderImpl$Widgets$1_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.infinite', 'InfiniteDataTableView_BinderImpl/Widgets/1', 1766);\nfunction $get_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTablePresenter$_annotation$$none$$(this$static){\n  var result, result0;\n  if (!this$static.singleton_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTablePresenter$_annotation$$none$$) {\n    result0 = new InfiniteDataTablePresenter($get_Key$type$com$google$web$bindery$event$shared$EventBus$_annotation$$none$$($getFragment_com_google_web_bindery_event_shared(this$static.injector)), (result = $get_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTableView$_annotation$$none$$(this$static) , result), $get_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTablePresenter$MyProxy$_annotation$$none$$(this$static));\n    $automaticBind(($getFragment_com_gwtplatform_mvp_client(this$static.injector) , result0), $get_Key$type$com$gwtplatform$mvp$client$AutobindDisable$_annotation$$none$$($getFragment_com_gwtplatform_mvp_client(this$static.injector)));\n    this$static.singleton_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTablePresenter$_annotation$$none$$ = result0;\n  }\n  return this$static.singleton_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTablePresenter$_annotation$$none$$;\n}\n\nfunction $get_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTableView$_annotation$$none$$(this$static){\n  var result;\n  if (!this$static.singleton_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTableView$_annotation$$none$$) {\n    result = new InfiniteDataTableView;\n    this$static.singleton_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTableView$_annotation$$none$$ = result;\n  }\n  return this$static.singleton_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTableView$_annotation$$none$$;\n}\n\ndefineClass(785, 1, $intern_102);\n_.onSuccess_0 = function onSuccess_41(){\n  $onSuccess(this.val$callback2, $get_Key$type$gwt$material$design$demo$client$application$datatable$infinite$InfiniteDataTablePresenter$_annotation$$none$$(this.this$11.this$01));\n}\n;\nfunction $setAbsoluteTotal(this$static, absoluteTotal){\n  this$static.absoluteTotal = absoluteTotal;\n}\n\nfunction People(){\n  $$init_4(this);\n}\n\ndefineClass(2341, 48, $intern_85, People);\n_.absoluteTotal = 0;\nvar Lgwt_material_design_demo_client_application_datatable_table_People_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.table', 'People', 2341);\nfunction $load_10(loadConfig, callback){\n  var categories, categoryNames, lastArg, lastArg0;\n  categories = loadConfig.openCategories;\n  categoryNames = null;\n  !!categories && (categoryNames = castTo($reduce((lastArg0 = $map(new StreamImpl(null, new Spliterators$IteratorSpliterator(categories)), new PersonDataSource$0methodref$getName$Type) , of(new Collectors$21methodref$ctor$Type, new Collectors$20methodref$add$Type, new Collectors$lambda$21$Type, stampJavaTypeInfo(getClassLiteralForArray(Ljava_util_stream_Collector$Characteristics_2_classLit, 1), $intern_10, 295, 0, [($clinit_Collector$Characteristics() , IDENTITY_FINISH)])) , lastArg0), (lastArg = new ArrayList , lastArg)), 100));\n  $getPeople(loadConfig.offset_0, loadConfig.limit, categoryNames, new PersonDataSource$1(callback, loadConfig));\n}\n\nfunction PersonDataSource$0methodref$getName$Type(){\n}\n\ndefineClass(1928, 1, {}, PersonDataSource$0methodref$getName$Type);\nvar Lgwt_material_design_demo_client_application_datatable_table_datasource_PersonDataSource$0methodref$getName$Type_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.table.datasource', 'PersonDataSource/0methodref$getName$Type', 1928);\nfunction $onSuccess_5(this$static, people){\n  $onSuccess_0(this$static.val$callback2, new LoadResult(people, this$static.val$loadConfig3.offset_0, people.absoluteTotal));\n}\n\nfunction PersonDataSource$1(val$callback, val$loadConfig){\n  this.val$callback2 = val$callback;\n  this.val$loadConfig3 = val$loadConfig;\n}\n\ndefineClass(1929, 1, {}, PersonDataSource$1);\nvar Lgwt_material_design_demo_client_application_datatable_table_datasource_PersonDataSource$1_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.table.datasource', 'PersonDataSource/1', 1929);\nfunction $clinit_FakePersonService(){\n  $clinit_FakePersonService = emptyMethod;\n  var category, category$iterator, data_0, i, index_0;\n  categories_0 = new ArrayList;\n  peopleMap = new HashMap;\n  $add_20(categories_0, 'People');\n  $add_20(categories_0, 'Animal');\n  $add_20(categories_0, 'Plant');\n  $add_20(categories_0, 'Other');\n  $add_20(categories_0, 'Next');\n  index_0 = 0;\n  for (category$iterator = new ArrayList$1(categories_0); category$iterator.i < category$iterator.this$01.array.length;) {\n    category = castToString($next_6(category$iterator));\n    for (i = 0; i < 100; ++i , index_0++) {\n      data_0 = castTo($getStringValue(peopleMap, category), 100);\n      if (!data_0) {\n        data_0 = new ArrayList;\n        $putStringValue(peopleMap, category, data_0);\n      }\n      data_0.add_1(new Person(i, 'Field ' + index_0, 'Field ' + i, 'Field ' + index_0, 'No ' + i, category));\n    }\n  }\n}\n\nfunction $getPeople(startIndex, viewSize, categories, async_0){\n  var category, category$iterator, flatData, i, people, person, person$iterator;\n  flatData = new ArrayList;\n  if (!categories) {\n    for (category$iterator = new ArrayList$1(categories_0); category$iterator.i < category$iterator.this$01.array.length;) {\n      category = castToString($next_6(category$iterator));\n      $addAll_2(flatData, castTo($getStringValue(peopleMap, category), 106));\n    }\n  }\n   else {\n    for (category$iterator = categories.iterator(); category$iterator.hasNext_0();) {\n      category = castToString(category$iterator.next_1());\n      for (person$iterator = castTo($getStringValue(peopleMap, category), 100).iterator(); person$iterator.hasNext_0();) {\n        person = castTo(person$iterator.next_1(), 57);\n        flatData.array[flatData.array.length] = person;\n      }\n    }\n  }\n  people = new People;\n  for (i = startIndex; i < startIndex + viewSize; i++) {\n    try {\n      $add_20(people, (checkCriticalElementIndex(i, flatData.array.length) , castTo(flatData.array[i], 57)));\n    }\n     catch ($e0) {\n      $e0 = toJava($e0);\n      if (!instanceOf($e0, 111))\n        throw toJs($e0);\n    }\n  }\n  $setAbsoluteTotal(people, flatData.array.length);\n  $schedule(new FakePersonService$1(async_0, people), min_1(200, nextInt(500)));\n}\n\nvar categories_0, peopleMap;\nfunction FakePersonService$1(val$async, val$people){\n  this.val$async2 = val$async;\n  this.val$people3 = val$people;\n  Timer.call(this);\n}\n\ndefineClass(1962, 136, {}, FakePersonService$1);\n_.run = function run_14(){\n  $onSuccess_5(this.val$async2, this.val$people3);\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_table_service_FakePersonService$1_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.table.service', 'FakePersonService/1', 1962);\nfunction FakePersonService$2(val$async){\n  this.val$async2 = val$async;\n  Timer.call(this);\n}\n\ndefineClass(572, 136, {}, FakePersonService$2);\n_.run = function run_15(){\n  $onSuccess_4(this.val$async2, ($clinit_FakePersonService() , categories_0));\n}\n;\nvar Lgwt_material_design_demo_client_application_datatable_table_service_FakePersonService$2_2_classLit = createForClass('gwt.material.design.demo.client.application.datatable.table.service', 'FakePersonService/2', 572);\nfunction $forEachRemaining_0(this$static, consumer){\n  while (this$static.tryAdvance(consumer))\n  ;\n}\n\ndefineClass(2383, 1, {});\n_.forEachRemaining = function forEachRemaining(consumer){\n  $forEachRemaining_0(this, consumer);\n}\n;\n_.characteristics_0 = function characteristics_0(){\n  return this.characteristics;\n}\n;\n_.estimateSize_0 = function estimateSize(){\n  return this.sizeEstimate;\n}\n;\n_.characteristics = 0;\n_.sizeEstimate = 0;\nvar Ljava_util_Spliterators$BaseSpliterator_2_classLit = createForClass('java.util', 'Spliterators/BaseSpliterator', 2383);\nfunction Spliterators$AbstractSpliterator(size_0, characteristics){\n  this.sizeEstimate = size_0;\n  this.characteristics = (characteristics & 64) != 0?characteristics | 16384:characteristics;\n}\n\ndefineClass(2384, 2383, {});\nvar Ljava_util_Spliterators$AbstractSpliterator_2_classLit = createForClass('java.util', 'Spliterators/AbstractSpliterator', 2384);\nfunction $initIterator(this$static){\n  if (!this$static.it) {\n    this$static.it = new ArrayList$1(this$static.collection);\n    this$static.estimateSize = this$static.collection.array.length;\n  }\n}\n\nfunction Spliterators$IteratorSpliterator(collection){\n  this.collection = (checkCriticalNotNull(collection) , collection);\n  this.characteristics = 16464;\n}\n\ndefineClass(677, 1, {}, Spliterators$IteratorSpliterator);\n_.characteristics_0 = function characteristics_1(){\n  return this.characteristics;\n}\n;\n_.estimateSize_0 = function estimateSize_0(){\n  $initIterator(this);\n  return this.estimateSize;\n}\n;\n_.forEachRemaining = function forEachRemaining_0(consumer){\n  $initIterator(this);\n  $forEachRemaining(this.it, consumer);\n}\n;\n_.tryAdvance = function tryAdvance(consumer){\n  checkCriticalNotNull(consumer);\n  $initIterator(this);\n  if ($hasNext_0(this.it)) {\n    consumer.accept_0($next_6(this.it));\n    return true;\n  }\n  return false;\n}\n;\n_.characteristics = 0;\n_.estimateSize = 0;\nvar Ljava_util_Spliterators$IteratorSpliterator_2_classLit = createForClass('java.util', 'Spliterators/IteratorSpliterator', 677);\nfunction of(supplier, accumulator, combiner, characteristics){\n  checkCriticalNotNull(supplier);\n  checkCriticalNotNull(accumulator);\n  checkCriticalNotNull(combiner);\n  checkCriticalNotNull(characteristics);\n  return new CollectorImpl;\n}\n\nfunction $clinit_Collector$Characteristics(){\n  $clinit_Collector$Characteristics = emptyMethod;\n  CONCURRENT = new Collector$Characteristics('CONCURRENT', 0);\n  IDENTITY_FINISH = new Collector$Characteristics('IDENTITY_FINISH', 1);\n  UNORDERED = new Collector$Characteristics('UNORDERED', 2);\n}\n\nfunction Collector$Characteristics(enum$name, enum$ordinal){\n  Enum.call(this, enum$name, enum$ordinal);\n}\n\nfunction values_67(){\n  $clinit_Collector$Characteristics();\n  return stampJavaTypeInfo(getClassLiteralForArray(Ljava_util_stream_Collector$Characteristics_2_classLit, 1), $intern_10, 295, 0, [CONCURRENT, IDENTITY_FINISH, UNORDERED]);\n}\n\ndefineClass(295, 28, {4:1, 38:1, 28:1, 295:1}, Collector$Characteristics);\nvar CONCURRENT, IDENTITY_FINISH, UNORDERED;\nvar Ljava_util_stream_Collector$Characteristics_2_classLit = createForEnum('java.util.stream', 'Collector/Characteristics', 295, values_67);\nfunction CollectorImpl(){\n  $clinit_Collections();\n}\n\ndefineClass(2404, 1, {}, CollectorImpl);\nvar Ljava_util_stream_CollectorImpl_2_classLit = createForClass('java.util.stream', 'CollectorImpl', 2404);\nfunction Collectors$20methodref$add$Type(){\n}\n\ndefineClass(2307, 1, {}, Collectors$20methodref$add$Type);\nvar Ljava_util_stream_Collectors$20methodref$add$Type_2_classLit = createForClass('java.util.stream', 'Collectors/20methodref$add$Type', 2307);\nfunction Collectors$21methodref$ctor$Type(){\n}\n\ndefineClass(2309, 1, {}, Collectors$21methodref$ctor$Type);\nvar Ljava_util_stream_Collectors$21methodref$ctor$Type_2_classLit = createForClass('java.util.stream', 'Collectors/21methodref$ctor$Type', 2309);\nfunction Collectors$lambda$21$Type(){\n}\n\ndefineClass(2308, 1, {}, Collectors$lambda$21$Type);\nvar Ljava_util_stream_Collectors$lambda$21$Type_2_classLit = createForClass('java.util.stream', 'Collectors/lambda$21$Type', 2308);\nfunction $terminate(this$static){\n  if (!this$static.root) {\n    $throwIfTerminated(this$static);\n    this$static.terminated = true;\n  }\n   else {\n    $terminate(this$static.root);\n  }\n}\n\nfunction $throwIfTerminated(this$static){\n  if (this$static.root) {\n    $throwIfTerminated(this$static.root);\n  }\n   else if (this$static.terminated) {\n    throw toJs(new IllegalStateException_0(\"Stream already terminated, can't be modified or used\"));\n  }\n}\n\nfunction TerminatableStream(previous){\n  if (!previous) {\n    this.root = null;\n    new ArrayList;\n  }\n   else {\n    this.root = previous;\n  }\n}\n\ndefineClass(2382, 1, {});\n_.terminated = false;\nvar Ljava_util_stream_TerminatableStream_2_classLit = createForClass('java.util.stream', 'TerminatableStream', 2382);\nfunction $map(this$static, mapper){\n  $throwIfTerminated(this$static);\n  return new StreamImpl(this$static, new StreamImpl$MapToObjSpliterator(mapper, this$static.spliterator));\n}\n\nfunction $reduce(this$static, identity){\n  var consumer;\n  $terminate(this$static);\n  consumer = new StreamImpl$ValueConsumer;\n  consumer.value_0 = identity;\n  this$static.spliterator.forEachRemaining(new StreamImpl$lambda$5$Type(consumer));\n  return consumer.value_0;\n}\n\nfunction StreamImpl(prev, spliterator){\n  TerminatableStream.call(this, prev);\n  this.spliterator = spliterator;\n}\n\nfunction lambda$4_1(a_1, t_2){\n  castTo(a_1, 106).add_1(t_2);\n  return a_1;\n}\n\nfunction lambda$5_0(consumer_0, item_2){\n  $accept(consumer_0, lambda$4_1(consumer_0.value_0, item_2));\n}\n\ndefineClass(604, 2382, {}, StreamImpl);\nvar Ljava_util_stream_StreamImpl_2_classLit = createForClass('java.util.stream', 'StreamImpl', 604);\nfunction StreamImpl$MapToObjSpliterator(map_0, original){\n  Spliterators$AbstractSpliterator.call(this, original.estimateSize_0(), original.characteristics_0() & -6);\n  checkCriticalNotNull(map_0);\n  this.original = original;\n}\n\ndefineClass(2385, 2384, {}, StreamImpl$MapToObjSpliterator);\n_.tryAdvance = function tryAdvance_0(action){\n  return this.original.tryAdvance(new StreamImpl$MapToObjSpliterator$lambda$0$Type(action));\n}\n;\nvar Ljava_util_stream_StreamImpl$MapToObjSpliterator_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToObjSpliterator', 2385);\nfunction StreamImpl$MapToObjSpliterator$lambda$0$Type(action_1){\n  this.action_1 = action_1;\n}\n\ndefineClass(2387, 1, {}, StreamImpl$MapToObjSpliterator$lambda$0$Type);\n_.accept_0 = function accept_4(arg0){\n  this.action_1.accept_0(castTo(arg0, 120).name_0);\n}\n;\nvar Ljava_util_stream_StreamImpl$MapToObjSpliterator$lambda$0$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/MapToObjSpliterator/lambda$0$Type', 2387);\nfunction $accept(this$static, value_0){\n  this$static.value_0 = value_0;\n}\n\nfunction StreamImpl$ValueConsumer(){\n}\n\ndefineClass(2386, 1, {}, StreamImpl$ValueConsumer);\n_.accept_0 = function accept_5(value_0){\n  $accept(this, value_0);\n}\n;\nvar Ljava_util_stream_StreamImpl$ValueConsumer_2_classLit = createForClass('java.util.stream', 'StreamImpl/ValueConsumer', 2386);\nfunction $accept_0(this$static, arg0){\n  lambda$5_0(this$static.consumer_0, arg0);\n}\n\nfunction StreamImpl$lambda$5$Type(consumer_0){\n  this.consumer_0 = consumer_0;\n}\n\ndefineClass(2388, 1, {}, StreamImpl$lambda$5$Type);\n_.accept_0 = function accept_6(arg0){\n  $accept_0(this, arg0);\n}\n;\nvar Ljava_util_stream_StreamImpl$lambda$5$Type_2_classLit = createForClass('java.util.stream', 'StreamImpl/lambda$5$Type', 2388);\n$entry(onLoad_1)(40);\n\n//# sourceURL=gwtmaterialdemo-40.js\n")

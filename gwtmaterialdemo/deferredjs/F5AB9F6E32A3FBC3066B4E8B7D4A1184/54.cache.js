$wnd.gwtmaterialdemo.runAsyncCallback54("function ete(){}\nfunction gte(){}\nfunction ite(){}\nfunction kte(){}\nfunction mte(){}\nfunction qte(){}\nfunction ste(){}\nfunction X5c(a,b){a.onshow=b}\nfunction V5c(a,b){a.onclose=b}\nfunction U5c(a,b){a.onclick=b}\nfunction W5c(a,b){a.onerror=b}\nfunction pte(){this.a=new qte;this.b=new ste}\nfunction dte(){UKb.call(this);SKb(this,ote(new pte))}\nfunction Wse(a,b,c){dKb();CKb.call(this,a,b,c,(Ytd(),Wtd))}\nfunction wte(a){var b;if(!a.d){b=new dte;a.d=b}return a.d}\nfunction vte(a){var b,c;if(!a.c){c=new Wse(qHb(kLb(a.a)),(b=wte(a),b),ute(a));XJb((nLb(a.a),c),lNb(nLb(a.a)));a.c=c}return a.c}\nfunction bte(){var a;a=(B5c(),$wnd.navigator.serviceWorker!=null);a||Rmd(new Umd(xE(rE(_L,1),LYe,21,0,[])),'Push Notification is not supported',X1e,null);return a}\nfunction cte(){var a,b;if(bte()){if(SMe($wnd.Notification.permission,'granted')){b=new $wnd.Object;b.body='I love GMD';b.icon='https://user.oc-static.com/upload/2017/05/03/14938342186053_01-duration-and-easing.png';a=new $wnd.Notification('GMD Says',b);U5c(a,Uvb(gte.prototype.Cf,gte,[]));V5c(a,Uvb(ite.prototype.Cf,ite,[]));W5c(a,Uvb(kte.prototype.Cf,kte,[]));X5c(a,Uvb(mte.prototype.Cf,mte,[]))}else{Rmd(new Umd(xE(rE(_L,1),LYe,21,0,[])),'Permission Denied. Update it thru the browser setting',X1e,null)}}}\nfunction ote(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;b=new ukc;IQb(b,(c=new s7b,IQb(c,(i=new Mmd,Ypd(i.b,'Will check if the Notification API is supported'),Ws(ho(i.a),(kxb(),(new $wb(lxb(Avf))).a)),SB(i,Avf),i)),IQb(c,(j=new vAe,$pd(j,(k=new qNe,k.a+='PwaManager.isPwaSupported()',new Uwb(k.a)).a),zo((Sxb(),j.tb),M8e,true),j)),zo(c.tb,Z4e,true),c));IQb(b,(d=new s7b,IQb(d,(l=new Mmd,Ws(ho(l.a),(new $wb(lxb(Bvf))).a),SB(l,Bvf),l)),IQb(d,(m=new MXb,TYb(m.k,Bvf),m.k.ob||IQb(m,m.k),MQb(m,a.a),m)),IQb(d,(n=new vAe,$pd(n,(o=new qNe,o.a+='// Will return the following status (see next section) <br> Notification.getPermission();',new Uwb(o.a)).a),zo(n.tb,M8e,true),n)),zo(d.tb,Z4e,true),d));IQb(b,(e=new s7b,IQb(e,(p=new Mmd,Ws(ho(p.a),(new $wb(lxb(Cvf))).a),SB(p,Cvf),p)),IQb(e,new $Bb((q=new qNe,q.a+='<blockquote> <p><b>denied<\\/b> - The user refuses to have notifications displayed. <\\/p> <p><b>granted<\\/b> - The user accepts having notifications displayed. <\\/p> <p><b>default<\\/b> - The user choice is unknown and therefore the browser will act as if the value were denied. <\\/p> <\\/blockquote>',new Uwb(q.a)).a)),zo(e.tb,Z4e,true),e));IQb(b,(f=new s7b,IQb(f,(r=new Mmd,Ws(ho(r.a),(new $wb(lxb(Dvf))).a),SB(r,Dvf),r)),IQb(f,(s=new MXb,TYb(s.k,Dvf),s.k.ob||IQb(s,s.k),MQb(s,a.b),s)),zo(f.tb,Z4e,true),f));IQb(b,(g=new s7b,IQb(g,(t=new Mmd,Ws(ho(t.a),(new $wb(lxb(Evf))).a),SB(t,Evf),t)),IQb(g,new $Bb((u=new qNe,u.a+='<blockquote> <p><b>actions<\\/b> - The actions array of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>badge<\\/b> - The URL of the image used to represent the notification when there is not enough space to display the notification itself.<\\/p> <p><b>body<\\/b> - The body string of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>data<\\/b> - Returns a structured clone of the notification\\u2019s data.<\\/p> <p><b>dir<\\/b> - The text direction of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>lang<\\/b> - The language code of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>tag<\\/b> - The ID of the notification (if any) as specified in the options parameter of the constructor. <\\/p> <p><b>icon<\\/b> - The URL of the image used as an icon of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>image<\\/b> - The URL of an image to be displayed as part of the notification, as specified in the options parameter of the constructor. <\\/p> <p><b>renotify<\\/b> - Specifies whether the user should be notified after a new notification replaces an old one. <\\/p> <p><b>requireInteraction<\\/b> - A Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically. <\\/p> <p><b>silent<\\/b> - Specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. <\\/p> <p><b>timestamp<\\/b> - Specifies the time at which a notification is created or applicable (past, present, or future). <\\/p> <p><b>title<\\/b> - The title of the notification as specified in the first parameter of the constructor. <\\/p> <p><b>vibrate<\\/b> - Specifies a vibration pattern for devices with vibration hardware to emit. <\\/p> <\\/blockquote>',new Uwb(u.a)).a)),zo(g.tb,Z4e,true),g));IQb(b,(h=new s7b,IQb(h,(v=new Mmd,Ws(ho(v.a),(new $wb(lxb(Fvf))).a),SB(v,Fvf),v)),IQb(h,(w=new vAe,$pd(w,(A=new qNe,A.a+='Notification notification = new Notification(\"GMD Says\", options); <br> // Listen to any Notification events <br> // A handler for the click event. It is triggered each time the user clicks on the notification. <br> notification.setOnclick(param1 -&gt; MaterialToast.fireToast(\"Clicked\")); <br> // A handler for the close event. It is triggered when the user closes the notification. <br> notification.setOnclose(param1 -&gt; MaterialToast.fireToast(\"Closed\")); <br> // A handler for the error event. It is triggered each time the notification encounters an error. <br> notification.setOnerror(param1 -&gt; MaterialToast.fireToast(\"Error\")); <br> // A handler for the show event. It is triggered when the notification is displayed. <br> notification.setOnshow(param1 -&gt; MaterialToast.fireToast(\"Shown\")); <br>',new Uwb(A.a)).a),zo(w.tb,M8e,true),w)),zo(h.tb,Z4e,true),h));return b}\nvar Avf='isSupported()',Bvf='Request Permission',Cvf='Permission Status',Dvf='Show Notification',Evf='Notification Options',Fvf='Notification Handlers';Svb(1042,56,_0e,Wse);_.Fe=function Xse(){Wze();kKb(this,new Yze(shf,'Push messaging provides a simple and effective way to re-engage with your users','pwa/notification/NotificationView',''))};var Tnb=wLe(zhf,'NotificationPresenter',1042);Svb(1638,65,a1e,dte);var Xnb=wLe(zhf,'NotificationView',1638);Svb(3118,$wnd.Function,{},ete);_.Cf=function fte(a){Vmd('Status: '+nF(a))};Svb(3114,$wnd.Function,{},gte);_.Cf=function hte(a){Rmd(new Umd(xE(rE(_L,1),LYe,21,0,[])),'Clicked',X1e,null)};Svb(3115,$wnd.Function,{},ite);_.Cf=function jte(a){Rmd(new Umd(xE(rE(_L,1),LYe,21,0,[])),blf,X1e,null)};Svb(3116,$wnd.Function,{},kte);_.Cf=function lte(a){Rmd(new Umd(xE(rE(_L,1),LYe,21,0,[])),zqf,X1e,null)};Svb(3117,$wnd.Function,{},mte);_.Cf=function nte(a){Rmd(new Umd(xE(rE(_L,1),LYe,21,0,[])),'Shown',X1e,null)};Svb(2183,1,{},pte);var Wnb=wLe(zhf,'NotificationView_BinderImpl/Widgets',2183);Svb(2184,1,K1e,qte);_.od=function rte(a){bte()&&$wnd.Notification.requestPermission(Uvb(ete.prototype.Cf,ete,[]))};var Unb=wLe(zhf,'NotificationView_BinderImpl/Widgets/1',2184);Svb(2185,1,K1e,ste);_.od=function tte(a){cte()};var Vnb=wLe(zhf,'NotificationView_BinderImpl/Widgets/2',2185);Svb(927,1,c9e);_.Yc=function Cte(){COb(this.b,vte(this.a.a))};kYe(Kq)(54);\n//# sourceURL=gwtmaterialdemo-54.js\n")

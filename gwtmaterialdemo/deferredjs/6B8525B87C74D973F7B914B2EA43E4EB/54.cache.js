$wnd.gwtmaterialdemo.runAsyncCallback54("function Tre(){}\nfunction Vre(){}\nfunction Xre(){}\nfunction Zre(){}\nfunction _re(){}\nfunction dse(){}\nfunction fse(){}\nfunction K4c(a,b){a.onshow=b}\nfunction I4c(a,b){a.onclose=b}\nfunction H4c(a,b){a.onclick=b}\nfunction J4c(a,b){a.onerror=b}\nfunction cse(){this.a=new dse;this.b=new fse}\nfunction Sre(){HJb.call(this);FJb(this,bse(new cse))}\nfunction Jre(a,b,c){SIb();pJb.call(this,a,b,c,(Lsd(),Jsd))}\nfunction jse(a){var b;if(!a.d){b=new Sre;a.d=b}return a.d}\nfunction ise(a){var b,c;if(!a.c){c=new Jre(dGb(ZJb(a.a)),(b=jse(a),b),hse(a));KIb((aKb(a.a),c),$Lb(aKb(a.a)));a.c=c}return a.c}\nfunction Qre(){var a;a=(o4c(),$wnd.navigator.serviceWorker!=null);a||Eld(new Hld(lD(fD(LK,1),yXe,21,0,[])),'Push Notification is not supported',L0e,null);return a}\nfunction Rre(){var a,b;if(Qre()){if(FLe($wnd.Notification.permission,'granted')){b=new $wnd.Object;b.body='I love GMD';b.icon='https://user.oc-static.com/upload/2017/05/03/14938342186053_01-duration-and-easing.png';a=new $wnd.Notification('GMD Says',b);H4c(a,Eub(Vre.prototype.Af,Vre,[]));I4c(a,Eub(Xre.prototype.Af,Xre,[]));J4c(a,Eub(Zre.prototype.Af,Zre,[]));K4c(a,Eub(_re.prototype.Af,_re,[]))}else{Eld(new Hld(lD(fD(LK,1),yXe,21,0,[])),'Permission Denied. Update it thru the browser setting',L0e,null)}}}\nfunction bse(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;b=new hjc;vPb(b,(c=new f6b,vPb(c,(i=new zld,Lod(i.b,'Will check if the Notification API is supported'),Is(ho(i.a),(Wvb(),(new Kvb(Xvb(suf))).a)),GA(i,suf),i)),vPb(c,(j=new ize,Nod(j,(k=new dMe,k.a+='PwaManager.isPwaSupported()',new Evb(k.a)).a),zo((Cwb(),j.tb),E7e,true),j)),zo(c.tb,R3e,true),c));vPb(b,(d=new f6b,vPb(d,(l=new zld,Is(ho(l.a),(new Kvb(Xvb(tuf))).a),GA(l,tuf),l)),vPb(d,(m=new zWb,GXb(m.k,tuf),m.k.ob||vPb(m,m.k),zPb(m,a.a),m)),vPb(d,(n=new ize,Nod(n,(o=new dMe,o.a+='// Will return the following status (see next section) <br> Notification.getPermission();',new Evb(o.a)).a),zo(n.tb,E7e,true),n)),zo(d.tb,R3e,true),d));vPb(b,(e=new f6b,vPb(e,(p=new zld,Is(ho(p.a),(new Kvb(Xvb(uuf))).a),GA(p,uuf),p)),vPb(e,new MAb((q=new dMe,q.a+='<blockquote> <p><b>denied<\\/b> - The user refuses to have notifications displayed. <\\/p> <p><b>granted<\\/b> - The user accepts having notifications displayed. <\\/p> <p><b>default<\\/b> - The user choice is unknown and therefore the browser will act as if the value were denied. <\\/p> <\\/blockquote>',new Evb(q.a)).a)),zo(e.tb,R3e,true),e));vPb(b,(f=new f6b,vPb(f,(r=new zld,Is(ho(r.a),(new Kvb(Xvb(vuf))).a),GA(r,vuf),r)),vPb(f,(s=new zWb,GXb(s.k,vuf),s.k.ob||vPb(s,s.k),zPb(s,a.b),s)),zo(f.tb,R3e,true),f));vPb(b,(g=new f6b,vPb(g,(t=new zld,Is(ho(t.a),(new Kvb(Xvb(wuf))).a),GA(t,wuf),t)),vPb(g,new MAb((u=new dMe,u.a+='<blockquote> <p><b>actions<\\/b> - The actions array of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>badge<\\/b> - The URL of the image used to represent the notification when there is not enough space to display the notification itself.<\\/p> <p><b>body<\\/b> - The body string of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>data<\\/b> - Returns a structured clone of the notification\\u2019s data.<\\/p> <p><b>dir<\\/b> - The text direction of the notification as specified in the options parameter of the constructor.<\\/p> <p><b>lang<\\/b> - The language code of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>tag<\\/b> - The ID of the notification (if any) as specified in the options parameter of the constructor. <\\/p> <p><b>icon<\\/b> - The URL of the image used as an icon of the notification as specified in the options parameter of the constructor. <\\/p> <p><b>image<\\/b> - The URL of an image to be displayed as part of the notification, as specified in the options parameter of the constructor. <\\/p> <p><b>renotify<\\/b> - Specifies whether the user should be notified after a new notification replaces an old one. <\\/p> <p><b>requireInteraction<\\/b> - A Boolean indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically. <\\/p> <p><b>silent<\\/b> - Specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. <\\/p> <p><b>timestamp<\\/b> - Specifies the time at which a notification is created or applicable (past, present, or future). <\\/p> <p><b>title<\\/b> - The title of the notification as specified in the first parameter of the constructor. <\\/p> <p><b>vibrate<\\/b> - Specifies a vibration pattern for devices with vibration hardware to emit. <\\/p> <\\/blockquote>',new Evb(u.a)).a)),zo(g.tb,R3e,true),g));vPb(b,(h=new f6b,vPb(h,(v=new zld,Is(ho(v.a),(new Kvb(Xvb(xuf))).a),GA(v,xuf),v)),vPb(h,(w=new ize,Nod(w,(A=new dMe,A.a+='Notification notification = new Notification(\"GMD Says\", options); <br> // Listen to any Notification events <br> // A handler for the click event. It is triggered each time the user clicks on the notification. <br> notification.setOnclick(param1 -&gt; MaterialToast.fireToast(\"Clicked\")); <br> // A handler for the close event. It is triggered when the user closes the notification. <br> notification.setOnclose(param1 -&gt; MaterialToast.fireToast(\"Closed\")); <br> // A handler for the error event. It is triggered each time the notification encounters an error. <br> notification.setOnerror(param1 -&gt; MaterialToast.fireToast(\"Error\")); <br> // A handler for the show event. It is triggered when the notification is displayed. <br> notification.setOnshow(param1 -&gt; MaterialToast.fireToast(\"Shown\")); <br>',new Evb(A.a)).a),zo(w.tb,E7e,true),w)),zo(h.tb,R3e,true),h));return b}\nvar suf='isSupported()',tuf='Request Permission',uuf='Permission Status',vuf='Show Notification',wuf='Notification Options',xuf='Notification Handlers';Cub(1042,56,P_e,Jre);_.De=function Kre(){Jye();ZIb(this,new Lye(kgf,'Push messaging provides a simple and effective way to re-engage with your users','pwa/notification/NotificationView',''))};var Dmb=jKe(rgf,'NotificationPresenter',1042);Cub(1638,65,Q_e,Sre);var Hmb=jKe(rgf,'NotificationView',1638);Cub(3114,$wnd.Function,{},Tre);_.Af=function Ure(a){Ild('Status: '+bE(a))};Cub(3110,$wnd.Function,{},Vre);_.Af=function Wre(a){Eld(new Hld(lD(fD(LK,1),yXe,21,0,[])),'Clicked',L0e,null)};Cub(3111,$wnd.Function,{},Xre);_.Af=function Yre(a){Eld(new Hld(lD(fD(LK,1),yXe,21,0,[])),Vjf,L0e,null)};Cub(3112,$wnd.Function,{},Zre);_.Af=function $re(a){Eld(new Hld(lD(fD(LK,1),yXe,21,0,[])),rpf,L0e,null)};Cub(3113,$wnd.Function,{},_re);_.Af=function ase(a){Eld(new Hld(lD(fD(LK,1),yXe,21,0,[])),'Shown',L0e,null)};Cub(2182,1,{},cse);var Gmb=jKe(rgf,'NotificationView_BinderImpl/Widgets',2182);Cub(2183,1,y0e,dse);_.nd=function ese(a){Qre()&&$wnd.Notification.requestPermission(Eub(Tre.prototype.Af,Tre,[]))};var Emb=jKe(rgf,'NotificationView_BinderImpl/Widgets/1',2183);Cub(2184,1,y0e,fse);_.nd=function gse(a){Rre()};var Fmb=jKe(rgf,'NotificationView_BinderImpl/Widgets/2',2184);Cub(927,1,W7e);_.Yc=function pse(){pNb(this.b,ise(this.a.a))};ZWe(Jq)(54);\n//# sourceURL=gwtmaterialdemo-54.js\n")

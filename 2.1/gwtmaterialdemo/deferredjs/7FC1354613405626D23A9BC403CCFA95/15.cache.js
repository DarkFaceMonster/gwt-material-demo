$wnd.gwtmaterialdemo.runAsyncCallback15("function U7b(){}\nfunction X7b(){}\nfunction jEd(){}\nfunction r7b(){iy()}\nfunction s7b(){Hy()}\nfunction t7b(){Sy()}\nfunction u7b(){Ny()}\nfunction z7b(){w7b()}\nfunction c8b(a,b){a.e=b}\nfunction d8b(a,b){a.f=b}\nfunction e8b(a,b){a.g=b}\nfunction f8b(a,b){a.i=b}\nfunction A7b(a){this.a=a}\nfunction C7b(a){this.a=a}\nfunction E7b(a){this.a=a}\nfunction G7b(a){this.a=a}\nfunction I7b(a){this.a=a}\nfunction K7b(a){this.a=a}\nfunction M7b(a){this.a=a}\nfunction MDd(a){this.a=a}\nfunction KDd(a){this.a=a}\nfunction ODd(a){this.a=a}\nfunction QDd(a){this.a=a}\nfunction SDd(a){this.a=a}\nfunction TDd(a){this.a=a}\nfunction VDd(a){this.a=a}\nfunction XDd(a){this.a=a}\nfunction ZDd(a){this.a=a}\nfunction _Dd(a){this.a=a}\nfunction bEd(a){this.a=a}\nfunction dEd(a){this.a=a}\nfunction fEd(a){this.a=a}\nfunction f7b(a,b){e8b(a.c,b)}\nfunction d7b(a,b){c8b(a.c,b)}\nfunction e7b(a,b){d8b(a.c,b)}\nfunction g7b(a,b){f8b(a.c,b)}\nfunction c7b(a,b){$wnd.$(a).code(b)}\nfunction O7b(a,b){this.a=a;this.b=b}\nfunction Q7b(a,b){this.a=a;this.b=b}\nfunction Yhc(a,b){this.a=a;this.b=b}\nfunction O8b(a,b,c){wt.call(this,a,b);this.a=c}\nfunction _6b(a,b){c7b((mub(),a.sb),b)}\nfunction GDd(a){b7b(a.f,jCb(a.g.F))}\nfunction w7b(){w7b=nsb;v7b=new zy}\nfunction $7b(){$7b=nsb;S7b=new U7b}\nfunction _7b(){_7b=nsb;T7b=new X7b}\nfunction lEd(){lEd=nsb;hEd=new jEd}\nfunction pEd(a){var b;if(!a.d){b=new HDd;a.d=b}return a.d}\nfunction W6b(a){return $wnd.$((mub(),a.sb)).code()}\nfunction X6b(a){return $wnd.$((mub(),a.sb)).code()}\nfunction V6b(a){kwb(a);$wnd.$((mub(),a.sb)).materialnote('reset')}\nfunction Z6b(a){kA(a,$wnd.$((mub(),a.sb)).code());return qze(),qze(),true}\nfunction $6b(a,b){nbd(b,a.e);a.e?(a.e=false):(a.e=true);return qze(),qze(),true}\nfunction iEd(a){if(!a.a){a.a=true;Lx();Up(Ix,'');Qx();return true}return false}\nfunction l7b(a){T6b();(mub(),a.sb).style[TOe]='9999'}\nfunction yDd(a,b,c){oGb();NGb.call(this,a,b,c,(Qmd(),Omd))}\nfunction fNb(a,b){return Eo(a,new Yhc(a,b),(Sy(),Sy(),Ry))}\nfunction a8b(a){var b,c,d,e;b=[];for(d=0,e=a.length;d<e;++d){c=a[d];Up(b,c.a)}return b}\nfunction T6b(){T6b=nsb;!MMb&&(MMb=new NMb);Ufc();Yfc((_7b(),T7b),true,false);Xfc(($7b(),S7b))}\nfunction BNb(a,b){!ho(BD((!a.Q&&(a.Q=new ilc(a)),a.Q).e,21)).hasAttribute(VMe)&&Ofd('Key Up : '+W6b(b.a.K.c))}\nfunction Y6b(a){$wnd.$((mub(),a.sb)).materialnote('insertText',(Gtb(),(new utb(Htb('Material Design'))).a))}\nfunction h7b(a){var b;b=$wnd.$((mub(),a.sb));b.off(naf);b.off(oaf);b.off(paf);b.off(qaf);b.off(raf);b.off(saf);b.destroy()}\nfunction FDd(a){var b;b=X6b(a.b);b.length==0&&(b='Empty');Kfd(new Nfd(RC(LC(gK,1),uMe,21,0,[])),b,WQe,null)}\nfunction oEd(a){var b,c;if(!a.c){c=new yDd(BDb(vHb(a.a)),(b=pEd(a),b),nEd(a));gGb((yHb(a.a),c),uJb(yHb(a.a)));a.c=c}return a.c}\nfunction b7b(a,b){a.b=b;if(a.a){uDb(a.a.a);a.a=null}!a.nb&&b!=null?(a.a=KNb(a,Fo(a,new Q7b(a,b),(!Kz&&(Kz=new zy),Kz)))):c7b((mub(),a.sb),b)}\nfunction P8b(){N8b();return RC(LC(_O,1),rNe,94,0,[G8b,h8b,u8b,L8b,F8b,l8b,I8b,H8b,p8b,o8b,n8b,M8b,D8b,r8b,j8b,k8b,y8b,C8b,J8b,s8b,m8b,q8b,K8b,z8b,B8b,w8b,i8b,E8b,v8b,A8b,t8b,x8b])}\nfunction mEd(a,b,c,d,e,f,g,h){var i;i=new yBe;i.a+=JWe;xBe(i,Htb(a));i.a+=LWe;xBe(i,Htb(b));i.a+=LWe;xBe(i,Htb(c));i.a+=LWe;xBe(i,Htb(d));i.a+=LWe;xBe(i,Htb(e));i.a+=LWe;xBe(i,Htb(f));i.a+=LWe;xBe(i,Htb(g));i.a+=KWe;xBe(i,Htb(h));i.a+=MWe;return new otb(i.a)}\nfunction i7b(){var a;T6b();cPb.call(this,$doc.createElement(MOe),RC(LC(Lpb,1),fPe,2,6,['editor']));this.c=new g8b;this.e=true;this.d=(a=new $wnd.Object,a.airMode=false,a.disableDragAndDrop=false,a.followingToolbar=false,a.minHeight=200,a.defaultBackColor='#777',a.defaultTextColor='#fff',a)}\nfunction U6b(a){var b;if(JD(a.rb,155)){b=BD(a.rb,155);$wnd.$((mub(),a.sb)).next(laf).find(maf).off(lOe).on(lOe,osb(O7b.prototype.ef,O7b,[a,b]));KNb(a,Fo(b,new M7b(b),(!Uz&&(Uz=new zy),Uz)))}else if(JD(a.rb,166)){b=BD(a.rb.rb,155);$wnd.$((mub(),a.sb)).next(laf).find(maf).off(lOe).on(lOe,osb(O7b.prototype.ef,O7b,[a,b]));KNb(a,Fo(b,new M7b(b),(!Uz&&(Uz=new zy),Uz)))}}\nfunction g8b(){this.g=RC(LC(_O,1),rNe,94,0,[(N8b(),G8b),h8b,u8b,L8b,F8b,l8b,I8b,H8b]);this.c=RC(LC(_O,1),rNe,94,0,[p8b,o8b]);this.b=RC(LC(_O,1),rNe,94,0,[n8b]);this.i=RC(LC(_O,1),rNe,94,0,[M8b,D8b,r8b]);this.a=RC(LC(_O,1),rNe,94,0,[j8b,k8b]);this.e=RC(LC(_O,1),rNe,94,0,[y8b,C8b,J8b,s8b,m8b,q8b]);this.f=RC(LC(_O,1),rNe,94,0,[K8b,z8b,B8b,w8b,i8b,E8b,v8b,A8b,t8b]);this.d=RC(LC(_O,1),rNe,94,0,[x8b])}\nfunction b8b(a){var b;b=RC(LC(Gpb,2),uMe,11,3,[]);b[0]=RC(LC(Gpb,1),uMe,1,5,[dOe,a8b(a.g)]);b[1]=RC(LC(Gpb,1),uMe,1,5,['para',a8b(a.f)]);b[2]=RC(LC(Gpb,1),uMe,1,5,[NMe,a8b(a.d)]);b[3]=RC(LC(Gpb,1),uMe,1,5,['undo',a8b(a.i)]);b[4]=RC(LC(Gpb,1),uMe,1,5,['fonts',a8b(a.c)]);b[5]=RC(LC(Gpb,1),uMe,1,5,[lRe,a8b(a.b)]);b[6]=RC(LC(Gpb,1),uMe,1,5,['ckMedia',a8b(a.a)]);b[7]=RC(LC(Gpb,1),uMe,1,5,['misc',a8b(a.e)]);return b}\nfunction a7b(a){var b,c;b=$wnd.$((mub(),a.sb));a.d.toolbar=b8b(a.c);a.d.placeholder=a.d.placeholder;a.d.height=(c=a.sb.style[NMe],(c==null||c.length==0)&&(c='550px'),c);b.materialnote(a.d);b.on(naf,osb(A7b.prototype.$e,A7b,[a]));b.on(oaf,osb(C7b.prototype.$e,C7b,[a]));b.on(paf,osb(E7b.prototype.$e,E7b,[a]));b.on(qaf,osb(G7b.prototype.$e,G7b,[a]));b.on(raf,osb(I7b.prototype.$e,I7b,[a]));b.on(saf,osb(K7b.prototype.$e,K7b,[a]));U6b(a)}\nfunction JDd(a){var b;this.t=new KDd(this);this.B=new TDd(this);this.C=new VDd(this);this.D=new XDd(this);this.F=new ZDd(this);this.G=new _Dd(this);this.H=new bEd(this);this.I=new dEd(this);this.J=new fEd(this);this.u=new MDd(this);this.v=new ODd(this);this.w=new QDd(this);this.A=new SDd(this);this.K=a;b=(lEd(),hEd);iEd(b);this.a=bt($doc);this.c=bt($doc);this.e=bt($doc);this.g=bt($doc);this.j=bt($doc);this.n=bt($doc);this.p=bt($doc);this.r=bt($doc);this.b=new Xtb(this.a);this.d=new Xtb(this.c);this.f=new Xtb(this.e);this.i=new Xtb(this.g);this.k=new Xtb(this.j);this.o=new Xtb(this.n);this.q=new Xtb(this.p);this.s=new Xtb(this.r)}\nfunction N8b(){N8b=nsb;G8b=new O8b('STYLE',0,dOe);h8b=new O8b('BOLD',1,'bold');u8b=new O8b('ITALIC',2,'italic');L8b=new O8b('UNDERLINE',3,'underline');F8b=new O8b('STRIKETHROUGH',4,'strikethrough');l8b=new O8b('CLEAR',5,ZTe);I8b=new O8b('SUPERSCRIPT',6,'superscript');H8b=new O8b('SUBSCRIPT',7,'subscript');p8b=new O8b('FONT_SIZE',8,'fontsize');o8b=new O8b('FONT_NAME',9,'fontname');n8b=new O8b('COLOR',10,lRe);M8b=new O8b('UNDO',11,'undo');D8b=new O8b('REDO',12,'redo');r8b=new O8b('HELP',13,'help');j8b=new O8b('CK_IMAGE_UPLOAD',14,'ckImageUploader');k8b=new O8b('CK_IMAGE_VIDEO',15,'ckVideoEmbeeder');y8b=new O8b('LINK',16,rMe);C8b=new O8b('PICTURE',17,'picture');J8b=new O8b(LNe,18,MNe);s8b=new O8b('HR',19,'hr');m8b=new O8b('CODE_VIEW',20,'codeview');q8b=new O8b(dUe,21,RQe);K8b=new O8b('UL',22,'ul');z8b=new O8b('OL',23,'ol');B8b=new O8b('PARAGRAPH',24,'paragraph');w8b=new O8b(PNe,25,'leftButton');i8b=new O8b(IPe,26,'centerButton');E8b=new O8b(RNe,27,'rightButton');v8b=new O8b('JUSTIFY',28,'justifyButton');A8b=new O8b('OUTDENT',29,'outdentButton');t8b=new O8b('INDENT',30,'indentButton');x8b=new O8b(uaf,31,'lineheight')}\nfunction HDd(){dHb.call(this);bHb(this,IDd(new JDd(this)));b7b(this.f,vaf);b7b(this.a,vaf);f7b(this.e,RC(LC(_O,1),rNe,94,0,[(N8b(),G8b),h8b,u8b]));e7b(this.e,RC(LC(_O,1),rNe,94,0,[w8b,E8b,v8b]));d7b(this.e,RC(LC(_O,1),rNe,94,0,[m8b,q8b]));g7b(this.e,RC(LC(_O,1),rNe,94,0,[]));b7b(this.e,'<div style=\"text-align: left;\"> <span style=\"font-size: 37px; font-weight: bold;\"> Options <\\/span> <\\/div> <div style=\"text-align: left;\"> <ul> <li> <span style=\"line-height: 1.5;\"> optionRichEditor.setStyleOptions(ToolbarButton. <span style=\"font-weight: bold;\"> STYLE <\\/span> , ToolbarButton. <span style=\"font-weight: bold;\"> BOLD <\\/span> , ToolbarButton. <span style=\"font-weight: bold;\"> ITALIC <\\/span> ); <\\/span> <br> <\\/li> <li> optionRichEditor.setParaOptions(ToolbarButton. <span style=\"font-weight: bold;\"> LEFT <\\/span> ,&nbsp;ToolbarButton. <span style=\"font-weight: bold;\"> RIGHT <\\/span> , ToolbarButton. <span style=\"font-weight: bold;\"> JUSTIFY <\\/span> ); <\\/li> <li> optionRichEditor.setMiscOptions(ToolbarButton. <span style=\"font-weight: bold;\"> CODE_VIEW <\\/span> , ToolbarButton. <span style=\"font-weight: bold;\"> FULLSCREEN <\\/span> ); <\\/li> <li> optionRichEditor.setUndoOptions(); <\\/li> <\\/ul> <\\/div>');b7b(this.b,'<h2>I Love <\\/h2>')}\nfunction IDd(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob;c=new xyb(mEd(a.a,a.c,a.e,a.g,a.j,a.n,a.p,a.r).a);b=Ztb((mub(),c.sb));Wtb(a.b);Wtb(a.d);Wtb(a.f);Wtb(a.i);Wtb(a.k);Wtb(a.o);Wtb(a.q);Wtb(a.s);b.b?js(b.b,b.a,b.c):_tb(b.a);vyb(c,(d=new d3b,RMb(d,(l=new Ffd,As(ho(l.a),(Gtb(),(new utb(Htb(LXe))).a)),kA(l,LXe),l)),RMb(d,(m=new zqe,lTb(m.a,'https://github.com/Cerealkillerway/materialNote'),nTb(m.a),oTb(m.a,'MaterialNote 1.2.1'),m)),RMb(d,(n=new Kqe,Tid(n,(o=new yBe,o.a+='\\u2003&lt;!-- Addin Import --&gt;<br> xmlns:ma=\"urn:import:gwt.material.design.addins.client\"<br><br> &lt;!-- Addin Usage --&gt;<br> \\u2003&lt;ma:richeditor.MaterialRichEditor placeholder=\"Type everything about Material Design\"/&gt;',new otb(o.a)).a),yo(n.sb,MXe,true),n)),RMb(d,(p=new i7b,p.d.placeholder=waf,p)),yo(d.sb,_Te,true),d),Wtb(a.b));vyb(c,(e=new d3b,RMb(e,(q=new Ffd,Rid(q.b,'We provided a method to easily set the html content of the rich editor component'),As(ho(q.a),(new utb(Htb(xaf))).a),kA(q,xaf),q)),RMb(e,(r=new d3b,RMb(r,(s=new Bfd,Hlc((!s.W&&(s.W=new Jlc(s)),s.W),'s12 l3 m3'),ho(s.F).setAttribute(bSe,'Any HTML'),Hid(s.A).length==0||qo(s.A,tQe),a.K.g=s,s)),RMb(r,(t=new g7c,RMb(t,(u=new HTb,tOb(u,(QPc(),IPc)),u.sb.style[FUe]=(_w(),oYe),NUb(u.j,'Set HTML'),u.j.nb||RMb(u,u.j),VMb(u,a.G),u)),RMb(t,(v=new HTb,tOb(v,IPc),v.sb.style[FUe]=oYe,NUb(v.j,'Get HTML'),v.j.nb||RMb(v,v.j),VMb(v,a.H),v)),Hlc((!t.W&&(t.W=new Jlc(t)),t.W),EWe),t)),r)),RMb(e,(w=new i7b,a.K.f=w,w)),RMb(e,(A=new Kqe,Tid(A,(B=new yBe,B.a+='\\u2003richEditor.setHTML(\"&lt;b&gt;I Love Material Design&lt;/b&gt;\");<br> richEditor.getHTML();',new otb(B.a)).a),yo(A.sb,RXe,true),A)),yo(e.sb,_Te,true),e),Wtb(a.d));vyb(c,(f=new d3b,RMb(f,(C=new Ffd,Rid(C.b,'Air-mode gives clearer interface with hiddened toolbar. To reveal toolbar, select a text where you want to shape up. Simply turn on airMode and just focus on text.'),As(ho(C.a),(new utb(Htb('Air mode'))).a),kA(C,'Air mode'),C)),RMb(f,(D=new i7b,D.d.airMode=true,a.K.a=D,D)),RMb(f,(F=new Kqe,Tid(F,(G=new yBe,G.a+='&lt;ma:richeditor.MaterialRichEditor ui:field=\"airmodeRichEditor\" airMode=\"true\" /&gt;',new otb(G.a)).a),yo(F.sb,MXe,true),F)),yo(f.sb,_Te,true),f),Wtb(a.f));vyb(c,(g=new d3b,RMb(g,(H=new Ffd,Rid(H.b,\"The height param applied to Editor's zone\"),As(ho(H.a),(new utb(Htb('Height'))).a),kA(H,'Height'),H)),RMb(g,(I=new i7b,I.sb.style[NMe]=SRe,I)),RMb(g,(J=new Kqe,Tid(J,(K=new yBe,K.a+='&lt;ma:richeditor.MaterialRichEditor height=\"200px\"/&gt;',new otb(K.a)).a),yo(J.sb,MXe,true),J)),yo(g.sb,_Te,true),g),Wtb(a.i));vyb(c,(h=new d3b,RMb(h,(L=new Ffd,Rid(L.b,'You can set Options and remove what you want or even place it. Options style, fonts, colors, undo, ckMedia, misc, para and height are placed respectively.'),As(ho(L.a),(new utb(Htb(yaf))).a),kA(L,yaf),L)),RMb(h,(M=new i7b,a.K.e=M,M)),RMb(h,(N=new Kqe,Tid(N,(O=new yBe,O.a+='\\u2003optionRichEditor.setStyleOptions(ToolbarButton.STYLE, ToolbarButton.BOLD, ToolbarButton.ITALIC);<br> optionRichEditor.setParaOptions(ToolbarButton.LEFT, ToolbarButton.RIGHT, ToolbarButton.JUSTIFY);<br> optionRichEditor.setMiscOptions(ToolbarButton.CODE_VIEW, ToolbarButton.FULLSCREEN);<br> // Without undo options<br> optionRichEditor.setUndoOptions();<br>',new otb(O.a)).a),yo(N.sb,RXe,true),N)),yo(h.sb,_Te,true),h),Wtb(a.k));vyb(c,(i=new d3b,RMb(i,(P=new Ffd,As(ho(P.a),(new utb(Htb(zaf))).a),kA(P,zaf),P)),RMb(i,(Q=new HTb,tOb(Q,IPc),Q.sb.style[xQe]=$Xe,NUb(Q.j,'Reset'),Q.j.nb||RMb(Q,Q.j),VMb(Q,a.C),Q)),RMb(i,(R=new HTb,tOb(R,IPc),R.sb.style[xQe]=$Xe,NUb(R.j,'Insert Material Design'),R.j.nb||RMb(R,R.j),VMb(R,a.D),R)),RMb(i,(S=new HTb,tOb(S,IPc),NUb(S.j,_Xe),S.j.nb||RMb(S,S.j),VMb(S,a.F),S)),RMb(i,(T=new i7b,a.K.b=T,T)),RMb(i,(U=new Kqe,Tid(U,(V=new yBe,V.a+='\\u2003richEditor.reset(); // Clearing the rich editor <br> richEditor.insertText(\"Material Design\"); // Inserting text into rich editor <br>',new otb(V.a)).a),yo(U.sb,RXe,true),U)),yo(i.sb,_Te,true),i),Wtb(a.o));vyb(c,(j=new d3b,RMb(j,(W=new Ffd,Rid(W.b,'We have provided Value Change, Key Up, Blur and Focus events on rich editor.'),As(ho(W.a),(new utb(Htb(UXe))).a),kA(W,UXe),W)),RMb(j,(X=new i7b,Fo(X,a.I,(!hA&&(hA=new zy),hA)),dNb(X,a.J),UMb(X,a.u),fNb(X,a.v),eNb(X,a.w),Fo(X,a.A,(w7b(),v7b)),a.K.c=X,X)),RMb(j,(Y=new Kqe,Tid(Y,(Z=new yBe,Z.a+='\\u2003// Value Change Event<br> @UiHandler(\"eventRichEditor\")<br> void onValueChange(ValueChangeEvent&lt;String&gt; e) {<br> \\u2003GWT.log(\"Value Change Event : \" + eventRichEditor.getHTML());<br> }',new otb(Z.a)).a),yo(Y.sb,RXe,true),Y.sb.style[zQe]=xYe,Y)),RMb(j,($=new Kqe,Tid($,(ab=new yBe,ab.a+='\\u2003// Key Up and Down Events<br> @UiHandler(\"eventRichEditor\")<br> void onKeyUp(KeyUpEvent e) {<br> \\u2003GWT.log(\"Key Up : \" + eventRichEditor.getHTML());<br> }<br><br>  @UiHandler(\"eventRichEditor\")<br> void onKeyDown(KeyDownEvent e) {<br> \\u2003GWT.log(\"Key Down : \" + eventRichEditor.getHTML());<br> }',new otb(ab.a)).a),yo($.sb,RXe,true),$)),RMb(j,(bb=new Kqe,Tid(bb,(cb=new yBe,cb.a+='\\u2003// Focus and Blur Events<br> @UiHandler(\"eventRichEditor\")<br> void onFocus(FocusEvent e) {<br> \\u2003GWT.log(\"Focus Event : \" + eventRichEditor.getHTML());<br> }<br><br>  @UiHandler(\"eventRichEditor\")<br> void onBlur(BlurEvent event) {<br> \\u2003GWT.log(\"Blur Event : \" + eventRichEditor.getHTML());<br> }',new otb(cb.a)).a),yo(bb.sb,RXe,true),bb)),RMb(j,(db=new Kqe,Tid(db,(eb=new yBe,eb.a+='\\u2003// Paste Event<br> @UiHandler(\"eventRichEditor\")<br> void onPaste(PasteEvent e) {<br> \\u2003GWT.log(\"Paste : \" + eventRichEditor.getHTML());<br> }',new otb(eb.a)).a),yo(db.sb,RXe,true),db)),yo(j.sb,_Te,true),j),Wtb(a.q));vyb(c,(k=new d3b,RMb(k,(fb=new L5c,MNb(fb,(xtc(),Voc)),mmc((!fb.fb&&(fb.fb=new nmc(fb)),fb.fb),1),_Nb(fb,(Hw(),Fw)),As(fb.sb,(new utb(Htb(VXe))).a),UNb(fb,(Sv(),Rv)),mOb(fb,Ioc),fb)),RMb(k,(gb=new Ffd,Rid(gb.b,'We supported any Rich Editor to be embeded inside a modal'),As(ho(gb.a),(new utb(Htb(cYe))).a),kA(gb,cYe),gb)),RMb(k,(hb=new HTb,hb.sb.style[pYe]=yQe,NUb(hb.j,dYe),hb.j.nb||RMb(hb,hb.j),VMb(hb,a.B),hb)),RMb(k,(ib=new pbd,RMb(ib,(jb=new xbd,RMb(jb,(kb=new i7b,kb.sb.style[BWe]=POe,kb.d.placeholder=waf,kb)),jb.sb.style[BWe]=POe,jb)),RMb(ib,(lb=new ybd,RMb(lb,(mb=new HTb,NUb(mb.j,fYe),mb.j.nb||RMb(mb,mb.j),pTb(mb,(moc(),ioc)),VMb(mb,a.t),mb)),lOb(lb,(EPc(),DPc)),lb)),obd(ib,(kOc(),iOc)),a.K.d=ib,ib)),RMb(k,(nb=new Kqe,Tid(nb,(ob=new yBe,ob.a+='\\u2003&lt;m:MaterialModal padding=\"0\" ui:field=\"modal\"&gt;<br> \\u2003&lt;m:MaterialModalContent padding=\"0\"&gt;<br> \\u2003\\u2003&lt;ma:richeditor.MaterialRichEditor placeholder=\"Type everything about Material Design\"/&gt;<br> \\u2003&lt;/m:MaterialModalContent&gt;<br> &lt;/m:MaterialModal&gt;<br>',new otb(ob.a)).a),yo(nb.sb,_Te,true),nb)),yo(k.sb,_Te,true),k),Wtb(a.s));return c}\nvar laf='.note-editor',maf=\"div[data-event='fullscreen']\",naf='materialnote.blur',oaf='materialnote.focus',paf='materialnote.keyup',qaf='materialnote.keydown',raf='materialnote.paste',saf='materialnote.change',taf='gwt.material.design.addins.client.richeditor',vaf='<h2 style=\"text-align: center; \"> <span style=\"color: rgb(101, 31, 255);\"> I Love Material Design <\\/span> <\\/h2> <p style=\"text-align: center;\"> <span style=\"font-size: 17px;\"> Using <\\/span> <span style=\"font-weight: bold; font-size: 17px; text-decoration: underline;\"> Airmode <\\/span> <span style=\"font-size: 17px;\"> you can directly modify this html. <\\/span> <\\/p> <p style=\"text-align: center;\"> <br> <\\/p> <table class=\"hoverable bordered striped responsive-table\"> <thead> <tr> <th> State <\\/th> <th> Capital <\\/th> <th> Currency <\\/th> <\\/tr> <\\/thead> <tbody> <tr> <td> Philippines <\\/td> <td> Manila <\\/td> <td> Peso <\\/td> <\\/tr> <tr> <td> Japan <\\/td> <td> Tokyo <\\/td> <td> Yen <\\/td> <\\/tr> <\\/tbody> <\\/table> <p> <\\/p>',waf='Type everything about Material Design',xaf='Set/Get HTML',yaf='Controlling Options',zaf='Reset and Insert Text';msb(248,142,FQe,i7b);_.Ud=function k7b(){return $wnd.$((mub(),this.sb)).code()};_.Ue=function p7b(a,b){b7b(this,RD(a))};_.Nd=function j7b(){V6b(this)};_.Ve=function m7b(){a7b(this)};_.Gc=function n7b(){JNb(this);a7b(this);b7b(this,this.b)};_.Hc=function o7b(){!this.X&&(this.X=new aZc(this));ZYc(this.X);h7b(this)};_.We=function q7b(){h7b(this)};_.e=false;var ZO=Cze(taf,'MaterialRichEditor',248);msb(2235,2234,{},r7b);var QO=Cze(taf,'MaterialRichEditor/1',2235);msb(2237,2236,{},s7b);var RO=Cze(taf,'MaterialRichEditor/2',2237);msb(2239,2238,{},t7b);var SO=Cze(taf,'MaterialRichEditor/3',2239);msb(2241,2240,{},u7b);var TO=Cze(taf,'MaterialRichEditor/4',2241);msb(2895,fOe,{});_.ed=function x7b(a){Ofd('Paste : '+W6b(BD(a,2950).a.K.c))};_.fd=function y7b(){return v7b};var v7b;var aP=Cze('gwt.material.design.addins.client.richeditor.events','PasteEvent',2895);msb(2242,2895,{},z7b);var UO=Cze(taf,'MaterialRichEditor/5',2242);msb(3067,$wnd.Function,{},A7b);_.$e=function B7b(a){return Ho(this.a,new r7b),qze(),qze(),true};msb(3068,$wnd.Function,{},C7b);_.$e=function D7b(a){return Ho(this.a,new s7b),qze(),qze(),true};msb(3069,$wnd.Function,{},E7b);_.$e=function F7b(a){return Ho(this.a,new t7b),qze(),qze(),true};msb(3070,$wnd.Function,{},G7b);_.$e=function H7b(a){return Ho(this.a,new u7b),qze(),qze(),true};msb(3071,$wnd.Function,{},I7b);_.$e=function J7b(a){return Ho(this.a,new z7b),qze(),qze(),true};msb(3072,$wnd.Function,{},K7b);_.$e=function L7b(a){return Z6b(this.a)};msb(623,1,IUe,M7b);_.vd=function N7b(a){l7b(this.a)};var VO=Cze(taf,'MaterialRichEditor/lambda$6$Type',623);msb(2959,$wnd.Function,{},O7b);_.ef=function P7b(a,b){return $6b(this.a,this.b)};msb(2243,1,iQe,Q7b);_.td=function R7b(a){_6b(this.a,this.b)};var WO=Cze(taf,'MaterialRichEditor/lambda$8$Type',2243);var S7b,T7b;msb(2775,1,{},U7b);_.Hd=function V7b(){return 'richEditorCss'};_.Id=function W7b(){var a;a=new yBe;a.a+='.editorDialogs .modal,.note-editor .modal{background-color:#FFF;color:#404040;z-index:1057!important;backface-visibility:hidden}.editorDialogs .modal .input-field input.datepicker,.editorDialogs .modal .input-field input:not([readonly]),.note-editor .modal .input-field input.datepicker,.note-editor .modal .input-field input:not([readonly]){border-color:#000!important}.editorDialogs .modal .input-field input.datepicker:focus,.editorDialogs .modal .input-field input:focus:not([readonly]),.editorDialogs .modal textarea.materialize-textarea:focus:not([readonly]),.note-editor .modal .input-field input.datepicker:focus,.note-editor .modal .input-field input:focus:not([readonly]),.note-editor .modal textarea.materialize-textarea:focus:not([readonly]){box-shadow:0 1px 0 0 grey!important;border-color:grey!important}.editorDialogs .modal .input-field .prefix,.editorDialogs .modal .input-field input.datepicker+label,.editorDialogs .modal .input-field input:not([readonly])+label,.editorDialogs .modal .note-editor+label,.editorDialogs .modal label,.note-editor .modal .input-field .prefix,.note-editor .modal .input-field input.datepicker+label,.note-editor .modal .input-field input:not([readonly])+label,.note-editor .modal .note-editor+label,.note-editor .modal label{color:#000!important}.editorDialogs .modal .input-field .prefix.active,.editorDialogs .modal .input-field input.datepicker:focus+label,.editorDialogs .modal .input-field input:focus:not([readonly])+label,.editorDialogs .modal textarea.materialize-textarea:focus:not([readonly])+label,.note-editor .modal .input-field .prefix.active,.note-editor .modal .input-field input.datepicker:focus+label,.note-editor .modal .input-field input:focus:not([readonly])+label,.note-editor .modal textarea.materialize-textarea:focus:not([readonly])+label{color:grey}.editorDialogs .modal .btn,.editorDialogs .modal .btn-large,.note-editor .modal .btn,.note-editor .modal .btn-large{background-color:#2196F3;color:#fff;cursor:pointer}.editorDialogs .modal .btn-large:hover,.editorDialogs .modal .btn:hover,.note-editor .modal .btn-large:hover,.note-editor .modal .btn:hover{background-color:#2196F3!important;color:#fff}.editorDialogs .modal .modal-footer,.note-editor .modal .modal-footer{background-color:#E9E9E9}.editorDialogs .modal .modal-footer .btnClose,.note-editor .modal .modal-footer .btnClose{margin-right:15px;background-color:transparent!important;color:grey}.editorDialogs .modal .modal-footer .btnClose:hover,.note-editor .modal .modal-footer .btnClose:hover{color:grey;background-color:transparent!important}.editorDialogs .modal .canvasContainerEmpty,.note-editor .modal .canvasContainerEmpty{border:5px solid #9c27b0}.note-editor{position:relative;border-left:3px solid #e9e9e9;border-bottom:3px solid #e9e9e9;border-right:3px solid #e9e9e9;background:#E9E9E9}.note-editor .img-circle{border-radius:50%}.note-editor .img-rounded{border-radius:5%}.note-editor .img-thumbnail{border:5px solid #e9e9e9;height:200px}.note-editor .img-bordered{border:5px solid #e9e9e9}.note-editor .btn-large:hover,.note-editor .btn:hover{background-color:#E9E9E9!important}.note-editor .active.btn-large,.note-editor .btn.active{background-color:#E0E0E0}.note-editor .note-editable ul li{list-style-type:square!important;display:list-item;list-style-position:inside}.note-editor .note-dialog>div,.note-editor .note-toolbar .btn.disabled,.note-editor .note-toolbar .disabled.btn-large,.note-editor .note-toolbar button.disabled{display:none}.note-editor .note-dialog .form-group{margin-right:0;margin-left:0}.note-editor .note-dialog .note-modal-form{margin:0}.note-editor .note-dialog .note-image-dialog .note-dropzone{min-height:100px;margin-bottom:10px;font-size:30px;line-height:4;color:#d3d3d3;text-align:center;border:4px dashed #d3d3d3}.note-editor .transparent{opacity:0}.note-editor .note-resizebar{background-color:#e9e9e9;width:100%;height:13px;cursor:ns-resize;padding-top:1px}.note-editor .note-resizebar .note-icon-bar{width:20px;margin:2px auto;border-top:2px solid #545454}.note-editor .note-toolbar{position:relative;color:#000;background-color:#e9e9e9;margin:0;z-index:995!important;padding:2%}.note-editor .note-toolbar ul{padding:0}.note-editor .note-toolbar .dropdown{cursor:pointer}.note-editor .note-toolbar .note-current-fontname{min-width:134px;display:inline-block;text-align:left}.note-editor .note-handle .note-control-selection{position:absolute;display:none;border:2px solid #e9e9e9}.note-editor .note-handle .note-control-selection .note-control-selection-bg{width:100%;height:100%;z-index:3;background-color:rgba(117,117,117,.3)}.note-editor .note-handle .note-control-selection>div{position:absolute}.note-editor .note-handle .note-control-selection .note-control-handle,.note-editor .note-handle .note-control-selection .note-control-holder{width:7px;height:7px;border:1px solid #000}.note-editor .note-handle .note-control-selection .note-control-sizing{width:15px;height:15px;background-color:#e9e9e9;z-index:5;cursor:se-resize}.note-editor .note-handle .note-control-selection .note-control-nw{top:-5px;left:-5px;border-right:0;border-bottom:0}.note-editor .note-handle .note-control-selection .note-control-ne{top:-5px;right:-5px;border-bottom:0;border-left:none}.note-editor .note-handle .note-control-selection .note-control-sw{bottom:-5px;left:-5px;border-top:0;border-right:0}.note-editor .note-handle .note-control-selection .note-control-se{right:-5px;bottom:-5px}.note-editor .note-handle .note-control-selection .note-control-selection-info{right:0;bottom:0;padding:5px;margin:17px;font-size:15px;color:#000;background-color:#e9e9e9;z-index:5}.note-dialog .note-help-dialog{color:#777}.note-dialog .note-help-dialog h4{color:#000}.note-dialog .note-help-dialog thead{background-color:#777;color:#fff}.note-dialog .note-help-dialog tbody{background-color:#e0e0e0}.note-editor .btn-group,.popover .btn-group{display:inline-block;margin-right:10px;position:relative}.note-editor .btn-group ul,.popover .btn-group ul{padding:0}.note-editor .btn-group .closeLeft,.popover .btn-group .closeLeft{padding-right:0!important;margin-right:0!important}.note-editor .btn-group .closeLeft i,.popover .btn-group .closeLeft i{margin-right:0!important}.note-editor .btn-group i.left,.popover .btn-group i.left{margin-right:5px}.note-editor .btn,.note-editor .btn-large,.popover .btn,.popover .btn-large{border-radius:0!important;box-shadow:none!important;padding:0 9px!important;color:#7F7A7A;background:#fff}.note-editor .btnSecond,.popover .btnSecond{background-color:#B71C1C!important}.note-editor .btnThird,.popover .btnThird{background-color:#4a148c!important}.note-editor button,.note-editor note-toolbar button,.popover button,.popover note-toolbar button{border:none;height:36px;text-transform:none}.note-editor [type=checkbox]:checked+label:before,.popover [type=checkbox]:checked+label:before{border-right-color:#9e9e9e!important;border-bottom-color:#9e9e9e!important}.note-editor .note-palette-title,.popover .note-palette-title{padding:0!important}.note-editor .colorName,.popover .colorName{display:inline-block;color:#000}@media only screen and (max-width:600px){.note-editor .colorName,.popover .colorName{display:none}}.note-editor .note-color-palette,.popover .note-color-palette{line-height:10px;border:3px solid #e9e9e9;padding:0!important;overflow-x:scroll;overflow-y:hidden}.note-editor .note-color-palette .note-color-row,.popover .note-color-palette .note-color-row{padding:0!important;min-width:300px}.note-editor .note-color-palette button.note-color-btn,.popover .note-color-palette button.note-color-btn{width:20px;height:20px;padding:0;margin:0}.note-editor .note-color-palette .note-color-btn:hover:after,.popover .note-color-palette .note-color-btn:hover:after{position:absolute;width:30px;height:30px;content:\"\";background-color:inherit;margin-top:-15px;margin-left:-15px}.note-editor .note-dimension-picker,.popover .note-dimension-picker{overflow:hidden}.note-editor .largeDropdown,.popover .largeDropdown{width:290px}.note-editor .dropdown-menu,.popover .dropdown-menu{z-index:1033}.note-editor .dropdown-menu.note-check,.popover .dropdown-menu.note-check{min-width:80px}.note-editor .dropdown-menu label,.popover .dropdown-menu label{color:#000!important}.note-editor ul.dropdown-menu,.popover ul.dropdown-menu{position:absolute;top:20px;background-color:#FFF;box-shadow:0 8px 17px 0 rgba(0,0,0,.2),0 6px 20px 0 rgba(0,0,0,.19)}.note-editor ul.dropdown-menu#colors,.popover ul.dropdown-menu#colors{width:342px}.note-editor ul.dropdown-menu#colors .indicator,.popover ul.dropdown-menu#colors .indicator{width:50%;left:0}.note-editor ul.dropdown-menu .colorTable,.popover ul.dropdown-menu .colorTable{padding:3px 0}.note-editor ul.dropdown-menu .tabs,.popover ul.dropdown-menu .tabs{background:0 0}.popover ul.dropdown-menu .tabs:hover{background-color:#e9e9e9}.note-editor ul.dropdown-menu .tabs .tab a,.note-editor ul.dropdown-menu .tabs .tab a:hover,.popover ul.dropdown-menu .tabs .tab a,.popover ul.dropdown-menu .tabs .tab a:hover{color:#7F7A7A}.note-editor ul.dropdown-menu .tabs .indicator,.popover ul.dropdown-menu .tabs .indicator{background-color:#868181}.note-editor ul.dropdown-menu li,.popover ul.dropdown-menu li{list-style-type:none;padding:0!important}.note-editor ul.dropdown-menu li div,.popover ul.dropdown-menu li div{padding:3px 15px;cursor:pointer}.note-popover .popover{position:absolute;max-width:none;color:#000}.note-popover .popover .arrow{width:0;height:0;border-style:solid;border-width:0 10px 10px;border-color:transparent transparent #e9e9e9}.note-popover .popover .popover-content{background-color:#e9e9e9}.note-popover .popover .popover-content>a{margin-left:12px}.note-popover .popover .popover-content a{display:inline-block;max-width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;vertical-align:middle}.note-popover .popover .popover-content .arrow{left:20px}.note-popover .popover .popover-content .btn-group{display:inline-block}.note-popover .popover .popover-content .btn-group .btn,.note-popover .popover .popover-content .btn-group .btn-large{border-radius:0!important;box-shadow:none!important;padding:0 9px!important;background-color:#e9e9e9}.note-popover .popover .popover-content .note-para .dropdown-menu,.note-toolbar .note-para .dropdown-menu{min-width:172px;padding:5px}.note-popover .popover .popover-content .note-para .dropdown-menu>div:first-child,.note-toolbar .note-para .dropdown-menu>div:first-child{margin-right:5px}.note-editor .note-dropzone{position:absolute;z-index:100;display:none;color:#87cefa;background-color:#fff;border:2px dashed #87cefa;opacity:.95;pointer-event:none}.note-editor .note-dropzone .note-dropzone-message{display:table-cell;font-size:28px;font-weight:700;text-align:center;vertical-align:middle}.note-editor .note-dropzone.hover{color:#098ddf;border:2px dashed #098ddf}.note-editor.dragover .note-dropzone{display:table}.note-editor.fullscreen{position:fixed;top:0;left:0;z-index:2021;width:100%}.note-editor.fullscreen .note-editable{background-color:#fff}.note-editor.codeview .note-editable,.note-editor.fullscreen .note-resizebar{display:none}.note-editor.codeview .note-codable{display:block}.note-editor .note-statusbar{background-color:#f5f5f5}.note-editor .note-editable[contenteditable=true]:empty:not(:focus):before{color:#a9a9a9;content:attr(data-placeholder)}.note-editor .note-editable{padding:10px;overflow:auto;outline:0;background:#fff;margin:2%;box-shadow:0 8px 17px 0 rgba(0,0,0,.2),0 6px 20px 0 rgba(0,0,0,.19)}.note-editor .note-editable[contenteditable=false]{background-color:#e5e5e5}.note-editor .note-codable{display:none;width:100%;padding:10px;margin-bottom:0;font-family:Menlo,Monaco,monospace,sans-serif;font-size:14px;color:#ccc;background-color:#222;border:0;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;box-shadow:none;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;box-sizing:border-box;resize:none}.note-air-editor{outline:0}.note-popover .popover .popover-content,.note-toolbar{padding:0;margin:0}.note-popover .popover .popover-content>.btn-group,.note-toolbar>.btn-group{background:#fff;margin:4px;box-shadow:0 2px 5px 0 rgba(0,0,0,.16),0 2px 10px 0 rgba(0,0,0,.12)}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group,.note-popover .popover .popover-content .note-style blockquote,.note-popover .popover .popover-content .note-style h1,.note-popover .popover .popover-content .note-style h2,.note-popover .popover .popover-content .note-style h3,.note-popover .popover .popover-content .note-style h4,.note-popover .popover .popover-content .note-style h5,.note-popover .popover .popover-content .note-style h6,.note-toolbar .note-color .dropdown-menu .btn-group,.note-toolbar .note-style blockquote,.note-toolbar .note-style h1,.note-toolbar .note-style h2,.note-toolbar .note-style h3,.note-toolbar .note-style h4,.note-toolbar .note-style h5,.note-toolbar .note-style h6{margin:0}.note-popover .popover .popover-content .btn-group .note-table,.note-toolbar .btn-group .note-table{min-width:0;padding:5px}.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker,.note-toolbar .btn-group .note-table .note-dimension-picker{font-size:18px}.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-mousecatcher,.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-mousecatcher{position:absolute!important;z-index:3;width:260px;height:260px;cursor:pointer}.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-unhighlighted,.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-unhighlighted{position:relative!important;z-index:1;width:312px;height:130px;background-size:26px 26px;background-image:repeating-linear-gradient(0deg,#FFF,#FFF 2px,transparent 2px,transparent 26px),repeating-linear-gradient(-90deg,transparent,transparent 2px,#E9E9E9 2px,#E9E9E9 26px)}.note-popover .popover .popover-content .btn-group .note-table .note-dimension-picker .note-dimension-picker-highlighted,.note-toolbar .btn-group .note-table .note-dimension-picker .note-dimension-picker-highlighted{position:absolute!important;z-index:2;width:26px;height:26px;background-size:26px 26px;background-image:repeating-linear-gradient(0deg,#fff,#fff 2px,transparent 2px,transparent 26px),repeating-linear-gradient(-90deg,transparent,transparent 2px,#9e9e9e 2px,#9e9e9e 26px)}.note-popover .popover .popover-content .note-color .dropdown-toggle,.note-toolbar .note-color .dropdown-toggle{width:20px;padding-left:5px}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group:first-child,.note-toolbar .note-color .dropdown-menu .btn-group:first-child{margin:0 5px}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-palette-title,.note-toolbar .note-color .dropdown-menu .btn-group .note-palette-title{margin:2px 7px;font-size:12px;text-align:center;border-bottom:1px solid #eee}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-reset,.note-toolbar .note-color .dropdown-menu .btn-group .note-color-reset{padding:0 3px;margin:3px;font-size:11px;cursor:pointer;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-row,.note-toolbar .note-color .dropdown-menu .btn-group .note-color-row{height:20px}.note-popover .popover .popover-content .note-color .dropdown-menu .btn-group .note-color-reset:hover,.note-toolbar .note-color .dropdown-menu .btn-group .note-color-reset:hover{background:#eee}.note-popover .popover .popover-content .dropdown-menu.right,.note-toolbar .dropdown-menu.right{right:0;left:auto}.note-popover .popover .popover-content .dropdown-menu.right::before,.note-toolbar .dropdown-menu.right::before{right:9px;left:auto!important}.note-popover .popover .popover-content .dropdown-menu.right::after,.note-toolbar .dropdown-menu.right::after{right:10px;left:auto!important}.note-popover .popover .popover-content .dropdown-menu.note-check li a i,.note-toolbar .dropdown-menu.note-check li a i{color:#00bfff;visibility:hidden}.note-popover .popover .popover-content .dropdo';a.a+='wn-menu.note-check li a.checked i,.note-toolbar .dropdown-menu.note-check li a.checked i{visibility:visible}.note-popover .popover .popover-content .note-fontsize-10,.note-toolbar .note-fontsize-10{font-size:10px}.codeview .note-color,.codeview .note-fonts,.codeview .note-height,.codeview .note-para,.codeview .note-style,.codeview .note-undo{display:none}.codeview .note-misc{background:#E0E0E0!important;padding-right:12px!important}';return a.a};var XO=Cze(taf,'MaterialRichEditorClientBundle_default_InlineClientBundleGenerator/1',2775);msb(2776,1,{},X7b);_.Hd=function Y7b(){return 'richEditorJs'};_.Id=function Z7b(){var a;a=new yBe;a.a+=\"(function(factory) {if (typeof define === 'function' && define.amd) {define(['jquery'], factory); } else {factory(window.jQuery); } }(function($) {if (!Array.prototype.reduce) {Array.prototype.reduce = function(callback) {var t = Object(this), len = t.length >>> 0, k = 0, value; if (arguments.length === 2) {value = arguments[1]; } else {while (k < len && !(k in t)) {k++; } if (k >= len) {throw new TypeError('Reduce of empty array with no initial value'); } value = t[k++]; } for (; k < len; k++) {if (k in t) {value = callback(value, t[k], k, t); } } return value; }; } if ('function' !== typeof Array.prototype.filter) {Array.prototype.filter = function(func) {var t = Object(this), len = t.length >>> 0; var res = []; var thisArg = arguments.length >= 2 ? arguments[1] : void 0; for (var i = 0; i < len; i++) {if (i in t) {var val = t[i]; if (func.call(thisArg, val, i, t)) {res.push(val); } } } return res; }; } var isSupportAmd = typeof define === 'function' && define.amd; var isFontInstalled = function(fontName) {if (fontName === \\\"Roboto\\\") return true; var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS'; var $tester = $('<div>').css({position: 'absolute', left: '-9999px', top: '-9999px', fontSize: '200px'}).text('mmmmmmmmmwwwwwww').appendTo(document.body); var originalWidth = $tester.css('fontFamily', testFontName).width(); var width = $tester.css('fontFamily', fontName + ',' + testFontName).width(); $tester.remove(); return originalWidth !== width; }; var userAgent = navigator.userAgent; var agent = {isMac: navigator.appVersion.indexOf('Mac') > -1, isMSIE: /MSIE|Trident/i.test(userAgent), isFF: /firefox/i.test(userAgent), isWebkit: /webkit/i.test(userAgent), isSafari: /safari/i.test(userAgent), jqueryVersion: parseFloat($.fn.jquery), isSupportAmd: isSupportAmd, hasCodeMirror: isSupportAmd ? require.specified('CodeMirror') : !!window.CodeMirror, isFontInstalled: isFontInstalled, isW3CRangeSupport: !!document.createRange }; var func = (function() {var eq = function(itemA) {return function(itemB) {return itemA === itemB; }; }; var eq2 = function(itemA, itemB) {return itemA === itemB; }; var peq2 = function(propName) {return function(itemA, itemB) {return itemA[propName] === itemB[propName]; }; }; var ok = function() {return true; }; var fail = function() {return false; }; var not = function(f) {return function() {return !f.apply(f, arguments); }; }; var and = function(fA, fB) {return function(item) {return fA(item) && fB(item); }; }; var self = function(a) {return a; }; var idCounter = 0; var uniqueId = function(prefix) {var id = ++idCounter + ''; return prefix ? prefix + id : id; }; var rect2bnd = function(rect) {var $document = $(document); return {top: rect.top + $document.scrollTop(), left: rect.left + $document.scrollLeft(), width: rect.right - rect.left, height: rect.bottom - rect.top }; }; var invertObject = function(obj) {var inverted = {}; for (var key in obj) {if (obj.hasOwnProperty(key)) {inverted[obj[key]] = key; } } return inverted; }; var namespaceToCamel = function(namespace, prefix) {prefix = prefix || ''; return prefix + namespace.split('.').map(function(name) {return name.substring(0, 1).toUpperCase() + name.substring(1); }).join(''); }; return {eq: eq, eq2: eq2, peq2: peq2, ok: ok, fail: fail, self: self, not: not, and: and, uniqueId: uniqueId, rect2bnd: rect2bnd, invertObject: invertObject, namespaceToCamel: namespaceToCamel }; })(); var list = (function() {var head = function(array) {return array[0]; }; var last = function(array) {return array[array.length - 1]; }; var initial = function(array) {return array.slice(0, array.length - 1); }; var tail = function(array) {return array.slice(1); }; var find = function(array, pred) {for (var idx = 0, len = array.length; idx < len; idx ++) {var item = array[idx]; if (pred(item)) {return item; } } }; var all = function(array, pred) {for (var idx = 0, len = array.length; idx < len; idx ++) {if (!pred(array[idx])) {return false; } } return true; }; var contains = function(array, item) {return $.inArray(item, array) !== -1; }; var sum = function(array, fn) {fn = fn || func.self; return array.reduce(function(memo, v) {return memo + fn(v); }, 0); }; var from = function(collection) {var result = [], idx = -1, length = collection.length; while (++idx < length) {result[idx] = collection[idx]; } return result; }; var clusterBy = function(array, fn) {if (!array.length) { return []; } var aTail = tail(array); return aTail.reduce(function(memo, v) {var aLast = last(memo); if (fn(last(aLast), v)) {aLast[aLast.length] = v; } else {memo[memo.length] = [v]; } return memo; }, [[head(array)]]); }; var compact = function(array) {var aResult = []; for (var idx = 0, len = array.length; idx < len; idx ++) {if (array[idx]) { aResult.push(array[idx]); } } return aResult; }; var unique = function(array) {var results = []; for (var idx = 0, len = array.length; idx < len; idx ++) {if (!contains(results, array[idx])) {results.push(array[idx]); } } return results; }; var next = function(array, item) {var idx = array.indexOf(item); if (idx === -1) {return null;} return array[idx + 1]; }; var prev = function(array, item) {var idx = array.indexOf(item); if (idx === -1) {return null;} return array[idx - 1]; }; return {head: head, last: last, initial: initial, tail: tail, prev: prev, next: next, find: find, contains: contains, all: all, sum: sum, from: from, clusterBy: clusterBy, compact: compact, unique: unique}; })(); var NBSP_CHAR = String.fromCharCode(160); var ZERO_WIDTH_NBSP_CHAR = '\\\\ufeff'; var dom = (function() {var isEditable = function(node) {return node && $(node).hasClass('note-editable'); }; var isControlSizing = function(node) {return node && $(node).hasClass('note-control-sizing'); }; var buildLayoutInfo = function($editor) {var makeFinder; if ($editor.hasClass('note-air-editor')) {var id = list.last($editor.attr('id').split('-')); makeFinder = function(sIdPrefix) {return function() { return $(sIdPrefix + id); }; }; return {editor: function() { return $editor; }, holder : function() { return $editor.data('holder'); }, editable: function() { return $editor; }, popover: makeFinder('#note-popover-'), handle: makeFinder('#note-handle-'), dialog: makeFinder('#note-dialog-') }; } else {makeFinder = function(sClassName) {return function() { return $editor.find(sClassName); }; }; return {editor: function() { return $editor; }, holder : function() { return $editor.data('holder'); }, dropzone: makeFinder('.note-dropzone'), toolbar: makeFinder('.note-toolbar'), editable: makeFinder('.note-editable'), codable: makeFinder('.note-codable'), statusbar: makeFinder('.note-statusbar'), popover: makeFinder('.note-popover'), handle: makeFinder('.note-handle'), dialog: makeFinder('.note-dialog') }; } }; var makeLayoutInfo = function(descendant) {var $target = $(descendant).closest('.note-editor, .note-air-editor, .note-air-layout'); if (!$target.length) {return null; } var $editor; if ($target.is('.note-editor, .note-air-editor')) {$editor = $target; } else {$editor = $('#note-editor-' + list.last($target.attr('id').split('-'))); } return buildLayoutInfo($editor); }; var makePredByNodeName = function(nodeName) {nodeName = nodeName.toUpperCase(); return function(node) {return node && node.nodeName.toUpperCase() === nodeName; }; }; var isText = function(node) {return node && node.nodeType === 3; }; var isVoid = function(node) {return node && /^BR|^IMG|^HR/.test(node.nodeName.toUpperCase()); }; var isPara = function(node) {if (isEditable(node)) {return false; } return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase()); }; var isLi = makePredByNodeName('LI'); var isPurePara = function(node) {return isPara(node) && !isLi(node); }; var isTable = makePredByNodeName('TABLE'); var isInline = function(node) {return !isBodyContainer(node) && !isList(node) && !isPara(node) && !isTable(node) && !isBlockquote(node); }; var isList = function(node) {return node && /^UL|^OL/.test(node.nodeName.toUpperCase()); }; var isCell = function(node) {return node && /^TD|^TH/.test(node.nodeName.toUpperCase()); }; var isBlockquote = makePredByNodeName('BLOCKQUOTE'); var isBodyContainer = function(node) {return isCell(node) || isBlockquote(node) || isEditable(node); }; var isAnchor = makePredByNodeName('A'); var isParaInline = function(node) {return isInline(node) && !!ancestor(node, isPara); }; var isBodyInline = function(node) {return isInline(node) && !ancestor(node, isPara); }; var isBody = makePredByNodeName('BODY'); var isClosestSibling = function(nodeA, nodeB) {return nodeA.nextSibling === nodeB || nodeA.previousSibling === nodeB; }; var withClosestSiblings = function(node, pred) {pred = pred || func.ok; var siblings = []; if (node.previousSibling && pred(node.previousSibling)) {siblings.push(node.previousSibling); } siblings.push(node); if (node.nextSibling && pred(node.nextSibling)) {siblings.push(node.nextSibling); } return siblings; }; var blankHTML = agent.isMSIE ? '&nbsp;' : '<br>'; var nodeLength = function(node) {if (isText(node)) {return node.nodeValue.length; } return node.childNodes.length; }; var isEmpty = function(node) {var len = nodeLength(node); if (len === 0) {return true; } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {return true; } else if (list.all(node.childNodes, isText) && node.innerHTML === '') {return true; } return false; }; var paddingBlankHTML = function(node) {if (!isVoid(node) && !nodeLength(node)) {node.innerHTML = blankHTML; } }; var ancestor = function(node, pred) {while (node) {if (pred(node)) { return node; } if (isEditable(node)) { break; } node = node.parentNode; } return null; }; var singleChildAncestor = function(node, pred) {node = node.parentNode; while (node) {if (nodeLength(node) !== 1) { break; } if (pred(node)) { return node; } if (isEditable(node)) { break; } node = node.parentNode; } return null; }; var listAncestor = function(node, pred) {pred = pred || func.fail; var ancestors = []; ancestor(node, function(el) {if (!isEditable(el)) {ancestors.push(el); } return pred(el); }); return ancestors; }; var lastAncestor = function(node, pred) {var ancestors = listAncestor(node); return list.last(ancestors.filter(pred)); }; var commonAncestor = function(nodeA, nodeB) {var ancestors = listAncestor(nodeA); for (var n = nodeB; n; n = n.parentNode) {if ($.inArray(n, ancestors) > -1) { return n; } } return null; }; var listPrev = function(node, pred) {pred = pred || func.fail; var nodes = []; while (node) {if (pred(node)) { break; } nodes.push(node); node = node.previousSibling; } return nodes; }; var listNext = function(node, pred) {pred = pred || func.fail; var nodes = []; while (node) {if (pred(node)) { break; } nodes.push(node); node = node.nextSibling; } return nodes; }; var listDescendant = function(node, pred) {var descendents = []; pred = pred || func.ok; (function fnWalk(current) {if (node !== current && pred(current)) {descendents.push(current); } for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {fnWalk(current.childNodes[idx]); } })(node); return descendents; }; var wrap = function(node, wrapperName) {var parent = node.parentNode; var wrapper = $('<' + wrapperName + '>')[0]; parent.insertBefore(wrapper, node); wrapper.appendChild(node); return wrapper; }; var insertAfter = function(node, preceding) {var next = preceding.nextSibling, parent = preceding.parentNode; if (next) {parent.insertBefore(node, next); } else {parent.appendChild(node); } return node; }; var appendChildNodes = function(node, aChild) {$.each(aChild, function(idx, child) {node.appendChild(child); }); return node; }; var isLeftEdgePoint = function(point) {return point.offset === 0; }; var isRightEdgePoint = function(point) {return point.offset === nodeLength(point.node); }; var isEdgePoint = function(point) {return isLeftEdgePoint(point) || isRightEdgePoint(point); }; var isLeftEdgeOf = function(node, ancestor) {while (node && node !== ancestor) {if (position(node) !== 0) {return false; } node = node.parentNode; } return true; }; var isRightEdgeOf = function(node, ancestor) {while (node && node !== ancestor) {if (position(node) !== nodeLength(node.parentNode) - 1) {return false; } node = node.parentNode; } return true; }; var position = function(node) {var offset = 0; while ((node = node.previousSibling)) {offset += 1; } return offset; }; var hasChildren = function(node) {return !!(node && node.childNodes && node.childNodes.length); }; var prevPoint = function(point, isSkipInnerOffset) {var node, offset; if (point.offset === 0) {if (isEditable(point.node)) {return null; } node = point.node.parentNode; offset = position(point.node); } else if (hasChildren(point.node)) {node = point.node.childNodes[point.offset - 1]; offset = nodeLength(node); } else {node = point.node; offset = isSkipInnerOffset ? 0 : point.offset - 1; } return {node: node, offset: offset }; }; var nextPoint = function(point, isSkipInnerOffset) {var node, offset; if (nodeLength(point.node) === point.offset) {if (isEditable(point.node)) {return null; } node = point.node.parentNode; offset = position(point.node) + 1; } else if (hasChildren(point.node)) {node = point.node.childNodes[point.offset]; offset = 0; } else {node = point.node; offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1; } return {node: node, offset: offset }; }; var isSamePoint = function(pointA, pointB) {return pointA.node === pointB.node && pointA.offset === pointB.offset; }; var isVisiblePoint = function(point) {if (isText(point.node) || !hasChildren(point.node) || isEmpty(point.node)) {return true; } var leftNode = point.node.childNodes[point.offset - 1]; var rightNode = point.node.childNodes[point.offset]; if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {return true; } return false; }; var prevPointUntil = function(point, pred) {while (point) {if (pred(point)) {return point; } point = prevPoint(point); } return null; }; var nextPointUntil = function(point, pred) {while (point) {if (pred(point)) {return point; } point = nextPoint(point); } return null; }; var isCharPoint = function(point) {if (!isText(point.node)) {return false; } var ch = point.node.nodeValue.charAt(point.offset - 1); return ch && (ch !== ' ' && ch !== NBSP_CHAR); }; var walkPoint = function(startPoint, endPoint, handler, isSkipInnerOffset) {var point = startPoint; while (point) {handler(point); if (isSamePoint(point, endPoint)) {break; } var isSkipOffset = isSkipInnerOffset && startPoint.node !== point.node && endPoint.node !== point.node; point = nextPoint(point, isSkipOffset); } }; var makeOffsetPath = function(ancestor, node) {var ancestors = listAncestor(node, func.eq(ancestor)); return $.map(ancestors, position).reverse(); }; var fromOffsetPath = function(ancestor, offsets) {var current = ancestor; for (var i = 0, len = offsets.length; i < len; i++) {if (current.childNodes.length <= offsets[i]) {current = current.childNodes[current.childNodes.length - 1]; } else {current = current.childNodes[offsets[i]]; } } return current; }; var splitNode = function(point, options) {var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML; var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint; if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {if (isLeftEdgePoint(point)) {return point.node; } else if (isRightEdgePoint(point)) {return point.node.nextSibling; } } if (isText(point.node)) {return point.node.splitText(point.offset); } else {var childNode = point.node.childNodes[point.offset]; var clone = insertAfter(point.node.cloneNode(false), point.node); appendChildNodes(clone, listNext(childNode)); if (!isSkipPaddingBlankHTML) {paddingBlankHTML(point.node); paddingBlankHTML(clone); } return clone; } }; var splitTree = function(root, point, options) {var ancestors = listAncestor(point.node, func.eq(root)); if (!ancestors.length) {return null; } else if (ancestors.length === 1) {return splitNode(point, options); } return ancestors.reduce(function(node, parent) {if (node === point.node) {node = splitNode(point, options); } return splitNode({node: parent, offset: node ? dom.position(node) : nodeLength(parent) }, options); }); }; var splitPoint = function(point, isInline) {var pred = isInline ? isPara : isBodyContainer; var ancestors = listAncestor(point.node, pred); var topAncestor = list.last(ances\";a.a+=\"tors) || point.node; var splitRoot, container; if (pred(topAncestor)) {splitRoot = ancestors[ancestors.length - 2]; container = topAncestor; } else {splitRoot = topAncestor; container = splitRoot.parentNode; } var pivot = splitRoot && splitTree(splitRoot, point, {isSkipPaddingBlankHTML: isInline, isNotSplitEdgePoint: isInline }); if (!pivot && container === point.node) {pivot = point.node.childNodes[point.offset]; } return {rightNode: pivot, container: container }; }; var create = function(nodeName) {return document.createElement(nodeName); }; var createText = function(text) {return document.createTextNode(text); }; var remove = function(node, isRemoveChild) {if (!node || !node.parentNode) { return; } if (node.removeNode) { return node.removeNode(isRemoveChild); } var parent = node.parentNode; if (!isRemoveChild) {var nodes = []; var i, len; for (i = 0, len = node.childNodes.length; i < len; i++) {nodes.push(node.childNodes[i]); } for (i = 0, len = nodes.length; i < len; i++) {parent.insertBefore(nodes[i], node); } } parent.removeChild(node); }; var removeWhile = function(node, pred) {while (node) {if (isEditable(node) || !pred(node)) {break; } var parent = node.parentNode; remove(node); node = parent; } }; var replace = function(node, nodeName) {if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {return node; } var newNode = create(nodeName); if (node.style.cssText) {newNode.style.cssText = node.style.cssText; } appendChildNodes(newNode, list.from(node.childNodes)); insertAfter(newNode, node); remove(node); return newNode; }; var isTextarea = makePredByNodeName('TEXTAREA'); var value = function($node, stripLinebreaks) {var val = isTextarea($node[0]) ? $node.val() : $node.html(); if (stripLinebreaks) {return val.replace(/[\\\\n\\\\r]/g, ''); } return val; }; var html = function($node, isNewlineOnBlock) {var markup = value($node); if (isNewlineOnBlock) {var regexTag = /<(\\\\/?)(\\\\b(?!!)[^>\\\\s]*)(.*?)(\\\\s*\\\\/?>)/g; markup = markup.replace(regexTag, function(match, endSlash, name) {name = name.toUpperCase(); var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) && !!endSlash; var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name); return match + ((isEndOfInlineContainer || isBlockNode) ? '\\\\n' : ''); }); markup = $.trim(markup); } return markup; }; return {NBSP_CHAR: NBSP_CHAR, ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR, blank: blankHTML, emptyPara: '<p>' + blankHTML + '<\\/p>', makePredByNodeName: makePredByNodeName, isEditable: isEditable, isControlSizing: isControlSizing, buildLayoutInfo: buildLayoutInfo, makeLayoutInfo: makeLayoutInfo, isText: isText, isVoid: isVoid, isPara: isPara, isPurePara: isPurePara, isInline: isInline, isBlock: func.not(isInline), isBodyInline: isBodyInline, isBody: isBody, isParaInline: isParaInline, isList: isList, isTable: isTable, isCell: isCell, isBlockquote: isBlockquote, isBodyContainer: isBodyContainer, isAnchor: isAnchor, isDiv: makePredByNodeName('DIV'), isLi: isLi, isBR: makePredByNodeName('BR'), isSpan: makePredByNodeName('SPAN'), isB: makePredByNodeName('B'), isU: makePredByNodeName('U'), isS: makePredByNodeName('S'), isI: makePredByNodeName('I'), isImg: makePredByNodeName('IMG'), isTextarea: isTextarea, isEmpty: isEmpty, isEmptyAnchor: func.and(isAnchor, isEmpty), isClosestSibling: isClosestSibling, withClosestSiblings: withClosestSiblings, nodeLength: nodeLength, isLeftEdgePoint: isLeftEdgePoint, isRightEdgePoint: isRightEdgePoint, isEdgePoint: isEdgePoint, isLeftEdgeOf: isLeftEdgeOf, isRightEdgeOf: isRightEdgeOf, prevPoint: prevPoint, nextPoint: nextPoint, isSamePoint: isSamePoint, isVisiblePoint: isVisiblePoint, prevPointUntil: prevPointUntil, nextPointUntil: nextPointUntil, isCharPoint: isCharPoint, walkPoint: walkPoint, ancestor: ancestor, singleChildAncestor: singleChildAncestor, listAncestor: listAncestor, lastAncestor: lastAncestor, listNext: listNext, listPrev: listPrev, listDescendant: listDescendant, commonAncestor: commonAncestor, wrap: wrap, insertAfter: insertAfter, appendChildNodes: appendChildNodes, position: position, hasChildren: hasChildren, makeOffsetPath: makeOffsetPath, fromOffsetPath: fromOffsetPath, splitTree: splitTree, splitPoint: splitPoint, create: create, createText: createText, remove: remove, removeWhile: removeWhile, replace: replace, html: html, value: value }; })(); var range = (function() {var textRangeToPoint = function(textRange, isStart) {var container = textRange.parentElement(), offset; var tester = document.body.createTextRange(), prevContainer; var childNodes = list.from(container.childNodes); for (offset = 0; offset < childNodes.length; offset++) {if (dom.isText(childNodes[offset])) {continue; } tester.moveToElementText(childNodes[offset]); if (tester.compareEndPoints('StartToStart', textRange) >= 0) {break; } prevContainer = childNodes[offset]; } if (offset !== 0 && dom.isText(childNodes[offset - 1])) {var textRangeStart = document.body.createTextRange(), curTextNode = null; textRangeStart.moveToElementText(prevContainer || container); textRangeStart.collapse(!prevContainer); curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild; var pointTester = textRange.duplicate(); pointTester.setEndPoint('StartToStart', textRangeStart); var textCount = pointTester.text.replace(/[\\\\r\\\\n]/g, '').length; while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {textCount -= curTextNode.nodeValue.length; curTextNode = curTextNode.nextSibling; } var dummy = curTextNode.nodeValue; if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) && textCount === curTextNode.nodeValue.length) {textCount -= curTextNode.nodeValue.length; curTextNode = curTextNode.nextSibling; } container = curTextNode; offset = textCount; } return {cont: container, offset: offset }; }; var pointToTextRange = function(point) {var textRangeInfo = function(container, offset) {var node, isCollapseToStart; if (dom.isText(container)) {var prevTextNodes = dom.listPrev(container, func.not(dom.isText)); var prevContainer = list.last(prevTextNodes).previousSibling; node =  prevContainer || container.parentNode; offset += list.sum(list.tail(prevTextNodes), dom.nodeLength); isCollapseToStart = !prevContainer; } else {node = container.childNodes[offset] || container; if (dom.isText(node)) {return textRangeInfo(node, 0); } offset = 0; isCollapseToStart = false; } return {node: node, collapseToStart: isCollapseToStart, offset: offset }; }; var textRange = document.body.createTextRange(); var info = textRangeInfo(point.node, point.offset); textRange.moveToElementText(info.node); textRange.collapse(info.collapseToStart); textRange.moveStart('character', info.offset); return textRange; }; var WrappedRange = function(sc, so, ec, eo) {this.sc = sc; this.so = so; this.ec = ec; this.eo = eo; var nativeRange = function() {if (agent.isW3CRangeSupport) {var w3cRange = document.createRange(); w3cRange.setStart(sc, so); w3cRange.setEnd(ec, eo); return w3cRange; } else {var textRange = pointToTextRange({node: sc, offset: so }); textRange.setEndPoint('EndToEnd', pointToTextRange({node: ec, offset: eo })); return textRange; } }; this.getPoints = function() {return {sc: sc, so: so, ec: ec, eo: eo }; }; this.getStartPoint = function() {return {node: sc, offset: so }; }; this.getEndPoint = function() {return {node: ec, offset: eo }; }; this.select = function() {var nativeRng = nativeRange(); if (agent.isW3CRangeSupport) {var selection = document.getSelection(); if (selection.rangeCount > 0) {selection.removeAllRanges(); } selection.addRange(nativeRng); } else {nativeRng.select(); } return this; }; this.normalize = function() {var getVisiblePoint = function(point) {if (!dom.isVisiblePoint(point)) {if (dom.isLeftEdgePoint(point)) {point = dom.nextPointUntil(point, dom.isVisiblePoint); } else {point = dom.prevPointUntil(point, dom.isVisiblePoint); } } return point; }; var startPoint = getVisiblePoint(this.getStartPoint()); var endPoint = getVisiblePoint(this.getEndPoint()); return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset ); }; this.nodes = function(pred, options) {pred = pred || func.ok; var includeAncestor = options && options.includeAncestor; var fullyContains = options && options.fullyContains; var startPoint = this.getStartPoint(); var endPoint = this.getEndPoint(); var nodes = []; var leftEdgeNodes = []; dom.walkPoint(startPoint, endPoint, function(point) {if (dom.isEditable(point.node)) {return; } var node; if (fullyContains) {if (dom.isLeftEdgePoint(point)) {leftEdgeNodes.push(point.node); } if (dom.isRightEdgePoint(point) && list.contains(leftEdgeNodes, point.node)) {node = point.node; } } else if (includeAncestor) {node = dom.ancestor(point.node, pred); } else {node = point.node; } if (node && pred(node)) {nodes.push(node); } }, true); return list.unique(nodes); }; this.commonAncestor = function() {return dom.commonAncestor(sc, ec); }; this.expand = function(pred) {var startAncestor = dom.ancestor(sc, pred); var endAncestor = dom.ancestor(ec, pred); if (!startAncestor && !endAncestor) {return new WrappedRange(sc, so, ec, eo); } var boundaryPoints = this.getPoints(); if (startAncestor) {boundaryPoints.sc = startAncestor; boundaryPoints.so = 0; } if (endAncestor) {boundaryPoints.ec = endAncestor; boundaryPoints.eo = dom.nodeLength(endAncestor); } return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo ); }; this.collapse = function(isCollapseToStart) {if (isCollapseToStart) {return new WrappedRange(sc, so, sc, so); } else {return new WrappedRange(ec, eo, ec, eo); } }; this.splitText = function() {var isSameContainer = sc === ec; var boundaryPoints = this.getPoints(); if (dom.isText(ec) && !dom.isEdgePoint(this.getEndPoint())) {ec.splitText(eo); } if (dom.isText(sc) && !dom.isEdgePoint(this.getStartPoint())) {boundaryPoints.sc = sc.splitText(so); boundaryPoints.so = 0; if (isSameContainer) {boundaryPoints.ec = boundaryPoints.sc; boundaryPoints.eo = eo - so; } } return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo ); }; this.deleteContents = function() {if (this.isCollapsed()) {return this; } var rng = this.splitText(); var nodes = rng.nodes(null, {fullyContains: true }); var point = dom.prevPointUntil(rng.getStartPoint(), function(point) {return !list.contains(nodes, point.node); }); var emptyParents = []; $.each(nodes, function(idx, node) {var parent = node.parentNode; if (point.node !== parent && dom.nodeLength(parent) === 1) {emptyParents.push(parent); } dom.remove(node, false); }); $.each(emptyParents, function(idx, node) {dom.remove(node, false); }); return new WrappedRange(point.node, point.offset, point.node, point.offset ).normalize(); }; var makeIsOn = function(pred) {return function() {var ancestor = dom.ancestor(sc, pred); return !!ancestor && (ancestor === dom.ancestor(ec, pred)); }; }; this.isOnEditable = makeIsOn(dom.isEditable); this.isOnList = makeIsOn(dom.isList); this.isOnAnchor = makeIsOn(dom.isAnchor); this.isOnCell = makeIsOn(dom.isCell); this.isLeftEdgeOf = function(pred) {if (!dom.isLeftEdgePoint(this.getStartPoint())) {return false; } var node = dom.ancestor(this.sc, pred); return node && dom.isLeftEdgeOf(this.sc, node); }; this.isCollapsed = function() {return sc === ec && so === eo; }; this.wrapBodyInlineWithPara = function() {if (dom.isBodyContainer(sc) && dom.isEmpty(sc)) {sc.innerHTML = dom.emptyPara; return new WrappedRange(sc.firstChild, 0, sc.firstChild, 0); } if (dom.isParaInline(sc) || dom.isPara(sc)) {return this.normalize(); } var topAncestor; if (dom.isInline(sc)) {var ancestors = dom.listAncestor(sc, func.not(dom.isInline)); topAncestor = list.last(ancestors); if (!dom.isInline(topAncestor)) {topAncestor = ancestors[ancestors.length - 2] || sc.childNodes[so]; } } else {topAncestor = sc.childNodes[so > 0 ? so - 1 : 0]; } var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse(); inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline)); if (inlineSiblings.length) {var para = dom.wrap(list.head(inlineSiblings), 'p'); dom.appendChildNodes(para, list.tail(inlineSiblings)); } return this.normalize(); }; this.insertNode = function(node) {var rng = this.wrapBodyInlineWithPara().deleteContents(); var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node)); if (info.rightNode) {info.rightNode.parentNode.insertBefore(node, info.rightNode); } else {info.container.appendChild(node); } return node; }; this.pasteHTML = function(markup) {var self = this; var contentsContainer = $('<div><\\/div>').html(markup)[0]; var childNodes = list.from(contentsContainer.childNodes); this.wrapBodyInlineWithPara().deleteContents(); return $.map(childNodes.reverse(), function(childNode) {return self.insertNode(childNode); }).reverse(); }; this.toString = function() {var nativeRng = nativeRange(); return agent.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text; }; this.getWordRange = function(findAfter) {var endPoint = this.getEndPoint(); if (!dom.isCharPoint(endPoint)) {return this; } var startPoint = dom.prevPointUntil(endPoint, function(point) {return !dom.isCharPoint(point); }); if (findAfter) {endPoint = dom.nextPointUntil(endPoint, function(point) {return !dom.isCharPoint(point); }); } return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset ); }; this.bookmark = function(editable) {return {s: {path: dom.makeOffsetPath(editable, sc), offset: so }, e: {path: dom.makeOffsetPath(editable, ec), offset: eo } }; }; this.paraBookmark = function(paras) {return {s: {path: list.tail(dom.makeOffsetPath(list.head(paras), sc)), offset: so }, e: {path: list.tail(dom.makeOffsetPath(list.last(paras), ec)), offset: eo } }; }; this.getClientRects = function() {var nativeRng = nativeRange(); return nativeRng.getClientRects(); }; }; return {create : function(sc, so, ec, eo) {if (!arguments.length) {if (agent.isW3CRangeSupport) {var selection = document.getSelection(); if (!selection || selection.rangeCount === 0) {return null; } else if (dom.isBody(selection.anchorNode)) {return null; } var nativeRng = selection.getRangeAt(0); sc = nativeRng.startContainer; so = nativeRng.startOffset; ec = nativeRng.endContainer; eo = nativeRng.endOffset; } else {var textRange = document.selection.createRange(); var textRangeEnd = textRange.duplicate(); textRangeEnd.collapse(false); var textRangeStart = textRange; textRangeStart.collapse(true); var startPoint = textRangeToPoint(textRangeStart, true), endPoint = textRangeToPoint(textRangeEnd, false); if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) && dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) && endPoint.node.nextSibling === startPoint.node) {startPoint = endPoint; } sc = startPoint.cont; so = startPoint.offset; ec = endPoint.cont; eo = endPoint.offset; } } else if (arguments.length === 2) {ec = sc; eo = so; } return new WrappedRange(sc, so, ec, eo); }, createFromNode: function(node) {var sc = node; var so = 0; var ec = node; var eo = dom.nodeLength(ec); if (dom.isVoid(sc)) {so = dom.listPrev(sc).length - 1; sc = sc.parentNode; } if (dom.isBR(ec)) {eo = dom.listPrev(ec).length - 1; ec = ec.parentNode; } else if (dom.isVoid(ec)) {eo = dom.listPrev(ec).length; ec = ec.parentNode; } return this.create(sc, so, ec, eo); }, createFromNodeBefore: function(node) {return this.createFromNode(node).collapse(true); }, createFromNodeAfter: function(node) {return this.createFromNode(node).collapse(); }, createFromBookmark : function(editable, bookmark) {var sc = dom.fromOffsetPath(editable, bookmark.s.path); var so = bookmark.s.offset; var ec = dom.fromOffsetPath(editable, bookmark.e.path); var eo = bookmark.e.offset; return new WrappedRange(sc, so, ec, eo); }, createFromParaBookmark: function(bookmark, paras) {var so = bookmark.s.offset; var eo = bookmark.e.offset; var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path); var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path); return new WrappedRange(sc, so, ec, eo); } }; })(); var defaults = {version: '0.6.9', options: {defaultTextColor: '#212121', defaultBackColor: '#ddd', followingToolbar: true, otherStaticBarClass: \\\"staticTop\\\", width: null, height: null, minHeight: null, maxHeight: null, focus: false, tabsize: 4, styleWithS\";a.a+=\"pan: true, disableLinkTarget: false, disableDragAndDrop: false, disableResizeEditor: false, shortcuts: true, placeholder: false, prettifyHtml: true, iconPrefix: '', icons: {font: {bold: 'format_bold', italic: 'format_italic', underline: 'format_underlined', clear: 'clear', height: 'format_size', strikethrough: 'strikethrough_s', superscript: 'vertical_align_top', subscript: 'vertical_align_bottom'}, image: {image: 'image', floatLeft: 'format_align_left', floatRight: 'format_align_right', floatNone: 'format_align_justify', shapeRounded: 'crop_3_2', shapeCircle: 'panorama_fish_eye', shapeThumbnail: 'collections', bordered: 'border_outer', shapeNone: 'image', remove: 'delete'}, link: {link: 'insert_link', unlink: 'clear', edit: 'create'}, table: {table: 'border_all'}, hr: {insert: 'add'}, style: {style: 'border_color'}, lists: {unordered: 'format_list_bulleted', ordered: 'format_list_numbered'}, options: {help: 'help', fullscreen: 'settings_overscan', codeview: 'code'}, paragraph: {paragraph: 'format_textdirection_l_to_r', outdent: 'format_indent_decrease', indent: 'format_indent_increase', left: 'format_align_left', center: 'format_align_center', right: 'format_align_right', justify: 'format_align_justify'}, color: {recent: 'format_color_text'}, history: {undo: 'undo', redo: 'redo'}, misc: {check: 'check'} }, codemirror: {mode: 'text/html', htmlMode: true, indentWithTabs: true, tabSize: 4, lineNumbers: true, theme: 'monokai', maxHighlightLength: 'Infinity'}, lang: 'en-US', direction: null, toolbar: [['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['fontname', ['fontname']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['height', ['height']], ['table', ['table']], ['insert', ['link', 'picture', 'hr']], ['view', ['fullscreen', 'codeview']], ['help', ['help']] ], plugin : {}, airMode: false, airPopover: [['color', ['color']], ['font', ['bold', 'underline', 'clear']], ['para', ['ul', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture']] ], styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'], defaultFontName: 'Roboto', fontNames: ['Roboto', 'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Times New Roman', 'Verdana'], fontNamesIgnoreCheck: [], fontSizes: ['12', '13', '14', '15', '16', '17', '18', '25', '37'], colors: [['#fafafa', '#efebe9', '#7e57c2', '#ab47bc', '#5c6bc0', '#42a5f5', '#26c6da', '#66bb6a', '#9ccc65', '#ffee58', '#ffca28', '#ffa726', '#ff7043', '#ef5350', '#ec407a'], ['#f5f5f5', '#d7ccc8', '#673ab7', '#9c27b0', '#3f51b5', '#2196f3', '#00bcd4', '#4caf50', '#8bc34a', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722', '#f44336', '#e91e63'], ['#eeeeee', '#bcaaa4', '#5e35b1', '#8e24aa', '#3949ab', '#1e88e5', '#00acc1', '#43a047', '#7cb342', '#fdd835', '#ffb300', '#fb8c00', '#f4511e', '#e53935', '#d81b60'], ['#e0e0e0', '#a1887f', '#512da8', '#7b1fa2', '#303f9f', '#1976d2', '#0097a7', '#388e3c', '#689f38', '#fbc02d', '#ffa000', '#f57c00', '#e64a19', '#d32f2f', '#c2185b'], ['#bdbdbd', '#8d6e63', '#4527a0', '#6a1b9a', '#283593', '#1565c0', '#00838f', '#2e7d32', '#558b2f', '#f9a825', '#ff8f00', '#ef6c00', '#d84315', '#c62828', '#ad1457'], ['#9e9e9e', '#795548', '#311b92', '#4a148c', '#1a237e', '#0d47a1', '#006064', '#1b5e20', '#33691e', '#f57f17', '#ff6f00', '#e65100', '#bf360c', '#b71c1c', '#880e4f'], ['#757575', '#6d4c41', '#b388ff', '#ea80fc', '#8c9eff', '#82b1ff', '#84ffff', '#b9f6ca', '#ccff90', '#ffff8d', '#ffe57f', '#ffd180', '#ff9e80', '#ff8a80', '#ff80ab'], ['#616161', '#5d4037', '#7c4dff', '#e040fb', '#536dfe', '#448aff', '#18ffff', '#69f0ae', '#b2ff59', '#ffff00', '#ffd740', '#ffab40', '#ff6e40', '#ff5252', '#ff4081'], ['#424242', '#4e342e', '#651fff', '#d500f9', '#3d5afe', '#2979ff', '#00e5ff', '#00e676', '#76ff03', '#ffea00', '#ffc400', '#ff9100', '#ff3d00', '#ff1744', '#f50057'], ['#212121', '#3e2723', '#6200ea', '#aa00ff', '#304ffe', '#2962ff', '#00b8d4', '#00c853', '#64dd17', '#ffd600', '#ffab00', '#ff6d00', '#dd2c00', '#d50000', '#c51162'], ], colorTitles: [['grey lighten5', 'brown lighten5', 'deep-purple lighten1', 'purple lighten1', 'indigo lighten1', 'blue lighten1', 'cyan lighten1', 'green lighten1', 'light-green lighten1', 'yellow lighten1', 'amber lighten1', 'orange lighten1', 'deep-orange lighten1', 'red lighten1', 'pink lighten1'], ['grey lighten4', 'brown lighten4', 'deep-purple',          'purple',          'indigo',          'blue',          'cyan',          'green',          'light-green',          'yellow',          'amber',          'orange',          'deep-orange',          'red',          'pink'         ], ['grey lighten3', 'brown lighten3', 'deep-purple darken1',  'purple darken1',  'indigo darken1',  'blue darken1',  'cyan darken1',  'green darken1',  'light-green darken1',  'yellow darken1',  'amber darken1',  'orange darken1',  'deep-orange darken1',  'red darken1',  'pink darken1' ], ['grey lighten2', 'brown lighten2', 'deep-purple darken2',  'purple darken2',  'indigo darken2',  'blue darken2',  'cyan darken2',  'green darken2',  'light-green darken2',  'yellow darken2',  'amber darken2',  'orange darken2',  'deep-orange darken2',  'red darken2',  'pink darken2' ], ['grey lighten1', 'brown lighten1', 'deep-purple darken3',  'purple darken3',  'indigo darken3',  'blue darken3',  'cyan darken3',  'green darken3',  'light-green darken3',  'yellow darken3',  'amber darken3',  'orange darken3',  'deep-orange darken3',  'red darken3',  'pink darken3' ], ['grey',          'brown',          'deep-purple darken4',  'purple darken4',  'indigo darken4',  'blue darken4',  'cyan darken4',  'green darken4',  'light-green darken4',  'yellow darken4',  'amber darken4',  'orange darken4',  'deep-orange darken4',  'red darken4',  'pink darken4' ], ['grey darken1',  'brown darken1',  'deep-purple accent1',  'purple accent1',  'indigo accent1',  'blue accent1',  'cyan accent1',  'green accent1',  'light-green accent1',  'yellow accent1',  'amber accent1',  'orange accent1',  'deep-orange accent1',  'red accent1',  'pink accent1' ], ['grey darken2',  'brown darken2',  'deep-purple accent2',  'purple accent2',  'indigo accent2',  'blue accent2',  'cyan accent2',  'green accent2',  'light-green accent2',  'yellow accent2',  'amber accent2',  'orange accent2',  'deep-orange accent2',  'red accent2',  'pink accent2' ], ['grey darken3',  'brown darken3',  'deep-purple accent3',  'purple accent3',  'indigo accent3',  'blue accent3',  'cyan accent3',  'green accent3',  'light-green accent3',  'yellow accent3',  'amber accent3',  'orange accent3',  'deep-orange accent3',  'red accent3',  'pink accent3' ], ['grey darken4',  'brown darken4',  'deep-purple accent4',  'purple accent4',  'indigo accent4',  'blue accent4',  'cyan accent4',  'green accent4',  'light-green accent4',  'yellow accent4',  'amber accent4',  'orange accent4',  'deep-orange accent4',  'red accent4',  'pink accent4' ], ], lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'], insertTableMaxSize: {col: 12, row: 10 }, maximumImageFileSize: null, oninit: null, onfocus: null, onblur: null, onenter: null, onkeyup: null, onkeydown: null, onImageUpload: null, onImageUploadError: null, onMediaDelete: null, onToolbarClick: null, onsubmit: null, onCreateLink: function(sLinkUrl) {if (sLinkUrl.indexOf('@') !== -1 && sLinkUrl.indexOf(':') === -1) {sLinkUrl =  'mailto:' + sLinkUrl; } return sLinkUrl; }, keyMap: {pc: {'ENTER': 'insertParagraph', 'CTRL+Z': 'undo', 'CTRL+Y': 'redo', 'TAB': 'tab', 'SHIFT+TAB': 'untab', 'CTRL+B': 'bold', 'CTRL+I': 'italic', 'CTRL+U': 'underline', 'CTRL+SHIFT+S': 'strikethrough', 'CTRL+BACKSLASH': 'removeFormat', 'CTRL+SHIFT+L': 'justifyLeft', 'CTRL+SHIFT+E': 'justifyCenter', 'CTRL+SHIFT+R': 'justifyRight', 'CTRL+SHIFT+J': 'justifyFull', 'CTRL+SHIFT+NUM7': 'insertUnorderedList', 'CTRL+SHIFT+NUM8': 'insertOrderedList', 'CTRL+LEFTBRACKET': 'outdent', 'CTRL+RIGHTBRACKET': 'indent', 'CTRL+NUM0': 'formatPara', 'CTRL+NUM1': 'formatH1', 'CTRL+NUM2': 'formatH2', 'CTRL+NUM3': 'formatH3', 'CTRL+NUM4': 'formatH4', 'CTRL+NUM5': 'formatH5', 'CTRL+NUM6': 'formatH6', 'CTRL+ENTER': 'insertHorizontalRule', 'CTRL+K': 'showLinkDialog'}, mac: {'ENTER': 'insertParagraph', 'CMD+Z': 'undo', 'CMD+SHIFT+Z': 'redo', 'TAB': 'tab', 'SHIFT+TAB': 'untab', 'CMD+B': 'bold', 'CMD+I': 'italic', 'CMD+U': 'underline', 'CMD+SHIFT+S': 'strikethrough', 'CMD+BACKSLASH': 'removeFormat', 'CMD+SHIFT+L': 'justifyLeft', 'CMD+SHIFT+E': 'justifyCenter', 'CMD+SHIFT+R': 'justifyRight', 'CMD+SHIFT+J': 'justifyFull', 'CMD+SHIFT+NUM7': 'insertUnorderedList', 'CMD+SHIFT+NUM8': 'insertOrderedList', 'CMD+LEFTBRACKET': 'outdent', 'CMD+RIGHTBRACKET': 'indent', 'CMD+NUM0': 'formatPara', 'CMD+NUM1': 'formatH1', 'CMD+NUM2': 'formatH2', 'CMD+NUM3': 'formatH3', 'CMD+NUM4': 'formatH4', 'CMD+NUM5': 'formatH5', 'CMD+NUM6': 'formatH6', 'CMD+ENTER': 'insertHorizontalRule', 'CMD+K': 'showLinkDialog'} } }, lang: {'en-US': {font: {bold: 'Bold', italic: 'Italic', underline: 'Underline', clear: 'Remove Font Style', height: 'Line Height', name: 'Font Family', strikethrough: 'Strikethrough', subscript: 'Subscript', superscript: 'Superscript', size: 'Font Size'}, image: {image: 'Picture', insert: 'Insert Image', resizeFull: 'Resize Full', resizeHalf: 'Resize Half', resizeQuarter: 'Resize Quarter', floatLeft: 'Float Left', floatRight: 'Float Right', floatNone: 'Float None', shapeRounded: 'Shape: Rounded', shapeCircle: 'Shape: Circle', bordered: 'Bordered', shapeThumbnail: 'Shape: Thumbnail', shapeNone: 'Shape: None', dragImageHere: 'Drag image or text here', dropImage: 'Drop image or Text', selectFromFiles: 'Select from files', maximumFileSize: 'Maximum file size', maximumFileSizeError: 'Maximum file size exceeded.', url: 'Image URL', remove: 'Remove Image'}, link: {link: 'Link', insert: 'Insert Link', unlink: 'Unlink', edit: 'Edit', textToDisplay: 'Text to display', url: 'To what URL should this link go?', openInNewWindow: 'Open in new window'}, table: {table: 'Table', striped: 'Striped', hoverable: 'Hoverable', responsive: 'Responsive', bordered: 'Bordered'}, hr: {insert: 'Insert Horizontal Rule'}, style: {style: 'Style', normal: 'Normal', blockquote: 'Quote', pre: 'Code', h1: 'Header 1', h2: 'Header 2', h3: 'Header 3', h4: 'Header 4', h5: 'Header 5', h6: 'Header 6'}, lists: {unordered: 'Unordered list', ordered: 'Ordered list'}, options: {help: 'Help', fullscreen: 'Full Screen', codeview: 'Code View'}, paragraph: {paragraph: 'Paragraph', outdent: 'Outdent', indent: 'Indent', left: 'Align left', center: 'Align center', right: 'Align right', justify: 'Justify full'}, color: {recent: 'Recent Color', more: 'More Color', background: 'Back', foreground: 'Text', transparent: 'Transparent', setTransparent: 'Transparent', reset: 'Reset', resetToDefault: 'Default'}, shortcut: {shortcuts: 'Keyboard shortcuts', close: 'Close', textFormatting: 'Text formatting', action: 'Action', paragraphFormatting: 'Paragraph formatting', documentStyle: 'Document Style', extraKeys: 'Extra keys'}, history: {undo: 'Undo', redo: 'Redo'} } } }; var async = (function() {var readFileAsDataURL = function(file) {return $.Deferred(function(deferred) {$.extend(new FileReader(), {onload: function(e) {var sDataURL = e.target.result; deferred.resolve(sDataURL); }, onerror: function() {deferred.reject(this); } }).readAsDataURL(file); }).promise(); }; var createImage = function(sUrl, filename) {return $.Deferred(function(deferred) {var $img = $('<img>'); $img.one('load', function() {$img.off('error abort'); deferred.resolve($img); }).one('error abort', function() {$img.off('load').detach(); deferred.reject($img); }).css({display: 'none'}).appendTo(document.body).attr({'src': sUrl, 'data-filename': filename }); }).promise(); }; return {readFileAsDataURL: readFileAsDataURL, createImage: createImage }; })(); var key = (function() {var keyMap = {'BACKSPACE': 8, 'TAB': 9, 'ENTER': 13, 'SPACE': 32, 'NUM0': 48, 'NUM1': 49, 'NUM2': 50, 'NUM3': 51, 'NUM4': 52, 'NUM5': 53, 'NUM6': 54, 'NUM7': 55, 'NUM8': 56, 'B': 66, 'E': 69, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'R': 82, 'S': 83, 'U': 85, 'Y': 89, 'Z': 90, 'SLASH': 191, 'LEFTBRACKET': 219, 'BACKSLASH': 220, 'RIGHTBRACKET': 221 }; return {isEdit: function(keyCode) {return list.contains([8, 9, 13, 32], keyCode); }, isMove: function(keyCode) {return list.contains([37, 38, 39, 40], keyCode); }, nameFromCode: func.invertObject(keyMap), code: keyMap }; })(); var History = function($editable) {var stack = [], stackOffset = -1; var editable = $editable[0]; var makeSnapshot = function() {var rng = range.create(); var emptyBookmark = {s: {path: [], offset: 0}, e: {path: [], offset: 0}}; return {contents: $editable.html(), bookmark: (rng ? rng.bookmark(editable) : emptyBookmark) }; }; var applySnapshot = function(snapshot) {if (snapshot.contents !== null) {$editable.html(snapshot.contents); } if (snapshot.bookmark !== null) {range.createFromBookmark(editable, snapshot.bookmark).select(); } }; this.undo = function() {if (0 < stackOffset) {stackOffset--; applySnapshot(stack[stackOffset]); } }; this.redo = function() {if (stack.length - 1 > stackOffset) {stackOffset++; applySnapshot(stack[stackOffset]); } }; this.recordUndo = function() {stackOffset++; if (stack.length > stackOffset) {stack = stack.slice(0, stackOffset); } stack.push(makeSnapshot()); }; this.recordUndo(); }; var Style = function() {var jQueryCSS = function($obj, propertyNames) {if (agent.jqueryVersion < 1.9) {var result = {}; $.each(propertyNames, function(idx, propertyName) {result[propertyName] = $obj.css(propertyName); }); return result; } return $obj.css.call($obj, propertyNames); }; this.stylePara = function(rng, styleInfo) {$.each(rng.nodes(dom.isPara, {includeAncestor: true }), function(idx, para) {$(para).css(styleInfo); }); }; this.styleNodes = function(rng, options) {rng = rng.splitText(); var nodeName = options && options.nodeName || 'SPAN'; var expandClosestSibling = !!(options && options.expandClosestSibling); var onlyPartialContains = !!(options && options.onlyPartialContains); if (rng.isCollapsed()) {return [rng.insertNode(dom.create(nodeName))]; } var pred = dom.makePredByNodeName(nodeName); var nodes = $.map(rng.nodes(dom.isText, {fullyContains: true }), function(text) {return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName); }); if (expandClosestSibling) {if (onlyPartialContains) {var nodesInRange = rng.nodes(); pred = func.and(pred, function(node) {return list.contains(nodesInRange, node); }); } return $.map(nodes, function(node) {var siblings = dom.withClosestSiblings(node, pred); var head = list.head(siblings); var tails = list.tail(siblings); $.each(tails, function(idx, elem) {dom.appendChildNodes(head, elem.childNodes); dom.remove(elem); }); return list.head(siblings); }); } else {return nodes; } }; this.current = function(rng, target) {var $cont = $(dom.isText(rng.sc) ? rng.sc.parentNode : rng.sc); var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height']; var styleInfo = jQueryCSS($cont, properties) || {}; styleInfo['font-size'] = parseInt(styleInfo['font-size'], 10); styleInfo['font-bold'] = document.queryCommandState('bold') ? 'bold' : 'normal'; styleInfo['font-italic'] = document.queryCommandState('italic') ? 'italic' : 'normal'; styleInfo['font-underline'] = document.queryCommandState('underline') ? 'underline' : 'normal'; styleInfo['font-strikethrough'] = document.queryCommandState('strikeThrough') ? 'strikethrough' : 'normal'; styleInfo['font-superscript'] = document.queryCommandState('superscript') ? 'superscript' : 'normal'; styleInfo['font-subscript'] = document.queryCommandState('subscript') ? 'subscript' : 'normal'; if (!rng.isOnList()) {styleInfo['list-style'] = 'none'; } else {var aOrderedType = ['circle', 'disc', 'disc-leading-zero', 'square']; var isUnordered = $.inArray(styleInfo['list-style-type'], aOrderedType) > -1; styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered'; } var para = dom.ancestor(rng.sc, dom.isPara); if (para && para.style['line-height']) {styleInfo['line-height'] = para.style.lineHeight; } else {var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10); styleInfo['line-height'] = lineHeight.toFixed(1); } styleInfo.image = dom.isImg(target) && target; styleInfo.anchor = rng.isOnAncho\";a.a+=\"r() && dom.ancestor(rng.sc, dom.isAnchor); styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable); styleInfo.range = rng; return styleInfo; }; }; var Bullet = function() {this.insertOrderedList = function() {this.toggleList('OL'); }; this.insertUnorderedList = function() {this.toggleList('UL'); }; this.indent = function() {var self = this; var rng = range.create().wrapBodyInlineWithPara(); var paras = rng.nodes(dom.isPara, { includeAncestor: true }); var clustereds = list.clusterBy(paras, func.peq2('parentNode')); $.each(clustereds, function(idx, paras) {var head = list.head(paras); if (dom.isLi(head)) {self.wrapList(paras, head.parentNode.nodeName); } else {$.each(paras, function(idx, para) {$(para).css('marginLeft', function(idx, val) {return (parseInt(val, 10) || 0) + 25; }); }); } }); rng.select(); }; this.outdent = function() {var self = this; var rng = range.create().wrapBodyInlineWithPara(); var paras = rng.nodes(dom.isPara, { includeAncestor: true }); var clustereds = list.clusterBy(paras, func.peq2('parentNode')); $.each(clustereds, function(idx, paras) {var head = list.head(paras); if (dom.isLi(head)) {self.releaseList([paras]); } else {$.each(paras, function(idx, para) {$(para).css('marginLeft', function(idx, val) {val = (parseInt(val, 10) || 0); return val > 25 ? val - 25 : ''; }); }); } }); rng.select(); }; this.toggleList = function(listName) {var self = this; var rng = range.create().wrapBodyInlineWithPara(); var paras = rng.nodes(dom.isPara, { includeAncestor: true }); var bookmark = rng.paraBookmark(paras); var clustereds = list.clusterBy(paras, func.peq2('parentNode')); if (list.find(paras, dom.isPurePara)) {var wrappedParas = []; $.each(clustereds, function(idx, paras) {wrappedParas = wrappedParas.concat(self.wrapList(paras, listName)); }); paras = wrappedParas; } else {var diffLists = rng.nodes(dom.isList, {includeAncestor: true }).filter(function(listNode) {return !$.nodeName(listNode, listName); }); if (diffLists.length) {$.each(diffLists, function(idx, listNode) {dom.replace(listNode, listName); }); } else {paras = this.releaseList(clustereds, true); } } range.createFromParaBookmark(bookmark, paras).select(); }; this.wrapList = function(paras, listName) {var head = list.head(paras); var last = list.last(paras); var prevList = dom.isList(head.previousSibling) && head.previousSibling; var nextList = dom.isList(last.nextSibling) && last.nextSibling; var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last); paras = $.map(paras, function(para) {return dom.isPurePara(para) ? dom.replace(para, 'LI') : para; }); dom.appendChildNodes(listNode, paras); if (nextList) {dom.appendChildNodes(listNode, list.from(nextList.childNodes)); dom.remove(nextList); } return paras; }; this.releaseList = function(clustereds, isEscapseToBody) {var releasedParas = []; $.each(clustereds, function(idx, paras) {var head = list.head(paras); var last = list.last(paras); var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) : head.parentNode; var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {node: last.parentNode, offset: dom.position(last) + 1 }, {isSkipPaddingBlankHTML: true }) : null; var middleList = dom.splitTree(headList, {node: head.parentNode, offset: dom.position(head) }, {isSkipPaddingBlankHTML: true }); paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) : list.from(middleList.childNodes).filter(dom.isLi); if (isEscapseToBody || !dom.isList(headList.parentNode)) {paras = $.map(paras, function(para) {return dom.replace(para, 'P'); }); } $.each(list.from(paras).reverse(), function(idx, para) {dom.insertAfter(para, headList); }); var rootLists = list.compact([headList, middleList, lastList]); $.each(rootLists, function(idx, rootList) {var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList)); $.each(listNodes.reverse(), function(idx, listNode) {if (!dom.nodeLength(listNode)) {dom.remove(listNode, true); } }); }); releasedParas = releasedParas.concat(paras); }); return releasedParas; }; }; var Typing = function() {var bullet = new Bullet(); this.insertTab = function($editable, rng, tabsize) {var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR)); rng = rng.deleteContents(); rng.insertNode(tab, true); rng = range.create(tab, tabsize); rng.select(); }; this.insertParagraph = function() {var rng = range.create(); rng = rng.deleteContents(); rng = rng.wrapBodyInlineWithPara(); var splitRoot = dom.ancestor(rng.sc, dom.isPara); var nextPara; if (splitRoot) {if (dom.isEmpty(splitRoot) && dom.isLi(splitRoot)) {bullet.toggleList(splitRoot.parentNode.nodeName); return; } else {nextPara = dom.splitTree(splitRoot, rng.getStartPoint()); var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor); emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor)); $.each(emptyAnchors, function(idx, anchor) {dom.remove(anchor); }); } } else {var next = rng.sc.childNodes[rng.so]; nextPara = $(dom.emptyPara)[0]; if (next) {rng.sc.insertBefore(nextPara, next); } else {rng.sc.appendChild(nextPara); } } range.create(nextPara, 0).normalize().select(); }; }; var Table = function() {this.tab = function(rng, isShift) {var cell = dom.ancestor(rng.commonAncestor(), dom.isCell); var table = dom.ancestor(cell, dom.isTable); var cells = dom.listDescendant(table, dom.isCell); var nextCell = list[isShift ? 'prev' : 'next'](cells, cell); if (nextCell) {range.create(nextCell, 0).select(); } }; this.createTable = function(tOptions) {var tds = [], tdHTML; var theaders = []; var colCount = tOptions[0]; var rowCount = tOptions[1]; var classes = tOptions.slice(2, tOptions.length); for (var idxCol = 0; idxCol < colCount; idxCol++) {tds.push('<td>(item)<\\/td>'); theaders.push('<th>header<\\/th>'); } tdHTML = tds.join(''); theaders = theaders.join(''); var trs = [], trHTML; for (var idxRow = 0; idxRow < rowCount; idxRow++) {trs.push('<tr>' + tdHTML + '<\\/tr>'); } trHTML = trs.join(''); return $('<table class=\\\"' + classes.join(' ') + '\\\"><thead><tr>' + theaders + '<\\/tr><\\/thead><tbody>' + trHTML + '<\\/tbody><\\/table>')[0]; }; }; var KEY_BOGUS = 'bogus'; var Editor = function(handler) {var style = new Style(); var table = new Table(); var typing = new Typing(); var bullet = new Bullet(); this.createRange = function($editable) {this.focus($editable); return range.create(); }; this.saveRange = function($editable, thenCollapse) {this.focus($editable); $editable.data('range', range.create()); if (thenCollapse) {range.create().collapse().select(); } }; this.saveNode = function($editable) {var copy = []; for (var key  = 0, len = $editable[0].childNodes.length; key < len; key++) {copy.push($editable[0].childNodes[key]); } $editable.data('childNodes', copy); }; this.restoreRange = function($editable) {var rng = $editable.data('range'); if (rng) {rng.select(); this.focus($editable); } }; this.restoreNode = function($editable) {$editable.html(''); var child = $editable.data('childNodes'); for (var index = 0, len = child.length; index < len; index++) {$editable[0].appendChild(child[index]); } }; this.reset = function($editable) {$editable.html(''); }; this.html = function($editable, html) {$editable.html(html); }; this.getHTML = function($editable) {return $editable.html(); }; this.currentStyle = function(target) {var rng = range.create(); return rng ? rng.isOnEditable() && style.current(rng, target) : false; }; var triggerOnBeforeChange = function($editable) {var $holder = dom.makeLayoutInfo($editable).holder(); handler.bindCustomEvent($holder, $editable.data('callbacks'), 'before.command')($editable.html(), $editable); }; var triggerOnChange = function($editable) {var $holder = dom.makeLayoutInfo($editable).holder(); handler.bindCustomEvent($holder, $editable.data('callbacks'), 'change')($editable.html(), $editable); }; this.undo = function($editable) {triggerOnBeforeChange($editable); $editable.data('NoteHistory').undo(); triggerOnChange($editable); }; this.redo = function($editable) {triggerOnBeforeChange($editable); $editable.data('NoteHistory').redo(); triggerOnChange($editable); }; var self = this; var beforeCommand = this.beforeCommand = function($editable) {triggerOnBeforeChange($editable); self.focus($editable); }; var afterCommand = this.afterCommand = function($editable, isPreventTrigger) {$editable.data('NoteHistory').recordUndo(); if (!isPreventTrigger) {triggerOnChange($editable); } }; var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'formatBlock', 'removeFormat', 'backColor', 'foreColor', 'fontName']; for (var idx = 0, len = commands.length; idx < len; idx ++) {this[commands[idx]] = (function(sCmd) {return function($editable, value) {beforeCommand($editable); document.execCommand(sCmd, false, value); afterCommand($editable, true); }; })(commands[idx]); } this.insertHorizontalRule = function() {var hrNode = $('<div />'); hrNode.addClass('divider'); range.create().insertNode(hrNode[0]); }; this.tab = function($editable, options) {var rng = this.createRange($editable); if (rng.isCollapsed() && rng.isOnCell()) {table.tab(rng); } else {beforeCommand($editable); typing.insertTab($editable, rng, options.tabsize); afterCommand($editable); } }; this.untab = function($editable) {var rng = this.createRange($editable); if (rng.isCollapsed() && rng.isOnCell()) {table.tab(rng, true); } }; this.insertParagraph = function($editable) {beforeCommand($editable); typing.insertParagraph($editable); afterCommand($editable); }; this.insertOrderedList = function($editable) {beforeCommand($editable); bullet.insertOrderedList($editable); afterCommand($editable); }; this.insertUnorderedList = function($editable) {beforeCommand($editable); bullet.insertUnorderedList($editable); afterCommand($editable); }; this.indent = function($editable) {beforeCommand($editable); bullet.indent($editable); afterCommand($editable); }; this.outdent = function($editable) {beforeCommand($editable); bullet.outdent($editable); afterCommand($editable); }; this.insertImage = function($editable, sUrl, filename) {async.createImage(sUrl, filename).then(function($image) {beforeCommand($editable); $image.css({display: '', width: Math.min($editable.width(), $image.width()) }); range.create().insertNode($image[0]); range.createFromNodeAfter($image[0]).select(); afterCommand($editable); }).fail(function() {var $holder = dom.makeLayoutInfo($editable).holder(); handler.bindCustomEvent($holder, $editable.data('callbacks'), 'image.upload.error')(); }); }; this.insertNode = function($editable, node) {beforeCommand($editable); range.create().insertNode(node); range.createFromNodeAfter(node).select(); afterCommand($editable); }; this.insertText = function($editable, text) {beforeCommand($editable); var textNode = range.create().insertNode(dom.createText(text)); range.create(textNode, dom.nodeLength(textNode)).select(); afterCommand($editable); }; this.pasteHTML = function($editable, markup) {beforeCommand($editable); var contents = range.create().pasteHTML(markup); range.createFromNodeAfter(list.last(contents)).select(); afterCommand($editable); }; this.formatBlock = function($editable, tagName) {beforeCommand($editable); tagName = agent.isMSIE ? '<' + tagName + '>' : tagName; document.execCommand('FormatBlock', false, tagName); afterCommand($editable); }; this.formatPara = function($editable) {beforeCommand($editable); this.formatBlock($editable, 'P'); afterCommand($editable); }; for (var idx = 1; idx <= 6; idx ++) {this['formatH' + idx] = function(idx) {return function($editable) {this.formatBlock($editable, 'H' + idx); }; }(idx); }; this.fontSize = function($editable, value) {var rng = range.create(); var isCollapsed = rng.isCollapsed(); if (isCollapsed) {var spans = style.styleNodes(rng); var firstSpan = list.head(spans); $(spans).css({'font-size': value + 'px'}); if (firstSpan && !dom.nodeLength(firstSpan)) {firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR; range.createFromNodeAfter(firstSpan.firstChild).select(); $editable.data(KEY_BOGUS, firstSpan); } } else {beforeCommand($editable); $(style.styleNodes(rng)).css({'font-size': value + 'px'}); afterCommand($editable); } }; this.removeBogus = function($editable) {var bogusNode = $editable.data(KEY_BOGUS); if (!bogusNode) {return; } var textNode = list.find(list.from(bogusNode.childNodes), dom.isText); var bogusCharIdx = textNode.nodeValue.indexOf(dom.ZERO_WIDTH_NBSP_CHAR); if (bogusCharIdx !== -1) {textNode.deleteData(bogusCharIdx, 1); } if (dom.isEmpty(bogusNode)) {dom.remove(bogusNode); } $editable.removeData(KEY_BOGUS); }; this.lineHeight = function($editable, value) {beforeCommand($editable); style.stylePara(range.create(), {lineHeight: value }); afterCommand($editable); }; this.unlink = function($editable) {var rng = this.createRange($editable); if (rng.isOnAnchor()) {var anchor = dom.ancestor(rng.sc, dom.isAnchor); rng = range.createFromNode(anchor); rng.select(); beforeCommand($editable); document.execCommand('unlink'); afterCommand($editable); } }; this.createLink = function($editable, linkInfo, options) {var linkUrl = linkInfo.url; var linkText = linkInfo.text; var isNewWindow = linkInfo.newWindow; var rng = linkInfo.range; var isTextChanged = rng.toString() !== linkText; beforeCommand($editable); if (options.onCreateLink) {linkUrl = options.onCreateLink(linkUrl); } var anchors = []; if (isTextChanged) {var anchor = rng.insertNode($('<A>' + linkText + '<\\/A>')[0]); anchors.push(anchor); } else {anchors = style.styleNodes(rng, {nodeName: 'A', expandClosestSibling: true, onlyPartialContains: true }); } $.each(anchors, function(idx, anchor) {$(anchor).attr('href', linkUrl); if (isNewWindow) {$(anchor).attr('target', '_blank'); } else {$(anchor).removeAttr('target'); } }); var startRange = range.createFromNodeBefore(list.head(anchors)); var startPoint = startRange.getStartPoint(); var endRange = range.createFromNodeAfter(list.last(anchors)); var endPoint = endRange.getEndPoint(); range.create(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset ).select(); afterCommand($editable); }; this.getLinkInfo = function($editable) {this.focus($editable); var rng = range.create().expand(dom.isAnchor); var $anchor = $(list.head(rng.nodes(dom.isAnchor))); return {range: rng, text: rng.toString(), isNewWindow: $anchor.length ? $anchor.attr('target') === '_blank' : false, url: $anchor.length ? $anchor.attr('href') : ''}; }; this.color = function($editable, sObjColor) {var oColor = JSON.parse(sObjColor); var foreColor = oColor.foreColor, backColor = oColor.backColor; beforeCommand($editable); if (foreColor) { document.execCommand('foreColor', false, foreColor); } if (backColor) { document.execCommand('backColor', false, backColor); } afterCommand($editable); }; this.insertTable = function($editable, sDim) {var tOptions = sDim.split('x'); beforeCommand($editable); var rng = range.create().deleteContents(); rng.insertNode(table.createTable(tOptions)); afterCommand($editable); }; this.floatMe = function($editable, value, $target) {beforeCommand($editable); $target.css('float', value); afterCommand($editable); }; this.imageShape = function($editable, value, $target) {beforeCommand($editable); $target.removeClass('img-rounded img-circle img-thumbnail img-bordered'); if (value) {$target.addClass(value); } afterCommand($editable); }; this.imageClass = function($editable, value, $target) {beforeCommand($editable); if (value) {if ($target.hasClass(value)) {$target.removeClass(value); } else {$target.addClass(value); } } afterCommand($editable); }; this.resize = function($editable, value, $target) {beforeCommand($editable); $target.css({width: value * 100 + '%', height: ''}); afterCommand($editable); }; this.resizeTo = function(pos, $target, bKeepRatio) {var imageSize; if (bKeepRatio) {var newRatio = pos.y / pos.x; var ratio = $target.data('ratio'); imageSize = {width: ratio > newRatio ? pos.x : pos.y / ratio, height: ratio > newRatio ? pos.x * ratio : pos.y }; } else {imageSize = {width: pos.x, height: pos.y }; } $target.css(imageSize); }; this.removeMedia = function($editable, value, $target) {beforeCommand($editable); $target.detach(); handler.bindCustomEvent($(), $editable.data('callbacks'), 'media.delete')($target, $editable); afterCommand($editable); }; this.focus = function($editable) {$e\";a.a+=\"ditable.focus(); if (agent.isFF && !range.create().isOnEditable()) {range.createFromNode($editable[0]) .normalize() .collapse() .select(); } }; this.isEmpty = function($editable) {return dom.isEmpty($editable[0]) || dom.emptyPara === $editable.html(); }; }; var Button = function() {this.update = function($container, styleInfo) {var checkDropdownMenu = function($btn, value) {$btn.find('.dropdown-menu li').each(function() {var div = $(this).children('div'); var currentValue = div.data('value'); if ((currentValue + '') === (value + '')) {div.children('i').removeClass('transparent'); } else {div.children('i').addClass('transparent'); } }); }; var btnState = function(selector, pred) {var $btn = $container.find(selector); $btn.toggleClass('active', pred()); }; if (styleInfo.image) {var $img = $(styleInfo.image); btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-rounded\\\"]', function() {return $img.hasClass('img-rounded'); }); btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-circle\\\"]', function() {return $img.hasClass('img-circle'); }); btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-thumbnail\\\"]', function() {return $img.hasClass('img-thumbnail'); }); btnState('.btn[data-event=\\\"imageClass\\\"][data-value=\\\"img-bordered\\\"]', function() {return $img.hasClass('img-bordered'); }); btnState('.btn[data-event=\\\"imageShape\\\"]:not([data-value])', function() {return !$img.is('.img-rounded, .img-circle, .img-thumbnail, .img-bordered'); }); var imgFloat = $img.css('float'); btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"left\\\"]', function() {return imgFloat === 'left'; }); btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"right\\\"]', function() {return imgFloat === 'right'; }); btnState('.btn[data-event=\\\"floatMe\\\"][data-value=\\\"none\\\"]', function() {return imgFloat !== 'left' && imgFloat !== 'right'; }); var style = $img.attr('style'); btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"1\\\"]', function() {return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*100%/.test(style); }); btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"0.5\\\"]', function() {return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*50%/.test(style); }); btnState('.btn[data-event=\\\"resize\\\"][data-value=\\\"0.25\\\"]', function() {return !!/(^|\\\\s)(max-)?width\\\\s*:\\\\s*25%/.test(style); }); return; } var $fontname = $container.find('.note-fontname[data-name=fontname]'); if ($fontname.length) {var selectedFont = styleInfo['font-family']; if (!!selectedFont) {var list = selectedFont.split(','); for (var i = 0, len = list.length; i < len; i++) {selectedFont = list[i].replace(/[\\\\'\\\\\\\"]/g, '').replace(/\\\\s+$/, '').replace(/^\\\\s+/, ''); if (agent.isFontInstalled(selectedFont)) {break; } } $fontname.find('.note-current-fontname').text(selectedFont); checkDropdownMenu($fontname, selectedFont); } } var $fontsize = $container.find('.note-fontsize[data-name=fontsize]'); $fontsize.find('.note-current-fontsize').text(styleInfo['font-size']); checkDropdownMenu($fontsize, parseFloat(styleInfo['font-size'])); var $lineHeight = $container.find('.note-height[data-name=lineheight]'); checkDropdownMenu($lineHeight, parseFloat(styleInfo['line-height'])); btnState('.btn[data-event=\\\"bold\\\"]', function() {return styleInfo['font-bold'] === 'bold'; }); btnState('.btn[data-event=\\\"italic\\\"]', function() {return styleInfo['font-italic'] === 'italic'; }); btnState('.btn[data-event=\\\"underline\\\"]', function() {return styleInfo['font-underline'] === 'underline'; }); btnState('.btn[data-event=\\\"strikethrough\\\"]', function() {return styleInfo['font-strikethrough'] === 'strikethrough'; }); btnState('.btn[data-event=\\\"superscript\\\"]', function() {return styleInfo['font-superscript'] === 'superscript'; }); btnState('.btn[data-event=\\\"subscript\\\"]', function() {return styleInfo['font-subscript'] === 'subscript'; }); btnState('.btn[data-event=\\\"justifyLeft\\\"]', function() {return styleInfo['text-align'] === 'left' || styleInfo['text-align'] === 'start'; }); btnState('.btn[data-event=\\\"justifyCenter\\\"]', function() {return styleInfo['text-align'] === 'center'; }); btnState('.btn[data-event=\\\"justifyRight\\\"]', function() {return styleInfo['text-align'] === 'right'; }); btnState('.btn[data-event=\\\"justifyFull\\\"]', function() {return styleInfo['text-align'] === 'justify'; }); btnState('.btn[data-event=\\\"insertUnorderedList\\\"]', function() {return styleInfo['list-style'] === 'unordered'; }); btnState('.btn[data-event=\\\"insertOrderedList\\\"]', function() {return styleInfo['list-style'] === 'ordered'; }); }; this.updateRecentColor = function(button, eventName, value) {var $color = $(button).closest('.note-color'); var $recentColor = $color.find('.note-recent-color'); var colorInfo = JSON.parse($recentColor.attr('data-value')); var sKey = eventName === 'backColor' ? 'background-color' : 'color'; colorInfo[eventName] = value; $recentColor.attr('data-value', JSON.stringify(colorInfo)); $recentColor.css(sKey, value); }; }; var Toolbar = function() {var button = new Button(); this.update = function($toolbar, styleInfo) {button.update($toolbar, styleInfo); }; this.updateRecentColor = function(buttonNode, eventName, value) {button.updateRecentColor(buttonNode, eventName, value); }; this.activate = function($toolbar) {$toolbar.find('button, .btn') .not('.btn[data-event=\\\"codeview\\\"]') .removeClass('disabled'); }; this.deactivate = function($toolbar) {$toolbar.find('button, .btn') .not('.btn[data-event=\\\"codeview\\\"]') .addClass('disabled'); }; this.updateFullscreen = function($container, bFullscreen) {var $btn = $container.find('.btn[data-event=\\\"fullscreen\\\"]'); $btn.toggleClass('active', bFullscreen); }; this.updateCodeview = function($container, isCodeview) {var $btn = $container.find('.btn[data-event=\\\"codeview\\\"]'); $btn.toggleClass('active', isCodeview); if (isCodeview) {this.deactivate($container); } else {this.activate($container); } }; this.get = function($editable, name) {var $toolbar = dom.makeLayoutInfo($editable).toolbar(); return $toolbar.find('[data-name=' + name + ']'); }; this.setButtonState = function($editable, name, isActive) {isActive = (isActive === false) ? false : true; var $button = this.get($editable, name); $button.toggleClass('active', isActive); }; }; var EDITABLE_PADDING = 24; var Statusbar = function() {var $document = $(document); this.attach = function(layoutInfo, options) {if (!options.disableResizeEditor) {layoutInfo.statusbar().on('mousedown', hStatusbarMousedown); } }; var hStatusbarMousedown = function(event) {event.preventDefault(); event.stopPropagation(); var $editable = dom.makeLayoutInfo(event.target).editable(); var editableTop = $editable.offset().top - $document.scrollTop(); var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); var options = layoutInfo.editor().data('options'); $document.on('mousemove', function(event) {var nHeight = event.clientY - (editableTop + EDITABLE_PADDING); nHeight = (options.minHeight > 0) ? Math.max(nHeight, options.minHeight) : nHeight; nHeight = (options.maxHeight > 0) ? Math.min(nHeight, options.maxHeight) : nHeight; $editable.height(nHeight); }).one('mouseup', function() {$document.off('mousemove'); }); }; }; var Popover = function() {var button = new Button(); var posFromPlaceholder = function(placeholder, isAirMode) {var $placeholder = $(placeholder); var pos = isAirMode ? $placeholder.offset() : $placeholder.position(); var height = $placeholder.outerHeight(true); return {left: pos.left, top: pos.top + height }; }; var showPopover = function($popover, pos) {$popover.css({display: 'block', left: pos.left, top: pos.top }); }; var PX_POPOVER_ARROW_OFFSET_X = 20; this.update = function($popover, styleInfo, isAirMode) {button.update($popover, styleInfo); var $linkPopover = $popover.find('.note-link-popover'); if (styleInfo.anchor) {var $anchor = $linkPopover.find('a'); var href = $(styleInfo.anchor).attr('href'); var target = $(styleInfo.anchor).attr('target'); $anchor.attr('href', href).html(href); if (!target) {$anchor.removeAttr('target'); } else {$anchor.attr('target', '_blank'); } showPopover($linkPopover, posFromPlaceholder(styleInfo.anchor, isAirMode)); } else {$linkPopover.hide(); } var $imagePopover = $popover.find('.note-image-popover'); if (styleInfo.image) {showPopover($imagePopover, posFromPlaceholder(styleInfo.image, isAirMode)); } else {$imagePopover.hide(); } var $airPopover = $popover.find('.note-air-popover'); if (isAirMode && !styleInfo.range.isCollapsed()) {var rect = list.last(styleInfo.range.getClientRects()); if (rect) {var bnd = func.rect2bnd(rect); showPopover($airPopover, {left: Math.max(bnd.left + bnd.width / 2 - PX_POPOVER_ARROW_OFFSET_X, 0), top: bnd.top + bnd.height }); } } else {$airPopover.hide(); } }; this.updateRecentColor = function(button, eventName, value) {button.updateRecentColor(button, eventName, value); }; this.hide = function($popover) {$popover.children().hide(); }; }; var Handle = function(handler) {var $document = $(document); var hHandleMousedown = function(event) {if (dom.isControlSizing(event.target)) {event.preventDefault(); event.stopPropagation(); var layoutInfo = dom.makeLayoutInfo(event.target), $handle = layoutInfo.handle(), $popover = layoutInfo.popover(), $editable = layoutInfo.editable(), $editor = layoutInfo.editor(); var target = $handle.find('.note-control-selection').data('target'), $target = $(target), posStart = $target.offset(), scrollTop = $document.scrollTop(); var isAirMode = $editor.data('options').airMode; $document.on('mousemove', function(event) {handler.invoke('editor.resizeTo', {x: event.clientX - posStart.left, y: event.clientY - (posStart.top - scrollTop) }, $target, !event.shiftKey); handler.invoke('handle.update', $handle, {image: target}, isAirMode); handler.invoke('popover.update', $popover, {image: target}, isAirMode); }).one('mouseup', function() {$document.off('mousemove'); handler.invoke('editor.afterCommand', $editable); }); if (!$target.data('ratio')) {$target.data('ratio', $target.height() / $target.width()); } } }; this.attach = function(layoutInfo) {layoutInfo.handle().on('mousedown', hHandleMousedown); }; this.update = function($handle, styleInfo, isAirMode) {var $selection = $handle.find('.note-control-selection'); if (styleInfo.image) {var $image = $(styleInfo.image); var pos = isAirMode ? $image.offset() : $image.position(); var imageSize = {w: $image.outerWidth(true), h: $image.outerHeight(true) }; $selection.css({display: 'block', left: pos.left, top: pos.top, width: imageSize.w, height: imageSize.h }).data('target', styleInfo.image); var sizingText = imageSize.w + 'x' + imageSize.h; $selection.find('.note-control-selection-info').text(sizingText); } else {$selection.hide(); } }; this.hide = function($handle) {$handle.children().hide(); }; }; var Fullscreen = function(handler) {var $window = $(window); var $scrollbar = $('html, body'); this.toggle = function(layoutInfo) {var $editor = layoutInfo.editor(), $toolbar = layoutInfo.toolbar(), $editable = layoutInfo.editable(), $codable = layoutInfo.codable(); var resize = function(size) {$editable.css('height', size.h); $codable.css('height', size.h); if ($codable.data('cmeditor')) {$codable.data('cmeditor').setsize(null, size.h); } }; $editor.toggleClass('fullscreen'); var isFullscreen = $editor.hasClass('fullscreen'); if (isFullscreen) {$editable.data('orgheight', $editable.css('height')); $window.on('resize', function() {resize({h: $window.height() - $toolbar.outerHeight() }); }).trigger('resize'); $scrollbar.css('overflow', 'hidden'); $toolbar.css('top', 0); } else {$window.off('resize'); resize({h: $editable.data('orgheight') }); $scrollbar.css('overflow', 'visible'); } handler.invoke('toolbar.updateFullscreen', $toolbar, isFullscreen); }; }; var CodeMirror; if (agent.hasCodeMirror) {if (agent.isSupportAmd) {require(['CodeMirror'], function(cm) {CodeMirror = cm; }); } else {CodeMirror = window.CodeMirror; } } var Codeview = function(handler) {this.sync = function(layoutInfo) {var isCodeview = handler.invoke('codeview.isActivated', layoutInfo); if (isCodeview && agent.hasCodeMirror) {layoutInfo.codable().data('cmEditor').save(); } }; this.isActivated = function(layoutInfo) {var $editor = layoutInfo.editor(); return $editor.hasClass('codeview'); }; this.toggle = function(layoutInfo) {if (this.isActivated(layoutInfo)) {this.deactivate(layoutInfo); } else {this.activate(layoutInfo); } }; this.activate = function(layoutInfo) {var $editor = layoutInfo.editor(), $toolbar = layoutInfo.toolbar(), $editable = layoutInfo.editable(), $codable = layoutInfo.codable(), $popover = layoutInfo.popover(), $handle = layoutInfo.handle(); var options = $editor.data('options'); var codeString = dom.html($editable, false); function beautifyHTML(code, level, insideLastBlock, dictionary) {var openTag = code.indexOf('<'); var closeTag = code.indexOf('>'); var chunk; if (openTag === 0) {chunk = code.substring(0, closeTag + 1); code = code.substring(closeTag + 1); if (chunk.indexOf(\\\"<\\/\\\") === 0) {level--; nsideLastBlock = false; } else {if (insideLastBlock) {level++; } var found = false; for (var i = 0; i < dictionary.length; i++) {if (chunk.indexOf(dictionary[i]) === 0) {found = true; break; } } if (!found) {insideLastBlock = true; } else {insideLastBlock = false; } } } else {chunk = code.substring(0, openTag); code = code.substring(openTag); if (insideLastBlock) {level++; } insideLastBlock = false; } chunk = new Array(level + 1).join('    ') + chunk.trim(); if (code.length === 0) {return chunk; } return chunk + \\\"\\\\n\\\" + beautifyHTML(code.trim(), level, insideLastBlock, dictionary); } var selfCloseTags = ['<img', '<br', '<hr']; codeString = beautifyHTML(codeString, 0, false, selfCloseTags); $codable.val(codeString); var buttonHeight = $toolbar.find('.btn[data-event=codeview]').height(); var areaHeight = $(window).height() - buttonHeight; $codable.height($editable.height()); handler.invoke('toolbar.updateCodeview', $toolbar, true); handler.invoke('popover.hide', $popover); handler.invoke('handle.hide', $handle); $editor.addClass('codeview'); $codable.focus(); if (agent.hasCodeMirror) {var cmEditor = CodeMirror.fromTextArea($codable[0], options.codemirror); if (options.codemirror.tern) {var server = new CodeMirror.TernServer(options.codemirror.tern); cmEditor.ternServer = server; cmEditor.on('cursorActivity', function(cm) {server.updateArgHints(cm); }); } if ($editor.hasClass('fullscreen')) {cmEditor.setSize(null, areaHeight); } else {cmEditor.setSize(null, $editable.outerHeight()); } $codable.data('cmEditor', cmEditor); } }; this.deactivate = function(layoutInfo) {var $holder = layoutInfo.holder(), $editor = layoutInfo.editor(), $toolbar = layoutInfo.toolbar(), $editable = layoutInfo.editable(), $codable = layoutInfo.codable(); var options = $editor.data('options'); if (agent.hasCodeMirror) {var cmEditor = $codable.data('cmEditor'); $codable.val(cmEditor.getValue()); cmEditor.toTextArea(); } var value = dom.value($codable, options.prettifyHtml) || dom.emptyPara; var isChange = $editable.html() !== value; $editable.html(value); $editable.height(options.height ? $codable.height() : 'auto'); $editor.removeClass('codeview'); if (isChange) {handler.bindCustomEvent($holder, $editable.data('callbacks'), 'change')($editable.html(), $editable); } $editable.focus(); handler.invoke('toolbar.updateCodeview', $toolbar, false); }; }; var DragAndDrop = function(handler) {var $document = $(document); this.attach = function(layoutInfo, options) {if (options.airMode || options.disableDragAndDrop) {$document.on('drop', function(e) {e.preventDefault(); }); } else {this.attachDragAndDropEvent(layoutInfo, options); } }; this.attachDragAndDropEvent = function(layoutInfo, options) {var collection = $(), $editor = layoutInfo.editor(), $dropzone = layoutInfo.dropzone(), $dropzoneMessage = $dropzone.find('.note-dropzone-message'); $document.on('dragenter', function(e) {var isCodeview = handler.invoke('codeview.isActivated', layoutInfo); var hasEditorSize = $editor.width() > 0 && $editor.height() > 0; if (!isCodeview && !collection.length && hasEditorSize) {$editor.addClass('dragover'); $dropzone.width($editor.width()); $dropzone.height($editor.height()); $dropzoneMessage.text(options.langInfo.image.dragImageHere); } collection = collection.add(e.target); }).on('dragleave', function(e) {collection = collection.not(e.target); if (!collection.length) {$editor.removeClass('dragover'); } }).on('drop', function() {collection = $(); $editor.removeClass('dragover'); }); $dropzone.o\";a.a+=\"n('dragenter', function() {$dropzone.addClass('hover'); $dropzoneMessage.text(options.langInfo.image.dropImage); }).on('dragleave', function() {$dropzone.removeClass('hover'); $dropzoneMessage.text(options.langInfo.image.dragImageHere); }); $dropzone.on('drop', function(event) {var dataTransfer = event.originalEvent.dataTransfer; var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {event.preventDefault(); layoutInfo.editable().focus(); handler.insertImages(layoutInfo, dataTransfer.files); } else {var insertNodefunc = function() {layoutInfo.holder().materialnote('insertNode', this); }; for (var i = 0, len = dataTransfer.types.length; i < len; i++) {var type = dataTransfer.types[i]; var content = dataTransfer.getData(type); if (type.toLowerCase().indexOf('text') > -1) {layoutInfo.holder().materialnote('pasteHTML', content); } else {$(content).each(insertNodefunc); } } } }).on('dragover', false); }; }; var Clipboard = function(handler) {var $paste; this.attach = function(layoutInfo) {if (window.clipboardData) {$paste = $('<div />').attr('contenteditable', true).css({position : 'absolute', left : -100000, 'opacity' : 0 }); layoutInfo.editable().after($paste); $paste.one('paste', hPasteClipboardImage); layoutInfo.editable().on('keydown', function(e) {if (e.ctrlKey && e.keyCode === 86) {handler.invoke('saveRange', layoutInfo.editable()); if ($paste) {$paste.focus(); } } }); } layoutInfo.editable().on('paste', hPasteClipboardImage); }; var hPasteClipboardImage = function(event) {var clipboardData = event.originalEvent.clipboardData; var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); var $editable = layoutInfo.editable(); if (!clipboardData || !clipboardData.items || !clipboardData.items.length) {var callbacks = $editable.data('callbacks'); if (!callbacks.onImageUpload) {return; } setTimeout(function() {if (!$paste) {return; } var imgNode = $paste[0].firstChild; if (!imgNode) {return; } handler.invoke('restoreRange', $editable); if (!dom.isImg(imgNode)) {handler.invoke('pasteHTML', $editable, $paste.html()); } else {var datauri = imgNode.src; var data = atob(datauri.split(',')[1]); var array = new Uint8Array(data.length); for (var i = 0; i < data.length; i++) {array[i] = data.charCodeAt(i); } var blob = new Blob([array], { type : 'image/png' }); blob.name = 'clipboard.png'; handler.invoke('focus', $editable); handler.insertImages(layoutInfo, [blob]); } $paste.remove(); }, 0); return; } var item = list.head(clipboardData.items); var isClipboardImage = item.kind === 'file' && item.type.indexOf('image/') !== -1; if (isClipboardImage) {handler.insertImages(layoutInfo, [item.getAsFile()]); } handler.invoke('editor.afterCommand', $editable); }; }; var LinkDialog = function(handler) {var toggleBtn = function($btn, isEnable) {$btn.toggleClass('disabled', !isEnable); $btn.attr('disabled', !isEnable); }; var bindEnterKey = function($input, $btn) {$input.on('keypress', function(event) {if (event.keyCode === key.code.ENTER) {$btn.trigger('click'); } }); }; this.showLinkDialog = function($editable, $dialog, linkInfo) {return $.Deferred(function(deferred) {var $linkDialog = $dialog.find('.note-link-dialog'); var $linkText = $linkDialog.find('.note-link-text'), $linkTextLabel = $linkText.next('label'), $linkUrl = $linkDialog.find('.note-link-url'), $linkBtn = $linkDialog.find('.note-link-btn'), $closeBtn = $linkDialog.find('.btnClose'); var $openInNewWindow = $linkDialog.find('input[type=checkbox]'); $linkDialog.openModal(); $linkText.val(linkInfo.text); if (linkInfo.text.length > 0) $linkTextLabel.addClass('active'); $linkText.on('keyup', function() {toggleBtn($linkBtn, $linkText.val() && $linkUrl.val()); linkInfo.text = $linkText.val(); }); $closeBtn.click(function(event) {event.preventDefault(); $linkDialog.closeModal(); }); if (!linkInfo.url) {linkInfo.url = linkInfo.text || 'http://'; toggleBtn($linkBtn, linkInfo.text); } $linkUrl.on('keyup', function() {toggleBtn($linkBtn, $linkText.val() && $linkUrl.val()); if (!linkInfo.text) {$linkTextLabel.addClass('active'); $linkText.val($linkUrl.val()); } }).val(linkInfo.url).trigger('focus').trigger('select'); bindEnterKey($linkUrl, $linkBtn); bindEnterKey($linkText, $linkBtn); $openInNewWindow.prop('checked', linkInfo.newWindow); $linkBtn.one('click', function(event) {event.preventDefault(); deferred.resolve({range: linkInfo.range, url: $linkUrl.val(), text: $linkText.val(), newWindow: $openInNewWindow.is(':checked') }); $('.note-link-text').val(''); $('.note-link-text').next('label').removeClass('active'); $('.note-link-url').val(''); $linkDialog.closeModal(); }); }).promise(); }; this.show = function(layoutInfo) {var $editor = layoutInfo.editor(), $dialog = layoutInfo.dialog(), $editable = layoutInfo.editable(), $popover = layoutInfo.popover(), linkInfo = handler.invoke('editor.getLinkInfo', $editable); var options = $editor.data('options'); handler.invoke('editor.saveRange', $editable); this.showLinkDialog($editable, $dialog, linkInfo).then(function(linkInfo) {handler.invoke('editor.restoreRange', $editable); handler.invoke('editor.createLink', $editable, linkInfo, options); handler.invoke('popover.hide', $popover); }).fail(function() {handler.invoke('editor.restoreRange', $editable); }); }; }; var ImageDialog = function(handler) {var toggleBtn = function($btn, isEnable) {$btn.toggleClass('disabled', !isEnable); $btn.attr('disabled', !isEnable); }; var bindEnterKey = function($input, $btn) {$input.on('keypress', function(event) {if (event.keyCode === key.code.ENTER) {$btn.trigger('click'); } }); }; this.show = function(layoutInfo) {var $dialog = layoutInfo.dialog(), $editable = layoutInfo.editable(); handler.invoke('editor.saveRange', $editable); this.showImageDialog($editable, $dialog).then(function(data) {handler.invoke('editor.restoreRange', $editable); if (typeof data === 'string') {handler.invoke('editor.insertImage', $editable, data); } else {handler.insertImages(layoutInfo, data); } }).fail(function() {handler.invoke('editor.restoreRange', $editable); }); }; this.showImageDialog = function($editable, $dialog) {return $.Deferred(function(deferred) {var $imageDialog = $dialog.find('.note-image-dialog'); var $imageInput = $dialog.find('.note-image-input'), $imageUrl = $dialog.find('.note-image-url'), $imageBtn = $dialog.find('.note-image-btn'), $closeBtn = $imageDialog.find('.btnClose'); $imageDialog.openModal(); $imageInput.replaceWith($imageInput.clone() .on('change', function() {deferred.resolve(this.files || this.value); $imageUrl.val(''); $imageDialog.closeModal(); deferred.resolve(); }) .val('') ); $imageBtn.click(function(event) {event.preventDefault(); deferred.resolve($imageUrl.val()); $imageUrl.val(''); $imageDialog.closeModal(); deferred.resolve(); }); $closeBtn.click(function(event) {event.preventDefault(); $imageDialog.closeModal(); }); $imageUrl.on('keyup paste', function(event) {var url; if (event.type === 'paste') {url = event.originalEvent.clipboardData.getData('text'); } else {url = $imageUrl.val(); } toggleBtn($imageBtn, url); }); bindEnterKey($imageUrl, $imageBtn); }); }; }; var HelpDialog = function(handler) {this.showHelpDialog = function($editable, $dialog) {return $.Deferred(function(deferred) {var $helpDialog = $dialog.find('.note-help-dialog'); $helpDialog.openModal(); deferred.resolve(); }).promise(); }; this.show = function(layoutInfo) {var $dialog = layoutInfo.dialog(), $editable = layoutInfo.editable(); handler.invoke('editor.saveRange', $editable, true); this.showHelpDialog($editable, $dialog).then(function() {handler.invoke('editor.restoreRange', $editable); }); }; }; var EventHandler = function() {var modules = this.modules = {editor: new Editor(this), toolbar: new Toolbar(this), statusbar: new Statusbar(this), popover: new Popover(this), handle: new Handle(this), fullscreen: new Fullscreen(this), codeview: new Codeview(this), dragAndDrop: new DragAndDrop(this), clipboard: new Clipboard(this), linkDialog: new LinkDialog(this), imageDialog: new ImageDialog(this), helpDialog: new HelpDialog(this) }; this.invoke = function() {var moduleAndMethod = list.head(list.from(arguments)); var args = list.tail(list.from(arguments)); var splits = moduleAndMethod.split('.'); var hasSeparator = splits.length > 1; var moduleName = hasSeparator && list.head(splits); var methodName = hasSeparator ? list.last(splits) : list.head(splits); var module = this.getModule(moduleName); var method = module[methodName]; return method && method.apply(module, args); }; this.getModule = function(moduleName) {return this.modules[moduleName] || this.modules.editor; }; var bindCustomEvent = this.bindCustomEvent = function($holder, callbacks, eventNamespace) {return function() {var callback = callbacks[func.namespaceToCamel(eventNamespace, 'on')]; if (callback) {callback.apply($holder[0], arguments); } return $holder.trigger('materialnote.' + eventNamespace, arguments); }; }; this.insertImages = function(layoutInfo, files) {var $editor = layoutInfo.editor(), $editable = layoutInfo.editable(), $holder = layoutInfo.holder(); var callbacks = $editable.data('callbacks'); var options = $editor.data('options'); if (callbacks.onImageUpload) {bindCustomEvent($holder, callbacks, 'image.upload')(files); } else {$.each(files, function(idx, file) {var filename = file.name; if (options.maximumImageFileSize && options.maximumImageFileSize < file.size) {bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError); } else {async.readFileAsDataURL(file).then(function(sDataURL) {modules.editor.insertImage($editable, sDataURL, filename); }).fail(function() {bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError); }); } }); } }; var commands = {showLinkDialog: function(layoutInfo) {modules.linkDialog.show(layoutInfo); }, showImageDialog: function(layoutInfo) {modules.imageDialog.show(layoutInfo); }, showHelpDialog: function(layoutInfo) {modules.helpDialog.show(layoutInfo); }, fullscreen: function(layoutInfo) {modules.fullscreen.toggle(layoutInfo); }, codeview: function(layoutInfo) {modules.codeview.toggle(layoutInfo); } }; var hMousedown = function(event) {if (dom.isImg(event.target)) {event.preventDefault(); } }; var hKeyupAndMouseup = function(event) {var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); modules.editor.removeBogus(layoutInfo.editable()); hToolbarAndPopoverUpdate(event); }; var hToolbarAndPopoverUpdate = function(event) {setTimeout(function() {var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); var styleInfo = modules.editor.currentStyle(event.target); if (!styleInfo) { return; } var isAirMode = layoutInfo.editor().data('options').airMode; if (!isAirMode) {modules.toolbar.update(layoutInfo.toolbar(), styleInfo); } modules.popover.update(layoutInfo.popover(), styleInfo, isAirMode); modules.handle.update(layoutInfo.handle(), styleInfo, isAirMode); }, 0); }; var hScroll = function(event) {var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target); modules.popover.hide(layoutInfo.popover()); modules.handle.hide(layoutInfo.handle()); }; var hToolbarAndPopoverMousedown = function(event) {var $btn = $(event.target).closest('[data-event]'); if ($btn.length) {event.preventDefault(); } }; var hToolbarAndPopoverClick = function(event) {var $btn = $(event.target).closest('[data-event]'); if ($btn.length) {var eventName = $btn.attr('data-event'), value = $btn.attr('data-value'), hide = $btn.attr('data-hide'); var layoutInfo = dom.makeLayoutInfo(event.target); var $target; if ($.inArray(eventName, ['resize', 'floatMe', 'removeMedia', 'imageShape', 'imageClass']) !== -1) {var $selection = layoutInfo.handle().find('.note-control-selection'); $target = $($selection.data('target')); } if (hide) {$btn.parents('.popover').hide(); } if ($.isFunction($.materialnote.pluginEvents[eventName])) {$.materialnote.pluginEvents[eventName](event, modules.editor, layoutInfo, value); } else if (modules.editor[eventName]) {var $editable = layoutInfo.editable(); $editable.focus(); modules.editor[eventName]($editable, value, $target); event.preventDefault(); } else if (commands[eventName]) {commands[eventName].call(this, layoutInfo); event.preventDefault(); } if ($.inArray(eventName, ['backColor', 'foreColor']) !== -1) {var options = layoutInfo.editor().data('options', options); var module = options.airMode ? modules.popover : modules.toolbar; module.updateRecentColor(list.head($btn), eventName, value); } hToolbarAndPopoverUpdate(event); } }; var gridUnit = 26; var hDimensionPickerMove = function(event, options) {var $picker = $(event.target.parentNode); var $dropdown = $picker.parent(); var $dimensionDisplay = $picker.next(); var $catcher = $picker.find('.note-dimension-picker-mousecatcher'); var $highlighted = $picker.find('.note-dimension-picker-highlighted'); var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted'); var $hoverableOption = $dropdown.find(\\\"[id$='-hoverable']\\\"); var $borderedOption = $dropdown.find(\\\"[id$='-bordered']\\\"); var $stripedOption = $dropdown.find(\\\"[id$='-striped']\\\"); var $responsiveOption = $dropdown.find(\\\"[id$='-responsive']\\\"); var posOffset; if (event.offsetX === undefined) {var posCatcher = $(event.target).offset(); posOffset = {x: event.pageX - posCatcher.left, y: event.pageY - posCatcher.top }; } else {posOffset = {x: event.offsetX, y: event.offsetY }; } var dim = {c: Math.ceil(posOffset.x / gridUnit) || 1, r: Math.ceil(posOffset.y / gridUnit) || 1 }; var tableOptions = []; if ($hoverableOption.is(':checked')) tableOptions.push('hoverable'); if ($borderedOption.is(':checked')) tableOptions.push('bordered'); if ($stripedOption.is(':checked')) tableOptions.push('striped'); if ($responsiveOption.is(':checked')) tableOptions.push('responsive-table'); $highlighted.css({ width: (dim.c * gridUnit) + 'px', height: (dim.r * gridUnit) + 'px' }); $catcher.attr('data-value', dim.c + 'x' + dim.r + 'x' + tableOptions.join('x')); $unhighlighted.css({ width: (options.insertTableMaxSize * gridUnit) + 'px'}); if (3 < dim.r && dim.r < options.insertTableMaxSize.row) {$unhighlighted.css({ height: ((dim.r + 1) * gridUnit) + 'px'}); } $dimensionDisplay.html(dim.c + ' x ' + dim.r); }; this.bindKeyMap = function(layoutInfo, keyMap) {var $editor = layoutInfo.editor(); var $editable = layoutInfo.editable(); $editable.on('keydown', function(event) {var keys = []; if (event.metaKey) { keys.push('CMD'); } if (event.ctrlKey && !event.altKey) { keys.push('CTRL'); } if (event.shiftKey) { keys.push('SHIFT'); } var keyName = key.nameFromCode[event.keyCode]; if (keyName) {keys.push(keyName); } var pluginEvent; var keyString = keys.join('+'); var eventName = keyMap[keyString]; if (eventName) {pluginEvent = $.materialnote.pluginEvents[keyString]; if ($.isFunction(pluginEvent)) {if (pluginEvent(event, modules.editor, layoutInfo)) {return false; } } pluginEvent = $.materialnote.pluginEvents[eventName]; if ($.isFunction(pluginEvent)) {pluginEvent(event, modules.editor, layoutInfo); } else if (modules.editor[eventName]) {modules.editor[eventName]($editable, $editor.data('options')); event.preventDefault(); } else if (commands[eventName]) {commands[eventName].call(this, layoutInfo); event.preventDefault(); } } else if (key.isEdit(event.keyCode)) {modules.editor.afterCommand($editable); } }); }; this.attach = function(layoutInfo, options) {if (options.shortcuts) {this.bindKeyMap(layoutInfo, options.keyMap[agent.isMac ? 'mac' : 'pc']); } layoutInfo.editable().on('mousedown', hMousedown); layoutInfo.editable().on('keyup mouseup', hKeyupAndMouseup); layoutInfo.editable().on('scroll', hScroll); modules.clipboard.attach(layoutInfo, options); modules.handle.attach(layoutInfo, options); layoutInfo.popover().on('click', hToolbarAndPopoverClick); layoutInfo.popover().on('mousedown', hToolbarAndPopoverMousedown); modules.dragAndDrop.attach(layoutInfo, options); if (!options.airMode) {layoutInfo.toolbar().on('click', hToolbarAndPopoverClick); layoutInfo.toolbar().on('mousedown', hToolbarAndPopoverMousedown); modules.statusbar.attach(layoutInfo, options); } var $catcherContainer = options.airMode ? layoutInfo.popover() : layoutInfo.toolbar(); var $catcher = $catcherContainer.find('.note-dimension-picker-mousecatcher'); $catcher.\";a.a+=\"css({width: options.insertTableMaxSize.col * gridUnit + 'px', height: options.insertTableMaxSize.row * gridUnit + 'px'}).on('mousemove', function(event) {hDimensionPickerMove(event, options); }); layoutInfo.editor().data('options', options); if (!agent.isMSIE) {setTimeout(function() {document.execCommand('styleWithCSS', 0, options.styleWithSpan); }, 0); } var history = new History(layoutInfo.editable()); layoutInfo.editable().data('NoteHistory', history); layoutInfo.editable().data('callbacks', {onInit: options.onInit, onFocus: options.onFocus, onBlur: options.onBlur, onKeydown: options.onKeydown, onKeyup: options.onKeyup, onMousedown: options.onMousedown, onEnter: options.onEnter, onPaste: options.onPaste, onBeforeCommand: options.onBeforeCommand, onChange: options.onChange, onImageUpload: options.onImageUpload, onImageUploadError: options.onImageUploadError, onMediaDelete: options.onMediaDelete, onToolbarClick: options.onToolbarClick }); if (dom.isTextarea(list.head(layoutInfo.holder()))) {layoutInfo.holder().closest('form').submit(function() {layoutInfo.holder().val(layoutInfo.holder().code()); }); } }; this.attachCustomEvent = function(layoutInfo, options) {var $holder = layoutInfo.holder(); var $editable = layoutInfo.editable(); var callbacks = $editable.data('callbacks'); $editable.focus(bindCustomEvent($holder, callbacks, 'focus')); $editable.blur(bindCustomEvent($holder, callbacks, 'blur')); $editable.keydown(function(event) {if (event.keyCode === key.code.ENTER) {bindCustomEvent($holder, callbacks, 'enter').call(this, event); } bindCustomEvent($holder, callbacks, 'keydown').call(this, event); }); $editable.keyup(bindCustomEvent($holder, callbacks, 'keyup')); $editable.on('mousedown', bindCustomEvent($holder, callbacks, 'mousedown')); $editable.on('mouseup', bindCustomEvent($holder, callbacks, 'mouseup')); $editable.on('scroll', bindCustomEvent($holder, callbacks, 'scroll')); $editable.on('paste', bindCustomEvent($holder, callbacks, 'paste')); var changeEventName = agent.isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input'; $editable.on(changeEventName, function() {bindCustomEvent($holder, callbacks, 'change')($editable.html(), $editable); }); if (!options.airMode) {layoutInfo.toolbar().click(bindCustomEvent($holder, callbacks, 'toolbar.click')); layoutInfo.popover().click(bindCustomEvent($holder, callbacks, 'popover.click')); } if (dom.isTextarea(list.head($holder))) {$holder.closest('form').submit(function(e) {bindCustomEvent($holder, callbacks, 'submit').call(this, e, $holder.code()); }); } bindCustomEvent($holder, callbacks, 'init')(layoutInfo); for (var i = 0, len = $.materialnote.plugins.length; i < len; i++) {if ($.isFunction($.materialnote.plugins[i].init)) {$.materialnote.plugins[i].init(layoutInfo); } } }; this.detach = function(layoutInfo, options) {layoutInfo.holder().off(); layoutInfo.editable().off(); layoutInfo.popover().off(); layoutInfo.handle().off(); layoutInfo.dialog().off(); if (!options.airMode) {layoutInfo.dropzone().off(); layoutInfo.toolbar().off(); layoutInfo.statusbar().off(); } }; }; var Renderer = function() {var tplButton = function(label, options) {var event = options.event; var value = options.value; var title = options.title; var style = options.style; var btnClassName = options.btnClassName; var className = options.className; var dropdown = options.dropdown; var hide = options.hide; if (!dropdown) {var button = ['<div class=\\\"waves-effect waves-light btn', (className ? \\\" \\\" + className : '') + '\\\"', (title ? ' title=\\\"' + title + '\\\"' : ''), (style ? ' style=\\\"' + style + '\\\"' : ''), (event ? ' data-event=\\\"' + event + '\\\"' : ''), (value ? ' data-value=\\\\'' + value + '\\\\'' : ''), (hide ? ' data-hide=\\\\'' + hide + '\\\\'' : ''), ' tabindex=\\\"-1\\\">' + label + '<\\/div>'].join(''); return button; } else {var list = ['<div class=\\\"btn-group', (className ? \\\" \\\" + className : '') + '\\\">', '<button class=\\\"waves-effect waves-light btn dropdown ' + (btnClassName ? btnClassName : '') + '\\\"', (title ? ' title=\\\"' + title + '\\\"' : ''), (event ? ' data-event=\\\"' + event + '\\\"' : ''), (value ? ' data-value=\\\\'' + value + '\\\\'' : ''), (hide ? ' data-hide=\\\\'' + hide + '\\\\'' : ''), '><i class=\\\"material-icons left\\\">arrow_drop_down<\\/i>' + label + '<\\/button>', dropdown, '<\\/div>'].join(''); return list; } }; var tplIconButton = function(iconClassName, options) {var label = '<i class=\\\"material-icons\\\">' + iconClassName + '<\\/i>'; return tplButton(label, options); }; var tplPopover = function(className, content) {var $popover = $('<div class=\\\"' + className + ' popover bottom in\\\" style=\\\"display: none;\\\">' + '<div class=\\\"arrow\\\"><\\/div>' + '<div class=\\\"popover-content\\\">' + '<\\/div>' + '<\\/div>'); $popover.find('.popover-content').append(content); return $popover; }; var tplDialog = function(className, title, body, footer) {var modal = ['<div class=\\\"' + className + ' modal modal-fixed-footer\\\">', '<div class=\\\"modal-content\\\">', (title ? '<h4>' + title + '<\\/h4>' : ''), '<p>' + body + '<\\/p>', '<\\/div>', (footer ? '<div class=\\\"modal-footer\\\">' + footer + '<\\/div>' : ''), '<\\/div>'].join(''); return modal; }; var tplButtonInfo = {picture: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.image.image, {event: 'showImageDialog', title: lang.image.image, hide: true }); }, link: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.link.link, {event: 'showLinkDialog', title: lang.link.link, hide: true }); }, table: function(lang, options) {var dropdown = '<ul class=\\\"note-table dropdown-menu\\\">' + '<div class=\\\"row\\\">' + '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-bordered\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-bordered\\\">' + lang.table.bordered + '<\\/label><\\/div>' + '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-striped\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-striped\\\">' + lang.table.striped + '<\\/label><\\/div>' + '<\\/div>' + '<div class=\\\"row\\\">' + '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-hoverable\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-hoverable\\\">' + lang.table.hoverable + '<\\/label><\\/div>' + '<div class=\\\"col s6 preventDropClose\\\"><input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-responsive\\\" checked=\\\"checked\\\" /><label for=\\\"' + materialUniqueId + '-responsive\\\">' + lang.table.responsive + '<\\/label><\\/div>' + '<\\/div>' + '<div class=\\\"note-dimension-picker\\\">' + '<div class=\\\"note-dimension-picker-mousecatcher\\\" data-event=\\\"insertTable\\\" data-value=\\\"1x1\\\"><\\/div>' + '<div class=\\\"note-dimension-picker-highlighted\\\"><\\/div>' + '<div class=\\\"note-dimension-picker-unhighlighted\\\"><\\/div>' + '<\\/div>' + '<div class=\\\"note-dimension-display\\\"> 1 x 1 <\\/div>' + '<\\/ul>'; return tplIconButton(options.iconPrefix + options.icons.table.table, {title: lang.table.table, dropdown: dropdown }); }, style: function(lang, options) {var items = options.styleTags.reduce(function(memo, v) {var label = lang.style[v === 'p' ? 'normal' : v]; return memo + '<li><div data-event=\\\"formatBlock\\\" data-value=\\\"' + v + '\\\">' + ((v === 'p' || v === 'pre') ? label : '<' + v + '>' + label + '<\\/' + v + '>') + '<\\/div><\\/li>'; }, ''); return tplIconButton(options.iconPrefix + options.icons.style.style, {title: lang.style.style, dropdown: '<ul class=\\\"dropdown-menu largeDropdown\\\">' + items + '<\\/ul>'}); }, fontname: function(lang, options) {var realFontList = []; var items = options.fontNames.reduce(function(memo, v) {if (!agent.isFontInstalled(v) && options.fontNamesIgnoreCheck.indexOf(v) === -1) {return memo; } realFontList.push(v); return memo + '<li><div data-event=\\\"fontName\\\" href=\\\"#\\\" data-value=\\\"' + v + '\\\" style=\\\"font-family:\\\\'' + v + '\\\\'\\\">' + '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v + '<\\/div><\\/li>'; }, ''); var hasDefaultFont = agent.isFontInstalled(options.defaultFontName); var defaultFontName = (hasDefaultFont) ? options.defaultFontName : realFontList[0]; var label = '<div class=\\\"note-current-fontname\\\">' + defaultFontName + '<\\/div>'; return tplButton(label, {title: lang.font.name, className: 'note-fontname', dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'}); }, fontsize: function(lang, options) {var items = options.fontSizes.reduce(function(memo, v) {return memo + '<li><div data-event=\\\"fontSize\\\" href=\\\"#\\\" data-value=\\\"' + v + '\\\">' + '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v + '<\\/div><\\/li>'; }, ''); var label = '<span class=\\\"note-current-fontsize\\\">15<\\/span>'; return tplButton(label, {title: lang.font.size, className: 'note-fontsize', dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'}); }, color: function(lang, options) {var colorButtonLabel = '<i class=\\\"material-icons\\\">' + options.icons.color.recent + '<\\/i>', colorButton = tplButton(colorButtonLabel, {className: 'note-recent-color', title: lang.color.recent, style: \\\"color: \\\" + options.defaultTextColor + \\\"; background-color: \\\" + options.defaultBackColor + \\\";\\\", event: 'color', value: '{\\\"backColor\\\": \\\"' + options.defaultBackColor + '\\\"}'}); var dropdown = '<ul id=\\\"colors\\\" class=\\\"dropdown-menu\\\">' + '<li>' + '<div class=\\\"col s12\\\">' + '<ul class=\\\"tabs\\\">' + '<li class=\\\"tab\\\"><a href=\\\"#' + materialUniqueId + '-foreColor\\\" class=\\\"active\\\">' + lang.color.foreground + '<\\/a><\\/li>' + '<li class=\\\"tab\\\"><a href=\\\"#' + materialUniqueId + '-backColor\\\">' + lang.color.background + '<\\/a><\\/li>' + '<\\/ul>' + '<\\/div>' + '<div class=\\\"col s12 colorTable\\\">' + '<div id=\\\"' + materialUniqueId + '-foreColor\\\">' + '<div class=\\\"note-color-reset waves-effect waves-light btn\\\" data-event=\\\"foreColor\\\" data-value=\\\"' + options.defaultTextColor + '\\\" title=\\\"' + lang.color.reset + '\\\">' + lang.color.resetToDefault + '<\\/div>' + '<div class=\\\"colorName\\\"><\\/div>' + '<div class=\\\"note-color-palette\\\" data-target-event=\\\"foreColor\\\"><\\/div>' + '<\\/div>' + '<div id=\\\"' + materialUniqueId + '-backColor\\\">' + '<div class=\\\"note-color-reset waves-effect waves-light btn\\\" data-event=\\\"backColor\\\"' + ' data-value=\\\"' + options.defaultBackColor + '\\\" title=\\\"' + lang.color.transparent + '\\\">' + lang.color.setTransparent + '<\\/div>' + '<div class=\\\"colorName\\\"><\\/div>' + '<div class=\\\"note-color-palette\\\" data-target-event=\\\"backColor\\\"><\\/div>' + '<\\/div>' + '<\\/div>' + '<\\/li>' + '<\\/ul>'; var moreButton = tplButton('', {title: lang.color.more, className: 'closeLeft', dropdown: dropdown }); return moreButton + colorButton; }, bold: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.bold, {event: 'bold', title: lang.font.bold }); }, italic: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.italic, {event: 'italic', title: lang.font.italic }); }, underline: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.underline, {event: 'underline', title: lang.font.underline }); }, strikethrough: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.strikethrough, {event: 'strikethrough', title: lang.font.strikethrough }); }, superscript: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.superscript, {event: 'superscript', title: lang.font.superscript }); }, subscript: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.subscript, {event: 'subscript', title: lang.font.subscript }); }, clear: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.font.clear, {event: 'removeFormat', title: lang.font.clear }); }, ul: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.lists.unordered, {event: 'insertUnorderedList', title: lang.lists.unordered }); }, ol: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.lists.ordered, {event: 'insertOrderedList', title: lang.lists.ordered }); }, leftButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.left, {title: lang.paragraph.left, event: 'justifyLeft'}); }, centerButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.center, {title: lang.paragraph.center, event: 'justifyCenter'}); }, rightButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.right, {title: lang.paragraph.right, event: 'justifyRight'}); }, justifyButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {title: lang.paragraph.justify, event: 'justifyFull'}); }, outdentButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {title: lang.paragraph.outdent, event: 'outdent'}); }, indentButton: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {title: lang.paragraph.indent, event: 'indent'}); }, paragraph: function(lang, options) {var leftButton = tplIconButton(options.iconPrefix + options.icons.paragraph.left, {title: lang.paragraph.left, event: 'justifyLeft'}); var centerButton = tplIconButton(options.iconPrefix + options.icons.paragraph.center, {title: lang.paragraph.center, event: 'justifyCenter'}); var rightButton = tplIconButton(options.iconPrefix + options.icons.paragraph.right, {title: lang.paragraph.right, event: 'justifyRight'}); var justifyButton = tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {title: lang.paragraph.justify, event: 'justifyFull'}); var outdentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {title: lang.paragraph.outdent, event: 'outdent'}); var indentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {title: lang.paragraph.indent, event: 'indent'}); var dropdown = '<ul class=\\\"dropdown-menu\\\">' + '<div class=\\\"note-align btn-group\\\">' + leftButton + centerButton + rightButton + justifyButton + '<\\/div>' + '<div class=\\\"note-list btn-group\\\">' + indentButton + outdentButton + '<\\/div>' + '<\\/ul>'; return tplIconButton(options.iconPrefix + options.icons.paragraph.paragraph, {title: lang.paragraph.paragraph, dropdown: dropdown }); }, lineheight: function(lang, options) {var items = options.lineHeights.reduce(function(memo, v) {return memo + '<li><div data-event=\\\"lineHeight\\\" href=\\\"#\\\" data-value=\\\"' + parseFloat(v) + '\\\">' + '<i class=\\\"material-icons tiny transparent\\\">' + options.iconPrefix + options.icons.misc.check + '<\\/i> ' + v + '<\\/div><\\/li>'; }, ''); return tplIconButton(options.iconPrefix + options.icons.font.height, {title: lang.font.height, className: 'note-height', dropdown: '<ul class=\\\"dropdown-menu note-check\\\">' + items + '<\\/ul>'}); }, help: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.options.help, {event: 'showHelpDialog', title: lang.options.help, hide: true }); }, fullscreen: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.options.fullscreen, {event: 'fullscreen', title: lang.options.fullscreen }); }, codeview: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.options.codeview, {event: 'codeview', title: lang.options.codeview }); }, undo: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.history.undo, {event: 'undo', title: lang.history.undo }); }, redo: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.history.redo, {event: 'redo', title: lang.history.redo }); }, hr: function(lang, options) {return tplIconButton(options.iconPrefix + options.icons.hr.insert, {event: 'insertHorizontalRule', title: lang.hr.insert }); } }; var tplPopovers = function(lang, options) {var tplLinkPopover = function() {var linkButton = tplIconButton(options.iconPrefix + options.icons.link.edit, {title: lang.link.edit, event: 'showLinkDialog', hide: true }); var unlinkButton = tplIconButton(options.iconPrefix + options.icons.link.unlink, {title: lang.link.unlink, event: 'unlink'}); var content = '<a href=\\\"http://www.google.com\\\" target=\\\"_blank\\\">www.google.com<\\/a>&nbsp;&nbsp;' + '<div class=\\\"note-insert btn-group\\\">' + linkButton + unlinkButton + '<\\/div>'; return tplPopover('note-link-popover', content); }; var tplImagePopover = function() {var fullButton = tplButton('<span class=\\\"note-\";a.a+=\"fontsize-10\\\">100%<\\/span>', {title: lang.image.resizeFull, event: 'resize', value: '1'}); var halfButton = tplButton('<span class=\\\"note-fontsize-10\\\">50%<\\/span>', {title: lang.image.resizeHalf, event: 'resize', value: '0.5'}); var quarterButton = tplButton('<span class=\\\"note-fontsize-10\\\">25%<\\/span>', {title: lang.image.resizeQuarter, event: 'resize', value: '0.25'}); var leftButton = tplIconButton(options.iconPrefix + options.icons.image.floatLeft, {title: lang.image.floatLeft, event: 'floatMe', value: 'left'}); var rightButton = tplIconButton(options.iconPrefix + options.icons.image.floatRight, {title: lang.image.floatRight, event: 'floatMe', value: 'right'}); var justifyButton = tplIconButton(options.iconPrefix + options.icons.image.floatNone, {title: lang.image.floatNone, event: 'floatMe', value: 'none'}); var roundedButton = tplIconButton(options.iconPrefix + options.icons.image.shapeRounded, {title: lang.image.shapeRounded, event: 'imageClass', value: 'img-rounded'}); var circleButton = tplIconButton(options.iconPrefix + options.icons.image.shapeCircle, {title: lang.image.shapeCircle, event: 'imageClass', value: 'img-circle'}); var thumbnailButton = tplIconButton(options.iconPrefix + options.icons.image.shapeThumbnail, {title: lang.image.shapeThumbnail, event: 'imageClass', value: 'img-thumbnail'}); var borderedButton = tplIconButton(options.iconPrefix + options.icons.image.bordered, {title: lang.image.bordered, event: 'imageClass', value: 'img-bordered'}); var noneButton = tplIconButton(options.iconPrefix + options.icons.image.shapeNone, {title: lang.image.shapeNone, event: 'imageShape', value: ''}); var removeButton = tplIconButton(options.iconPrefix + options.icons.image.remove, {title: lang.image.remove, event: 'removeMedia', value: 'none'}); var content = '<div class=\\\"btn-group\\\">' + leftButton + rightButton + justifyButton + '<\\/div>' + '<div class=\\\"btn-group\\\">' + roundedButton + circleButton + thumbnailButton + borderedButton + noneButton + '<\\/div>' + '<div class=\\\"btn-group\\\">' + removeButton + '<\\/div>'; return tplPopover('note-image-popover', content); }; var tplAirPopover = function() {var $content = $('<div />'); for (var idx = 0, len = options.airPopover.length; idx < len; idx ++) {var group = options.airPopover[idx]; var $group = $('<div class=\\\"note-' + group[0] + ' btn-group\\\">'); for (var i = 0, lenGroup = group[1].length; i < lenGroup; i++) {var $button = $(tplButtonInfo[group[1][i]](lang, options)); $button.attr('data-name', group[1][i]); $group.append($button); } $content.append($group); } return tplPopover('note-air-popover', $content.children()); }; var $notePopover = $('<div class=\\\"note-popover\\\" />'); $notePopover.append(tplLinkPopover()); $notePopover.append(tplImagePopover()); if (options.airMode) {$notePopover.append(tplAirPopover()); } return $notePopover; }; var tplHandles = function() {return '<div class=\\\"note-handle\\\">' + '<div class=\\\"note-control-selection\\\">' + '<div class=\\\"note-control-selection-bg\\\"><\\/div>' + '<div class=\\\"note-control-sizing note-control-se\\\"><\\/div>' + '<div class=\\\"note-control-selection-info\\\"><\\/div>' + '<\\/div>' + '<\\/div>'; }; var tplShortcut = function(title, keys) {var keyClass = 'note-shortcut-col col-xs-6 note-shortcut-'; var body = []; for (var i in keys) {if (keys.hasOwnProperty(i)) {body.push('<tr><td>' + keys[i].kbd + '<\\/td><td>' + keys[i].text + '<\\/td><\\/tr>'); } } return '<thead><tr><th>' + title + '<\\/th><th>' + '(keys)' + '<\\/th><\\/tr><\\/thead>' + '<tbody>' + body.join('') + '<\\/tbody>'; }; var tplShortcutText = function(lang) {var keys = [{ kbd: '\\u2318 + B', text: lang.font.bold }, { kbd: '\\u2318 + I', text: lang.font.italic }, { kbd: '\\u2318 + U', text: lang.font.underline }, { kbd: '\\u2318 + \\\\\\\\', text: lang.font.clear } ]; return tplShortcut(lang.shortcut.textFormatting, keys); }; var tplShortcutAction = function(lang) {var keys = [{ kbd: '\\u2318 + Z', text: lang.history.undo }, { kbd: '\\u2318 + \\u21E7 + Z', text: lang.history.redo }, { kbd: '\\u2318 + ]', text: lang.paragraph.indent }, { kbd: '\\u2318 + [', text: lang.paragraph.outdent }, { kbd: '\\u2318 + ENTER', text: lang.hr.insert } ]; return tplShortcut(lang.shortcut.action, keys); }; var tplShortcutPara = function(lang) {var keys = [{ kbd: '\\u2318 + \\u21E7 + L', text: lang.paragraph.left }, { kbd: '\\u2318 + \\u21E7 + E', text: lang.paragraph.center }, { kbd: '\\u2318 + \\u21E7 + R', text: lang.paragraph.right }, { kbd: '\\u2318 + \\u21E7 + J', text: lang.paragraph.justify }, { kbd: '\\u2318 + \\u21E7 + NUM7', text: lang.lists.ordered }, { kbd: '\\u2318 + \\u21E7 + NUM8', text: lang.lists.unordered } ]; return tplShortcut(lang.shortcut.paragraphFormatting, keys); }; var tplShortcutStyle = function(lang) {var keys = [{ kbd: '\\u2318 + NUM0', text: lang.style.normal }, { kbd: '\\u2318 + NUM1', text: lang.style.h1 }, { kbd: '\\u2318 + NUM2', text: lang.style.h2 }, { kbd: '\\u2318 + NUM3', text: lang.style.h3 }, { kbd: '\\u2318 + NUM4', text: lang.style.h4 }, { kbd: '\\u2318 + NUM5', text: lang.style.h5 }, { kbd: '\\u2318 + NUM6', text: lang.style.h6 } ]; return tplShortcut(lang.shortcut.documentStyle, keys); }; var tplExtraShortcuts = function(lang, options) {var extraKeys = options.extraKeys; var keys = []; for (var key in extraKeys) {if (extraKeys.hasOwnProperty(key)) {keys.push({ kbd: key, text: extraKeys[key] }); } } return tplShortcut(lang.shortcut.extraKeys, keys); }; var tplShortcutTable = function(lang, options) {var template = ['<table class=\\\"striped hoverable\\\">' + tplShortcutAction(lang, options) + '<\\/table>', '<table class=\\\"striped hoverable\\\">' + tplShortcutStyle(lang, options) + '<\\/table>', '<table class=\\\"striped hoverable\\\">' + tplShortcutText(lang, options) + '<\\/table>', '<table class=\\\"striped hoverable\\\">' + tplShortcutPara(lang, options) + '<\\/table>'].join('<br>'); if (options.extraKeys) {} return template; }; var replaceMacKeys = function(sHtml) {return sHtml.replace(/\\u2318/g, 'Ctrl').replace(/\\u21E7/g, 'Shift'); }; var tplDialogInfo = {image: function(lang, options) {var imageLimitation = ''; if (options.maximumImageFileSize) {var unit = Math.floor(Math.log(options.maximumImageFileSize) / Math.log(1024)); var readableSize = (options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 + ' ' + ' KMGTP'[unit] + 'B'; imageLimitation = '<small>' + lang.image.maximumFileSize + ' : ' + readableSize + '<\\/small>'; } var body = '<div class=\\\"row\\\">' + '<div class=\\\"col s12\\\">' + '<div class=\\\"file-field input-field\\\">' + '<div class=\\\"btn\\\">' + '<span>' + lang.image.image + '<\\/span>' + '<input class=\\\"note-image-input\\\" name=\\\"files\\\" type=\\\"file\\\" />' + '<\\/div>' + '<div class=\\\"file-path-wrapper\\\">' + '<input class=\\\"file-path\\\" type=\\\"text\\\" />' + '<\\/div>' + '<\\/div>' + '<\\/div>' + '<\\/div>' + '<div class=\\\"row\\\">' + '<div class=\\\"input-field col s12\\\">' + '<input class=\\\"note-image-url\\\" type=\\\"text\\\" />' + '<label>' + lang.image.url + '<\\/label>' + '<\\/div>' + '<\\/div>'; var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn note-image-btn disabled\\\" disabled>' + lang.image.insert + '<\\/button>' + '<button class=\\\"waves-effect waves-light btn btnClose\\\">' + lang.shortcut.close + '<\\/button>'; return tplDialog('note-image-dialog', lang.image.insert, body, footer); }, link: function(lang, options) {var body = '<div class=\\\"row\\\">' + '<div class=\\\"input-field col s12\\\">' + '<input class=\\\"note-link-text\\\" type=\\\"text\\\" />' + '<label>' + lang.link.textToDisplay + '<\\/label>' + '<\\/div>' + '<\\/div>' + '<div class=\\\"row\\\">' + '<div class=\\\"input-field col s12\\\">' + '<input class=\\\"note-link-url\\\" type=\\\"text\\\" value=\\\"http://\\\" />' + '<label class=\\\"active\\\">' + lang.link.url + '<\\/label>' + '<\\/div>' + '<\\/div>' + (!options.disableLinkTarget ? '<div class=\\\"row\\\">' + '<div class=\\\"col s12\\\">' + '<input type=\\\"checkbox\\\" id=\\\"' + materialUniqueId + '-noteInsertLinkNewWindow\\\" checked=\\\"checked\\\" />' + '<label for=\\\"' + materialUniqueId + '-noteInsertLinkNewWindow\\\">' + lang.link.openInNewWindow + '<\\/label>' + '<\\/div>' + '<\\/div>': ''); var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn note-link-btn disabled\\\" disabled>' + lang.link.insert + '<\\/button>' + '<button class=\\\"waves-effect waves-light btn btnClose\\\">' + lang.shortcut.close + '<\\/button>'; return tplDialog('note-link-dialog', lang.link.insert, body, footer); }, help: function(lang, options) {var body = (agent.isMac ? tplShortcutTable(lang, options) : replaceMacKeys(tplShortcutTable(lang, options))); var footer = '<button href=\\\"#\\\" class=\\\"waves-effect waves-light btn modal-close\\\">' + lang.shortcut.close + '<\\/button>'; return tplDialog('note-help-dialog', lang.shortcut.shortcuts, body, footer); } }; var tplDialogs = function(lang, options) {var dialogs = ''; $.each(tplDialogInfo, function(idx, tplDialog) {dialogs += tplDialog(lang, options); }); return '<div class=\\\"note-dialog\\\">' + dialogs + '<\\/div>'; }; var tplStatusbar = function() {return '<div class=\\\"note-resizebar\\\">' + '<div class=\\\"note-icon-bar\\\"><\\/div>' + '<div class=\\\"note-icon-bar\\\"><\\/div>' + '<div class=\\\"note-icon-bar\\\"><\\/div>' + '<\\/div>'; }; var representShortcut = function(str) {if (agent.isMac) {str = str.replace('CMD', '\\u2318').replace('SHIFT', '\\u21E7'); } return str.replace('BACKSLASH', '\\\\\\\\') .replace('SLASH', '/') .replace('LEFTBRACKET', '[') .replace('RIGHTBRACKET', ']'); }; var createTooltip = function($container, keyMap, sPlacement) {$(document).ready(function() {var invertedKeyMap = func.invertObject(keyMap); var $buttons = $container.find('.btn'); $buttons.each(function(i, elBtn) {var $btn = $(elBtn); var sShortcut = invertedKeyMap[$btn.data('event')]; var text = $btn.attr('title'); if (sShortcut) {$btn.attr('data-tooltip', function(i, v) {text = text + ' (' + representShortcut(sShortcut) + ')'; $(this).removeAttr('title'); return text; }); } $btn.attr('data-position', 'bottom'); $btn.attr('data-tooltip', text); $btn.removeAttr('title'); }).ckTooltip({container: $container, position: 'top', delay: 30 }); }); }; var createPalette = function($container, options) {var colorInfo = options.colors; var colorTitles = options.colorTitles; $container.find('.note-color-palette').each(function() {var $palette = $(this), eventName = $palette.attr('data-target-event'); var paletteContents = []; for (var row = 0, lenRow = colorInfo.length; row < lenRow; row++) {var colors = colorInfo[row]; var titles = colorTitles[row]; var buttons = []; for (var col = 0, lenCol = colors.length; col < lenCol; col++) {var color = colors[col]; var title = titles[col]; buttons.push(['<button type=\\\"button\\\" class=\\\"note-color-btn\\\" style=\\\"background-color:', color, ';\\\" data-event=\\\"', eventName, '\\\" data-value=\\\"', color, '\\\" data-description=\\\"', title, '\\\" data-toggle=\\\"button\\\" tabindex=\\\"-1\\\"><\\/button>'].join('')); } paletteContents.push('<div class=\\\"note-color-row\\\">' + buttons.join('') + '<\\/div>'); } $palette.html(paletteContents.join('')); $palette.find('button').mouseenter(function() {$palette.siblings('.colorName').html($(this).data('description')); }); $palette.mouseleave(function() {$(this).siblings('.colorName').html(''); }); }); }; this.createLayoutByAirMode = function($holder, options) {var langInfo = options.langInfo; var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc']; var id = func.uniqueId(); $holder.addClass('note-air-editor note-editable'); $holder.attr({'id': 'note-editor-' + id, 'contentEditable': true }); var body = document.body; var $popover = $(tplPopovers(langInfo, options)); $popover.addClass('note-air-layout'); $popover.attr('id', 'note-popover-' + id); $popover.appendTo(body); createTooltip($popover, keyMap); createPalette($popover, options); var $handle = $(tplHandles()); $handle.addClass('note-air-layout'); $handle.attr('id', 'note-handle-' + id); $handle.appendTo(body); var $dialog = $(tplDialogs(langInfo, options)); $dialog.addClass('note-air-layout'); $dialog.attr('id', 'note-dialog-' + id); $dialog.find('button.close, a.modal-close').click(function() {$(this).closest('.modal').closeModal(); }); $dialog.appendTo(body); }; this.createLayoutByFrame = function($holder, options) {var langInfo = options.langInfo; var $editor = $('<div class=\\\"note-editor\\\"><\\/div>'); if (options.width) {$editor.width(options.width); } if (options.height > 0) {$('<div class=\\\"note-statusbar\\\">' + (options.disableResizeEditor ? '' : tplStatusbar()) + '<\\/div>').prependTo($editor); } var isContentEditable = !$holder.is(':disabled'); var $editable = $('<div class=\\\"note-editable\\\" contentEditable=\\\"' + isContentEditable + '\\\"><\\/div>') .prependTo($editor); if (options.height) {$editable.height(options.height); } if (options.direction) {$editable.attr('dir', options.direction); } var placeholder = $holder.attr('placeholder') || options.placeholder; if (placeholder) {$editable.attr('data-placeholder', placeholder); } $editable.html(dom.html($holder)); $('<textarea class=\\\"note-codable\\\"><\\/textarea>').prependTo($editor); var $toolbar = $('<div class=\\\"note-toolbar btn-toolbar\\\" />'); for (var idx = 0, len = options.toolbar.length; idx < len; idx ++) {var groupName = options.toolbar[idx][0]; var groupButtons = options.toolbar[idx][1]; var $group = $('<div class=\\\"note-' + groupName + ' btn-group\\\" />'); for (var i = 0, btnLength = groupButtons.length; i < btnLength; i++) {var buttonInfo = tplButtonInfo[groupButtons[i]]; if (!$.isFunction(buttonInfo)) { continue; } var $button = $(buttonInfo(langInfo, options)); $button.attr('data-name', groupButtons[i]); $group.append($button); } $toolbar.append($group); } $toolbar.prependTo($editor); var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc']; createPalette($toolbar, options); createTooltip($toolbar, keyMap, 'bottom'); function followingBar() {$(window).scroll(function() {var isFullscreen = $editor.hasClass('fullscreen'); if (isFullscreen) {return false; } var toolbar = $editor.children('.note-toolbar'); var toolbarHeight = toolbar.outerHeight(); var editable = $editor.children('.note-editable'); var editableHeight = editable.outerHeight(); var editorWidth = $editor.width; var toolbarOffset, editorOffsetTop, editorOffsetBottom; var activateOffset, deactivateOffsetTop, deactivateOffsetBottom; var currentOffset; var relativeOffset; var otherBarHeight; otherBarHeight = $(\\\".\\\" + options.otherStaticBarClass).outerHeight(); if (!otherBarHeight) otherBarHeight = 0; currentOffset = $(document).scrollTop(); toolbarOffset = toolbar.offset().top; editorOffsetTop = $editor.offset().top; editorOffsetBottom = editorOffsetTop + editableHeight; activateOffset = toolbarOffset - otherBarHeight; deactivateOffsetBottom = editorOffsetBottom - otherBarHeight; deactivateOffsetTop = editorOffsetTop - otherBarHeight; if ((currentOffset > activateOffset) && (currentOffset < deactivateOffsetBottom)) {relativeOffset = currentOffset - $editor.offset().top + otherBarHeight; toolbar.css({'top': relativeOffset + 'px', 'z-index': 2000}); } else {if ((currentOffset < toolbarOffset) && (currentOffset < deactivateOffsetBottom)) {toolbar.css({'top': 0, 'z-index': 1052}); if (currentOffset > deactivateOffsetTop) {relativeOffset = currentOffset - $editor.offset().top + otherBarHeight; toolbar.css({'top': relativeOffset + 'px', 'z-index': 2000}); } } } }); } if (options.followingToolbar) {followingBar(); } var $popover = $(tplPopovers(langInfo, options)).prependTo($editor); createPalette($popover, options); createTooltip($popover, keyMap); $(tplHandles()).prependTo($editor); var $dialog = $(tplDialogs(langInfo, options)).prependTo($editor); $dialog.find('button.close, a.modal-close').click(function() {$(this).closest('.modal').closeModal(); }); $('<div class=\\\"note-dropzone\\\"><div class=\\\"note-dropzone-message\\\"><\\/div><\\/div>').prependTo($editor); $editor.insertAfter($holder); $holder.hide(); }; this.hasNoteEditor = function($holder) {return this.noteEditorFromHolder($holder).length > 0; }; this.noteEditorFromHolder = function($holder) {if ($holder.hasClass('note-air-editor')) {return $holder; } else if ($holder.next().hasClass('note-editor')) {return $holder.next(); } else {return $(); } }; this.createLayout = function($holder, options) {if (options.airMode) {this.createLayoutByAirMode($holder, options); } else {this.createLayoutByFrame($holder, options); } }; this.layoutInfoFromHolder = function($holder) {var $editor = this.noteEditorFromHolder($holder); if (!$editor.length) {return; } $editor.data('holder', $holder); return dom.buildLayoutInfo($editor); }; this.removeLayout = function($holder, layoutInfo, options) {if (options.airMode) {$holder.removeClass('note-air-editor note-editable') .removeAttr('id contentEditable'); layoutInfo.popover().remove(); layoutInfo.handle().remove(); layoutInfo.dialog().remo\";a.a+=\"ve(); } else {$holder.html(layoutInfo.editable().html()); layoutInfo.editor().remove(); $holder.show(); } }; this.getTemplate = function() {return {button: tplButton, iconButton: tplIconButton, dialog: tplDialog }; }; this.addButtonInfo = function(name, buttonInfo) {tplButtonInfo[name] = buttonInfo; }; this.addDialogInfo = function(name, dialogInfo) {tplDialogInfo[name] = dialogInfo; }; }; $.materialnote = $.materialnote || {}; $.extend($.materialnote, defaults); var renderer = new Renderer(); var eventHandler = new EventHandler(); $.extend($.materialnote, {renderer: renderer, eventHandler: eventHandler, core: {agent: agent, list : list, dom: dom, range: range }, pluginEvents: {}, plugins : [] }); $.materialnote.addPlugin = function(plugin) {$.materialnote.plugins.push(plugin); if (plugin.buttons) {$.each(plugin.buttons, function(name, button) {renderer.addButtonInfo(name, button); }); } if (plugin.dialogs) {$.each(plugin.dialogs, function(name, dialog) {renderer.addDialogInfo(name, dialog); }); } if (plugin.events) {$.each(plugin.events, function(name, event) {$.materialnote.pluginEvents[name] = event; }); } if (plugin.langs) {$.each(plugin.langs, function(locale, lang) {if ($.materialnote.lang[locale]) {$.extend($.materialnote.lang[locale], lang); } }); } if (plugin.options) {$.extend($.materialnote.options, plugin.options); } }; $.fn.extend({materialnote: function() {var type = $.type(list.head(arguments)); var isExternalAPICalled = type === 'string'; var hasInitOptions = type === 'object'; var options = hasInitOptions ? list.head(arguments) : {}; options = $.extend({}, $.materialnote.options, options); options.icons = $.extend({}, $.materialnote.options.icons, options.icons); options.langInfo = $.extend(true, {}, $.materialnote.lang['en-US'], $.materialnote.lang[options.lang]); if (!isExternalAPICalled && hasInitOptions) {for (var i = 0, len = $.materialnote.plugins.length; i < len; i++) {var plugin = $.materialnote.plugins[i]; if (options.plugin[plugin.name]) {$.materialnote.plugins[i] = $.extend(true, plugin, options.plugin[plugin.name]); } } } this.each(function(idx, holder) {materialUniqueId = 'note-editor-' + func.uniqueId(); var $holder = $(holder); if (!renderer.hasNoteEditor($holder)) {renderer.createLayout($holder, options); var layoutInfo = renderer.layoutInfoFromHolder($holder); $holder.data('layoutInfo', layoutInfo); eventHandler.attach(layoutInfo, options); eventHandler.attachCustomEvent(layoutInfo, options); } }); var $first = this.first(); if ($first.length) {var layoutInfo = renderer.layoutInfoFromHolder($first); if (isExternalAPICalled) {var moduleAndMethod = list.head(list.from(arguments)); var args = list.tail(list.from(arguments)); var params = [moduleAndMethod, layoutInfo.editable()].concat(args); return eventHandler.invoke.apply(eventHandler, params); } else if (options.focus) {layoutInfo.editable().focus(); } } $(this).each(function(index, editor) {var tabs; var tabContainer; var toolbar; var isAir = false; if ($(editor).hasClass('note-air-editor')) {var id = $(this).attr('id'); if (id) id = id.substring(id.lastIndexOf('-') + 1, id.length); editor = $('#note-popover-' + id).find('.note-air-popover'); tabContainer = editor.find('ul.tabs'); tabs = editor.find('li.tab a'); toolbar = $(editor).find('.popover-content button.dropdown'); isAir = true; } else {editor = $(editor).next('.note-editor'); tabContainer = editor.find('ul.tabs'); tabs = editor.find('li.tab a'); toolbar = $(editor).find('.note-toolbar button.dropdown'); } var go = true; function handleDropdowns(select, bar) {var list = $(select).next('ul.dropdown-menu'); var container = $(select).parent('.btn-group'); list.slideUp(0); $('.preventDropClose').click(function(event) {event.stopPropagation(); }); $(select).click(function(event) {var btnOffset = Math.round($(select).parent('.btn-group').offset().left - toolbar.offset().left); var listBorderWidth = parseInt(list.css(\\\"border-left-width\\\")); var editorWidth = editor.outerWidth(); var listOffset = listBorderWidth; list.css({'max-width': editorWidth + 'px'}); var listWidth = list.outerWidth(); var th = listWidth + btnOffset; if (th >= editorWidth) {listOffset = th - editorWidth; if (!isAir) {listOffset = listOffset + listBorderWidth; } } list.css({'left': '-' + listOffset + 'px'}); var reopen = true; if (list.is(':visible')) reopen = false; bar.find('ul.dropdown-menu').slideUp(200); if (reopen) {list.slideToggle(200); } event.stopPropagation(); }); tabs.unbind().click(function(event) {go = false; }); } $(window).click(function(event) {if (go) editor.find('ul.dropdown-menu').slideUp(200); go = true; event.stopPropagation(); }); toolbar.each(function(index, select) {handleDropdowns(select, editor); }); tabContainer.tabs(); }); return this; }, code: function(html) {if (html === undefined) {var $holder = this.first(); if (!$holder.length) {return; } var layoutInfo = renderer.layoutInfoFromHolder($holder); var $editable = layoutInfo && layoutInfo.editable(); if ($editable && $editable.length) {var isCodeview = eventHandler.invoke('codeview.isActivated', layoutInfo); eventHandler.invoke('codeview.sync', layoutInfo); return isCodeview ? layoutInfo.codable().val() : layoutInfo.editable().html(); } return dom.value($holder); } this.each(function(i, holder) {var layoutInfo = renderer.layoutInfoFromHolder($(holder)); var $editable = layoutInfo && layoutInfo.editable(); if ($editable) {$editable.html(html); } }); return this; }, destroy: function() {this.each(function(idx, holder) {var $holder = $(holder); if (!renderer.hasNoteEditor($holder)) {return; } var info = renderer.layoutInfoFromHolder($holder); var options = info.editor().data('options'); eventHandler.detach(info, options); renderer.removeLayout($holder, info, options); }); return this; } }); })); (function ($) {$.fn.ckTooltip = function (options) {var timeout = null, counter = null, started = false, counterInterval = null, margin = 5; var defaults = {delay: 350 }; options = $.extend(defaults, options); return this.each(function(){var origin = $(this); var tooltip_text = $('<span><\\/span>').text(origin.attr('data-tooltip')); var newTooltip = $('<div><\\/div>'); newTooltip.addClass('material-tooltip').append(tooltip_text); newTooltip.appendTo($('body')); var backdrop = $('<div><\\/div>').addClass('backdrop'); backdrop.appendTo(newTooltip); backdrop.css({ top: 0, left:0 }); $.event.special.destroyed = {remove: function(o) {if (o.handler) {o.handler(); } } }; $(this).bind('destroyed', function() {newTooltip.remove(); }); $(this).on({mouseenter: function(e) {var tooltip_delay = origin.data(\\\"delay\\\"); tooltip_delay = (tooltip_delay === undefined || tooltip_delay === '') ? options.delay : tooltip_delay; counter = 0; counterInterval = setInterval(function(){counter += 10; if (counter >= tooltip_delay && started === false) {started = true; newTooltip.css({ display: 'block', left: '0px', top: '0px' }); newTooltip.children('span').text(origin.attr('data-tooltip')); var originWidth = origin.outerWidth(); var originHeight = origin.outerHeight(); var tooltipPosition =  origin.attr('data-position'); var tooltipHeight = newTooltip.outerHeight(); var tooltipWidth = newTooltip.outerWidth(); var tooltipVerticalMovement = '0px'; var tooltipHorizontalMovement = '0px'; var scale_factor = 8; if (tooltipPosition === \\\"top\\\") {newTooltip.css({top: origin.offset().top - tooltipHeight - margin, left: origin.offset().left + originWidth/2 - tooltipWidth/2 }); tooltipVerticalMovement = '-10px'; backdrop.css({borderRadius: '14px 14px 0 0', transformOrigin: '50% 90%', marginTop: tooltipHeight, marginLeft: (tooltipWidth/2) - (backdrop.width()/2) }); } else if (tooltipPosition === \\\"left\\\") {newTooltip.css({top: origin.offset().top + originHeight/2 - tooltipHeight/2, left: origin.offset().left - tooltipWidth - margin }); tooltipHorizontalMovement = '-10px'; backdrop.css({width: '14px', height: '14px', borderRadius: '14px 0 0 14px', transformOrigin: '95% 50%', marginTop: tooltipHeight/2, marginLeft: tooltipWidth }); } else if (tooltipPosition === \\\"right\\\") {newTooltip.css({top: origin.offset().top + originHeight/2 - tooltipHeight/2, left: origin.offset().left + originWidth + margin }); tooltipHorizontalMovement = '+10px'; backdrop.css({width: '14px', height: '14px', borderRadius: '0 14px 14px 0', transformOrigin: '5% 50%', marginTop: tooltipHeight/2, marginLeft: '0px'}); } else {newTooltip.css({top: origin.offset().top + origin.outerHeight() + margin, left: origin.offset().left + originWidth/2 - tooltipWidth/2 }); tooltipVerticalMovement = '+10px'; backdrop.css({marginLeft: (tooltipWidth/2) - (backdrop.width()/2) }); } scale_factor = tooltipWidth / 8; if (scale_factor < 8) {scale_factor = 8; } if (tooltipPosition === \\\"right\\\" || tooltipPosition === \\\"left\\\") {scale_factor = tooltipWidth / 10; if (scale_factor < 6) scale_factor = 6; } newTooltip.velocity({ opacity: 1, marginTop: tooltipVerticalMovement, marginLeft: tooltipHorizontalMovement}, { duration: 150, queue: false }); backdrop.css({ display: 'block' }) .velocity({opacity:1},{duration: 50, delay: 0, queue: false}) .velocity({scale: scale_factor}, {duration: 150, delay: 0, queue: false, easing: 'easeInOutQuad'}); } }, 10); }, mouseleave: function(){clearInterval(counterInterval); counter = 0; newTooltip.velocity({opacity: 0, marginTop: 0, marginLeft: 0}, { duration: 150, queue: false, delay: 50 } ); backdrop.velocity({opacity: 0, scale: 1}, {duration:150, delay: 50, queue: false, complete: function(){backdrop.css('display', 'none'); newTooltip.css('display', 'none'); started = false;} }); } }); }); }; }(jQuery));\";return a.a};var YO=Cze(taf,'MaterialRichEditorClientBundle_default_InlineClientBundleGenerator/2',2776);msb(2306,1,{},g8b);var $O=Cze('gwt.material.design.addins.client.richeditor.base','ToolBarManager',2306);msb(94,31,{94:1,4:1,43:1,31:1},O8b);var h8b,i8b,j8b,k8b,l8b,m8b,n8b,o8b,p8b,q8b,r8b,s8b,t8b,u8b,v8b,w8b,x8b,y8b,z8b,A8b,B8b,C8b,D8b,E8b,F8b,G8b,H8b,I8b,J8b,K8b,L8b,M8b;var _O=Dze('gwt.material.design.addins.client.richeditor.base.constants','ToolbarButton',94,P8b);msb(2166,1,HUe,Yhc);_.pd=function Zhc(a){BNb(this.a,this.b)};var NQ=Cze(EQe,'MaterialWidget/lambda$28$Type',2166);msb(945,57,fQe,yDd);_.Ae=function zDd(){jqe();vGb(this,new lqe(A3e,'Provides a great Rich Editor with amazing options built with Material Design Look and Feel.','addins/richeditor/RichEditorView',''))};var C3=Cze(u$e,'RichEditorPresenter',945);msb(1343,65,gQe,HDd);var S3=Cze(u$e,'RichEditorView',1343);msb(1853,1,{},JDd);var Q3=Cze(u$e,'RichEditorView_BinderImpl/Widgets',1853);msb(1854,1,MQe,KDd);_.ld=function LDd(a){hbd(this.a.K.d)};var H3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/1',1854);msb(1863,1,FPe,MDd);_.jd=function NDd(a){Ofd('Blur Event : '+W6b(this.a.K.c))};var D3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/10',1863);msb(1864,1,HUe,ODd);_.pd=function PDd(a){Ofd('Key Up : '+W6b(this.a.K.c))};var E3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/11',1864);msb(1865,1,LQe,QDd);_.od=function RDd(a){Ofd('Key Down : '+W6b(this.a.K.c))};var F3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/12',1865);msb(1866,1,{8:1,2950:1},SDd);var G3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/13',1866);msb(1855,1,MQe,TDd);_.ld=function UDd(a){mbd(this.a.K.d)};var I3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/2',1855);msb(1856,1,MQe,VDd);_.ld=function WDd(a){V6b(this.a.K.b)};var J3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/3',1856);msb(1857,1,MQe,XDd);_.ld=function YDd(a){Y6b(this.a.K.b)};var K3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/4',1857);msb(1858,1,MQe,ZDd);_.ld=function $Dd(a){FDd(this.a.K)};var L3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/5',1858);msb(1859,1,MQe,_Dd);_.ld=function aEd(a){GDd(this.a.K)};var M3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/6',1859);msb(1860,1,MQe,bEd);_.ld=function cEd(a){Ofd(W6b(this.a.K.f))};var N3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/7',1860);msb(1861,1,HPe,dEd);_.yd=function eEd(a){Ofd('Value Change Event : '+W6b(this.a.K.c))};var O3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/8',1861);msb(1862,1,Aaf,fEd);_.nd=function gEd(a){Ofd('Focus Event : '+W6b(this.a.K.c))};var P3=Cze(u$e,'RichEditorView_BinderImpl/Widgets/9',1862);var hEd;msb(2565,1,{},jEd);_.Hd=function kEd(){return dOe};_.a=false;var R3=Cze(u$e,'RichEditorView_BinderImpl_GenBundle_default_InlineClientBundleGenerator/1',2565);msb(794,1,iYe);_.Wc=function vEd(){LKb(this.b,oEd(this.a.a))};VLe(Eq)(15);\n//# sourceURL=gwtmaterialdemo-15.js\n")
